
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081470  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  20000434  000818a4  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004e8  00081958  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  00081d58  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006c3d  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001217  00000000  00000000  000270f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001155  00000000  00000000  0002830a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000208  00000000  00000000  0002945f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00029667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012e48  00000000  00000000  0002982f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000048ff  00000000  00000000  0003c677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005562e  00000000  00000000  00040f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000066c  00000000  00000000  000965a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 75 03 08 00 71 03 08 00 71 03 08 00     ... u...q...q...
   80010:	71 03 08 00 71 03 08 00 71 03 08 00 00 00 00 00     q...q...q.......
	...
   8002c:	71 03 08 00 71 03 08 00 00 00 00 00 71 03 08 00     q...q.......q...
   8003c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8004c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8005c:	71 03 08 00 0d 0d 08 00 71 03 08 00 00 00 00 00     q.......q.......
   8006c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
	...
   80084:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   80094:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800a4:	00 00 00 00 71 03 08 00 4d 05 08 00 71 03 08 00     ....q...M...q...
   800b4:	71 03 08 00 d1 05 08 00 71 03 08 00 71 03 08 00     q.......q...q...
   800c4:	71 03 08 00 71 03 08 00 71 03 08 00 bd 0b 08 00     q...q...q.......
   800d4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800e4:	71 03 08 00 71 03 08 00 d9 02 08 00 71 03 08 00     q...q.......q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081470 	.word	0x00081470

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081470 	.word	0x00081470
   80154:	20000438 	.word	0x20000438
   80158:	00081470 	.word	0x00081470
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b510      	push	{r4, lr}
	if(DEBUG_INTERRUPT) printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802da:	4b15      	ldr	r3, [pc, #84]	; (80330 <CAN0_Handler+0x58>)
   802dc:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802de:	f014 0f06 	tst.w	r4, #6
   802e2:	d019      	beq.n	80318 <CAN0_Handler+0x40>
	{
		// CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e4:	f014 0f02 	tst.w	r4, #2
   802e8:	d108      	bne.n	802fc <CAN0_Handler+0x24>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ea:	f014 0f04 	tst.w	r4, #4
   802ee:	d00a      	beq.n	80306 <CAN0_Handler+0x2e>
		
		{
			can_receive(&message, 2);
   802f0:	2102      	movs	r1, #2
   802f2:	4810      	ldr	r0, [pc, #64]	; (80334 <CAN0_Handler+0x5c>)
   802f4:	4b10      	ldr	r3, [pc, #64]	; (80338 <CAN0_Handler+0x60>)
   802f6:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802f8:	2300      	movs	r3, #0
   802fa:	e009      	b.n	80310 <CAN0_Handler+0x38>
			can_receive(&message, 1);
   802fc:	2101      	movs	r1, #1
   802fe:	480d      	ldr	r0, [pc, #52]	; (80334 <CAN0_Handler+0x5c>)
   80300:	4b0d      	ldr	r3, [pc, #52]	; (80338 <CAN0_Handler+0x60>)
   80302:	4798      	blx	r3
   80304:	e7f8      	b.n	802f8 <CAN0_Handler+0x20>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80306:	480d      	ldr	r0, [pc, #52]	; (8033c <CAN0_Handler+0x64>)
   80308:	4b0d      	ldr	r3, [pc, #52]	; (80340 <CAN0_Handler+0x68>)
   8030a:	4798      	blx	r3
   8030c:	e7f4      	b.n	802f8 <CAN0_Handler+0x20>
		for (int i = 0; i < message.data_length; i++)
   8030e:	3301      	adds	r3, #1
   80310:	4a08      	ldr	r2, [pc, #32]	; (80334 <CAN0_Handler+0x5c>)
   80312:	7892      	ldrb	r2, [r2, #2]
   80314:	4293      	cmp	r3, r2
   80316:	dbfa      	blt.n	8030e <CAN0_Handler+0x36>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x4c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
		//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8031e:	2201      	movs	r2, #1
   80320:	4b03      	ldr	r3, [pc, #12]	; (80330 <CAN0_Handler+0x58>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b06      	ldr	r3, [pc, #24]	; (80344 <CAN0_Handler+0x6c>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
   80330:	400b4000 	.word	0x400b4000
   80334:	20000474 	.word	0x20000474
   80338:	00080255 	.word	0x00080255
   8033c:	000813ec 	.word	0x000813ec
   80340:	00080b99 	.word	0x00080b99
   80344:	e000e100 	.word	0xe000e100

00080348 <DAC_Init>:
   80348:	2240      	movs	r2, #64	; 0x40
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <DAC_Init+0x18>)
   8034c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80350:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   80354:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80358:	605a      	str	r2, [r3, #4]
   8035a:	2202      	movs	r2, #2
   8035c:	611a      	str	r2, [r3, #16]
   8035e:	4770      	bx	lr
   80360:	400e0600 	.word	0x400e0600

00080364 <DAC_write>:
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <DAC_write+0x8>)
   80366:	6218      	str	r0, [r3, #32]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	400c8000 	.word	0x400c8000

00080370 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80370:	e7fe      	b.n	80370 <Dummy_Handler>
	...

00080374 <Reset_Handler>:
{
   80374:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80376:	4b11      	ldr	r3, [pc, #68]	; (803bc <Reset_Handler+0x48>)
   80378:	4a11      	ldr	r2, [pc, #68]	; (803c0 <Reset_Handler+0x4c>)
   8037a:	429a      	cmp	r2, r3
   8037c:	d009      	beq.n	80392 <Reset_Handler+0x1e>
   8037e:	4b0f      	ldr	r3, [pc, #60]	; (803bc <Reset_Handler+0x48>)
   80380:	4a0f      	ldr	r2, [pc, #60]	; (803c0 <Reset_Handler+0x4c>)
   80382:	e003      	b.n	8038c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80384:	6811      	ldr	r1, [r2, #0]
   80386:	6019      	str	r1, [r3, #0]
   80388:	3304      	adds	r3, #4
   8038a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8038c:	490d      	ldr	r1, [pc, #52]	; (803c4 <Reset_Handler+0x50>)
   8038e:	428b      	cmp	r3, r1
   80390:	d3f8      	bcc.n	80384 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80392:	4b0d      	ldr	r3, [pc, #52]	; (803c8 <Reset_Handler+0x54>)
   80394:	e002      	b.n	8039c <Reset_Handler+0x28>
                *pDest++ = 0;
   80396:	2200      	movs	r2, #0
   80398:	601a      	str	r2, [r3, #0]
   8039a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8039c:	4a0b      	ldr	r2, [pc, #44]	; (803cc <Reset_Handler+0x58>)
   8039e:	4293      	cmp	r3, r2
   803a0:	d3f9      	bcc.n	80396 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803a2:	4b0b      	ldr	r3, [pc, #44]	; (803d0 <Reset_Handler+0x5c>)
   803a4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803ac:	4a09      	ldr	r2, [pc, #36]	; (803d4 <Reset_Handler+0x60>)
   803ae:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803b0:	4b09      	ldr	r3, [pc, #36]	; (803d8 <Reset_Handler+0x64>)
   803b2:	4798      	blx	r3
        main();
   803b4:	4b09      	ldr	r3, [pc, #36]	; (803dc <Reset_Handler+0x68>)
   803b6:	4798      	blx	r3
   803b8:	e7fe      	b.n	803b8 <Reset_Handler+0x44>
   803ba:	bf00      	nop
   803bc:	20000000 	.word	0x20000000
   803c0:	00081470 	.word	0x00081470
   803c4:	20000434 	.word	0x20000434
   803c8:	20000434 	.word	0x20000434
   803cc:	200004e8 	.word	0x200004e8
   803d0:	00080000 	.word	0x00080000
   803d4:	e000ed00 	.word	0xe000ed00
   803d8:	0008127d 	.word	0x0008127d
   803dc:	000806d5 	.word	0x000806d5

000803e0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803e4:	4a20      	ldr	r2, [pc, #128]	; (80468 <SystemInit+0x88>)
   803e6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803ec:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   803ee:	4b1f      	ldr	r3, [pc, #124]	; (8046c <SystemInit+0x8c>)
   803f0:	6a1b      	ldr	r3, [r3, #32]
   803f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803f6:	d107      	bne.n	80408 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   803f8:	4a1d      	ldr	r2, [pc, #116]	; (80470 <SystemInit+0x90>)
   803fa:	4b1c      	ldr	r3, [pc, #112]	; (8046c <SystemInit+0x8c>)
   803fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   803fe:	4b1b      	ldr	r3, [pc, #108]	; (8046c <SystemInit+0x8c>)
   80400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80402:	f013 0f01 	tst.w	r3, #1
   80406:	d0fa      	beq.n	803fe <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80408:	4a1a      	ldr	r2, [pc, #104]	; (80474 <SystemInit+0x94>)
   8040a:	4b18      	ldr	r3, [pc, #96]	; (8046c <SystemInit+0x8c>)
   8040c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8040e:	4b17      	ldr	r3, [pc, #92]	; (8046c <SystemInit+0x8c>)
   80410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80412:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80416:	d0fa      	beq.n	8040e <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80418:	4a14      	ldr	r2, [pc, #80]	; (8046c <SystemInit+0x8c>)
   8041a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8041c:	f023 0303 	bic.w	r3, r3, #3
   80420:	f043 0301 	orr.w	r3, r3, #1
   80424:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80426:	4b11      	ldr	r3, [pc, #68]	; (8046c <SystemInit+0x8c>)
   80428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8042a:	f013 0f08 	tst.w	r3, #8
   8042e:	d0fa      	beq.n	80426 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80430:	4a11      	ldr	r2, [pc, #68]	; (80478 <SystemInit+0x98>)
   80432:	4b0e      	ldr	r3, [pc, #56]	; (8046c <SystemInit+0x8c>)
   80434:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80436:	4b0d      	ldr	r3, [pc, #52]	; (8046c <SystemInit+0x8c>)
   80438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8043a:	f013 0f02 	tst.w	r3, #2
   8043e:	d0fa      	beq.n	80436 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80440:	2211      	movs	r2, #17
   80442:	4b0a      	ldr	r3, [pc, #40]	; (8046c <SystemInit+0x8c>)
   80444:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80446:	4b09      	ldr	r3, [pc, #36]	; (8046c <SystemInit+0x8c>)
   80448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044a:	f013 0f08 	tst.w	r3, #8
   8044e:	d0fa      	beq.n	80446 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80450:	2212      	movs	r2, #18
   80452:	4b06      	ldr	r3, [pc, #24]	; (8046c <SystemInit+0x8c>)
   80454:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80456:	4b05      	ldr	r3, [pc, #20]	; (8046c <SystemInit+0x8c>)
   80458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8045a:	f013 0f08 	tst.w	r3, #8
   8045e:	d0fa      	beq.n	80456 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80460:	4a06      	ldr	r2, [pc, #24]	; (8047c <SystemInit+0x9c>)
   80462:	4b07      	ldr	r3, [pc, #28]	; (80480 <SystemInit+0xa0>)
   80464:	601a      	str	r2, [r3, #0]
   80466:	4770      	bx	lr
   80468:	400e0a00 	.word	0x400e0a00
   8046c:	400e0600 	.word	0x400e0600
   80470:	00370809 	.word	0x00370809
   80474:	01370809 	.word	0x01370809
   80478:	200d3f01 	.word	0x200d3f01
   8047c:	0501bd00 	.word	0x0501bd00
   80480:	20000000 	.word	0x20000000

00080484 <IR_Init>:

void IR_Init() {
	// Turns off write protection
	// ADC->ADC_WPMR &= ~ADC_WPMR_WPEN;
	
	PMC->PMC_PCER1 = (1 << ID_ADC - 32); // PMC_PCER1_PID32;
   80484:	2220      	movs	r2, #32
   80486:	4b05      	ldr	r3, [pc, #20]	; (8049c <IR_Init+0x18>)
   80488:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	ADC->ADC_MR = ADC_MR_FREERUN_ON;
   8048c:	4b04      	ldr	r3, [pc, #16]	; (804a0 <IR_Init+0x1c>)
   8048e:	2280      	movs	r2, #128	; 0x80
   80490:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER = ADC_CHER_CH0;
   80492:	2201      	movs	r2, #1
   80494:	611a      	str	r2, [r3, #16]
	ADC_CR		Control register
	ADC_CDRx	Converted data register
	ADC_LCDR	Last converted data register
	*/
	
	ADC->ADC_CR = ADC_CR_START;
   80496:	2202      	movs	r2, #2
   80498:	601a      	str	r2, [r3, #0]
   8049a:	4770      	bx	lr
   8049c:	400e0600 	.word	0x400e0600
   804a0:	400c0000 	.word	0x400c0000

000804a4 <IR_read>:
}

int IR_read() {
	int IR = ADC->ADC_CDR[0];
   804a4:	4b01      	ldr	r3, [pc, #4]	; (804ac <IR_read+0x8>)
   804a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
	return IR;
   804a8:	4770      	bx	lr
   804aa:	bf00      	nop
   804ac:	400c0000 	.word	0x400c0000

000804b0 <map_int>:





int map_int(int x, int in_min, int in_max, int out_min, int out_max) {
   804b0:	b430      	push	{r4, r5}
   804b2:	9c02      	ldr	r4, [sp, #8]
	int val = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   804b4:	1a45      	subs	r5, r0, r1
   804b6:	1ae0      	subs	r0, r4, r3
   804b8:	fb00 f005 	mul.w	r0, r0, r5
   804bc:	1a52      	subs	r2, r2, r1
   804be:	fb90 f0f2 	sdiv	r0, r0, r2
   804c2:	4418      	add	r0, r3
	
	// Limiting
	if (val > out_max) return out_max;
   804c4:	4284      	cmp	r4, r0
   804c6:	db03      	blt.n	804d0 <map_int+0x20>
	else if (val < out_min) return out_min;
   804c8:	4283      	cmp	r3, r0
   804ca:	dd02      	ble.n	804d2 <map_int+0x22>
   804cc:	4618      	mov	r0, r3
   804ce:	e000      	b.n	804d2 <map_int+0x22>
	if (val > out_max) return out_max;
   804d0:	4620      	mov	r0, r4
	return val;
}
   804d2:	bc30      	pop	{r4, r5}
   804d4:	4770      	bx	lr
	...

000804d8 <CLK_Init>:

void CLK_Init() {
	PMC->PMC_PCER0 = PMC_PCER0_PID27 | (1 << ID_TC3); // ID_TC3 corresponds to Counter 1 channel 0
   804d8:	4b15      	ldr	r3, [pc, #84]	; (80530 <CLK_Init+0x58>)
   804da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
   804de:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCR = PMC_PCR_PID(27) | PMC_PCR_EN;
   804e0:	4a14      	ldr	r2, [pc, #80]	; (80534 <CLK_Init+0x5c>)
   804e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR = PMC_PCR_PID(28) | PMC_PCR_EN;
   804e6:	3201      	adds	r2, #1
   804e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	
	// Clock 0 for solenoid timing and PID updates
	REG_TC0_RC0 = 840000; // 50 Hz (T = 20 ms)
   804ec:	4a12      	ldr	r2, [pc, #72]	; (80538 <CLK_Init+0x60>)
   804ee:	f5a3 23c0 	sub.w	r3, r3, #393216	; 0x60000
   804f2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
   804f6:	601a      	str	r2, [r3, #0]
	REG_TC0_CMR0 = TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVSEL_UP_RC;
   804f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   804fc:	3b18      	subs	r3, #24
   804fe:	601a      	str	r2, [r3, #0]
	
	// Clock 1 for 20 us read delay on encoder
	TC1->TC_CHANNEL[0].TC_RC = 840; // 50 000 Hz (T = 20 us)
   80500:	4b0e      	ldr	r3, [pc, #56]	; (8053c <CLK_Init+0x64>)
   80502:	f44f 7252 	mov.w	r2, #840	; 0x348
   80506:	61da      	str	r2, [r3, #28]
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVSEL_UP  | TC_CMR_CPCSTOP; // | TC_CMR_CPCDIS; // Stop on RC compare
   80508:	2240      	movs	r2, #64	; 0x40
   8050a:	605a      	str	r2, [r3, #4]
	
	REG_TC0_IER0 = TC_IER_CPCS; // Interrupt on C compare
   8050c:	2210      	movs	r2, #16
   8050e:	490c      	ldr	r1, [pc, #48]	; (80540 <CLK_Init+0x68>)
   80510:	600a      	str	r2, [r1, #0]
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS; // Interrupt on C compare
   80512:	625a      	str	r2, [r3, #36]	; 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80514:	4a0b      	ldr	r2, [pc, #44]	; (80544 <CLK_Init+0x6c>)
   80516:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8051a:	6011      	str	r1, [r2, #0]
   8051c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   80520:	6011      	str	r1, [r2, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	NVIC_EnableIRQ(TC3_IRQn);
	
	REG_TC0_CCR0 = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80522:	2105      	movs	r1, #5
   80524:	4a08      	ldr	r2, [pc, #32]	; (80548 <CLK_Init+0x70>)
   80526:	6011      	str	r1, [r2, #0]
	TC1->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN;
   80528:	2201      	movs	r2, #1
   8052a:	601a      	str	r2, [r3, #0]
   8052c:	4770      	bx	lr
   8052e:	bf00      	nop
   80530:	400e0600 	.word	0x400e0600
   80534:	1000001b 	.word	0x1000001b
   80538:	000cd140 	.word	0x000cd140
   8053c:	40084000 	.word	0x40084000
   80540:	40080024 	.word	0x40080024
   80544:	e000e100 	.word	0xe000e100
   80548:	40080000 	.word	0x40080000

0008054c <TC0_Handler>:
	
}

void TC0_Handler() {
   8054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Called every 20 ms to update PI-controller value */
	int k = REG_TC0_SR0 & TC_SR_CPCS;
   8054e:	4b16      	ldr	r3, [pc, #88]	; (805a8 <TC0_Handler+0x5c>)
   80550:	681b      	ldr	r3, [r3, #0]
	int g = REG_TC0_SR1 & TC_SR_CPCS;
   80552:	4b16      	ldr	r3, [pc, #88]	; (805ac <TC0_Handler+0x60>)
   80554:	681b      	ldr	r3, [r3, #0]
	
	pulse_counter += 1;
   80556:	4b16      	ldr	r3, [pc, #88]	; (805b0 <TC0_Handler+0x64>)
   80558:	681a      	ldr	r2, [r3, #0]
   8055a:	3201      	adds	r2, #1
   8055c:	601a      	str	r2, [r3, #0]
	
	int encoder_pos_signed = encoder_pos;
   8055e:	685b      	ldr	r3, [r3, #4]
	if (encoder_pos_signed >= 32768)
   80560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   80564:	db01      	blt.n	8056a <TC0_Handler+0x1e>
		encoder_pos_signed -= 65536;
   80566:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
	
	e = reference_pos - encoder_pos_signed;
   8056a:	4c11      	ldr	r4, [pc, #68]	; (805b0 <TC0_Handler+0x64>)
   8056c:	68a2      	ldr	r2, [r4, #8]
   8056e:	1ad3      	subs	r3, r2, r3
   80570:	60e3      	str	r3, [r4, #12]
	ei += e;
   80572:	68e3      	ldr	r3, [r4, #12]
   80574:	6922      	ldr	r2, [r4, #16]
   80576:	4413      	add	r3, r2
   80578:	6123      	str	r3, [r4, #16]
	u = Kp*e + T*Ki*ei; // Maybe limit values
   8057a:	68e0      	ldr	r0, [r4, #12]
   8057c:	4e0d      	ldr	r6, [pc, #52]	; (805b4 <TC0_Handler+0x68>)
   8057e:	47b0      	blx	r6
   80580:	4d0d      	ldr	r5, [pc, #52]	; (805b8 <TC0_Handler+0x6c>)
   80582:	490e      	ldr	r1, [pc, #56]	; (805bc <TC0_Handler+0x70>)
   80584:	47a8      	blx	r5
   80586:	4607      	mov	r7, r0
   80588:	6920      	ldr	r0, [r4, #16]
   8058a:	47b0      	blx	r6
   8058c:	490c      	ldr	r1, [pc, #48]	; (805c0 <TC0_Handler+0x74>)
   8058e:	47a8      	blx	r5
   80590:	4601      	mov	r1, r0
   80592:	4638      	mov	r0, r7
   80594:	4b0b      	ldr	r3, [pc, #44]	; (805c4 <TC0_Handler+0x78>)
   80596:	4798      	blx	r3
   80598:	4b0b      	ldr	r3, [pc, #44]	; (805c8 <TC0_Handler+0x7c>)
   8059a:	4798      	blx	r3
   8059c:	6160      	str	r0, [r4, #20]
	encoder_update_requested = 1;
   8059e:	2201      	movs	r2, #1
   805a0:	4b0a      	ldr	r3, [pc, #40]	; (805cc <TC0_Handler+0x80>)
   805a2:	701a      	strb	r2, [r3, #0]
   805a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   805a6:	bf00      	nop
   805a8:	40080020 	.word	0x40080020
   805ac:	40080060 	.word	0x40080060
   805b0:	20000450 	.word	0x20000450
   805b4:	00080ee9 	.word	0x00080ee9
   805b8:	00080f91 	.word	0x00080f91
   805bc:	3f333333 	.word	0x3f333333
   805c0:	3b03126f 	.word	0x3b03126f
   805c4:	00080d81 	.word	0x00080d81
   805c8:	00081231 	.word	0x00081231
   805cc:	20000004 	.word	0x20000004

000805d0 <TC3_Handler>:
}

void TC3_Handler() {
	/* Called when TC1 has counted to 840 (20 us) */
	
	int k = TC1->TC_CHANNEL[0].TC_SR;
   805d0:	4b0b      	ldr	r3, [pc, #44]	; (80600 <TC3_Handler+0x30>)
   805d2:	6a1b      	ldr	r3, [r3, #32]
	encoder_flag = 1; // Set to signify that 20 us has passed
   805d4:	4b0b      	ldr	r3, [pc, #44]	; (80604 <TC3_Handler+0x34>)
   805d6:	2201      	movs	r2, #1
   805d8:	761a      	strb	r2, [r3, #24]
	
	// Update next update stage
	if (encoder_stage == START) encoder_stage = FIRST_READ;
   805da:	7e5b      	ldrb	r3, [r3, #25]
   805dc:	b143      	cbz	r3, 805f0 <TC3_Handler+0x20>
	else if (encoder_stage == FIRST_READ) encoder_stage = SECOND_READ;
   805de:	4b09      	ldr	r3, [pc, #36]	; (80604 <TC3_Handler+0x34>)
   805e0:	7e5b      	ldrb	r3, [r3, #25]
   805e2:	b2db      	uxtb	r3, r3
   805e4:	2b01      	cmp	r3, #1
   805e6:	d006      	beq.n	805f6 <TC3_Handler+0x26>
	else encoder_stage = START;
   805e8:	2200      	movs	r2, #0
   805ea:	4b06      	ldr	r3, [pc, #24]	; (80604 <TC3_Handler+0x34>)
   805ec:	765a      	strb	r2, [r3, #25]
   805ee:	4770      	bx	lr
	if (encoder_stage == START) encoder_stage = FIRST_READ;
   805f0:	4b04      	ldr	r3, [pc, #16]	; (80604 <TC3_Handler+0x34>)
   805f2:	765a      	strb	r2, [r3, #25]
   805f4:	4770      	bx	lr
	else if (encoder_stage == FIRST_READ) encoder_stage = SECOND_READ;
   805f6:	2202      	movs	r2, #2
   805f8:	4b02      	ldr	r3, [pc, #8]	; (80604 <TC3_Handler+0x34>)
   805fa:	765a      	strb	r2, [r3, #25]
   805fc:	4770      	bx	lr
   805fe:	bf00      	nop
   80600:	40084000 	.word	0x40084000
   80604:	20000450 	.word	0x20000450

00080608 <Encoder_update>:
	SEL		PIN27	PD2
	NOT_RST	PIN26	PD1
	NOT_OE	PIN25	PD0
	*/

	if (encoder_stage == START && encoder_rts) {
   80608:	4b23      	ldr	r3, [pc, #140]	; (80698 <Encoder_update+0x90>)
   8060a:	7e5b      	ldrb	r3, [r3, #25]
   8060c:	b913      	cbnz	r3, 80614 <Encoder_update+0xc>
   8060e:	4b23      	ldr	r3, [pc, #140]	; (8069c <Encoder_update+0x94>)
   80610:	785b      	ldrb	r3, [r3, #1]
   80612:	b953      	cbnz	r3, 8062a <Encoder_update+0x22>
		encoder_flag = 0;
		PIOD->PIO_CODR = NOT_OE; // Set !OE low
		PIOD->PIO_CODR = SEL;	 // Set SEL low to output high byte
		TC1->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
	}
	else if (encoder_stage == FIRST_READ && encoder_flag) {
   80614:	4b20      	ldr	r3, [pc, #128]	; (80698 <Encoder_update+0x90>)
   80616:	7e5b      	ldrb	r3, [r3, #25]
   80618:	b2db      	uxtb	r3, r3
   8061a:	2b01      	cmp	r3, #1
   8061c:	d012      	beq.n	80644 <Encoder_update+0x3c>
		int MJ2 = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
		encoder_temp = (MJ2 << 8);
		PIOD->PIO_SODR = SEL;	// Set SEL high to output low byte
		TC1->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
	}
	else if (encoder_stage == SECOND_READ && encoder_flag) {
   8061e:	4b1e      	ldr	r3, [pc, #120]	; (80698 <Encoder_update+0x90>)
   80620:	7e5b      	ldrb	r3, [r3, #25]
   80622:	b2db      	uxtb	r3, r3
   80624:	2b02      	cmp	r3, #2
   80626:	d020      	beq.n	8066a <Encoder_update+0x62>
		encoder_pos = encoder_temp | MJ2;
		encoder_rts = 1;
		encoder_stage = START;
	}
	
} 
   80628:	4770      	bx	lr
		encoder_rts = 0;
   8062a:	2300      	movs	r3, #0
   8062c:	4a1b      	ldr	r2, [pc, #108]	; (8069c <Encoder_update+0x94>)
   8062e:	7053      	strb	r3, [r2, #1]
		encoder_flag = 0;
   80630:	4a19      	ldr	r2, [pc, #100]	; (80698 <Encoder_update+0x90>)
   80632:	7613      	strb	r3, [r2, #24]
		PIOD->PIO_CODR = NOT_OE; // Set !OE low
   80634:	4a1a      	ldr	r2, [pc, #104]	; (806a0 <Encoder_update+0x98>)
   80636:	2301      	movs	r3, #1
   80638:	6353      	str	r3, [r2, #52]	; 0x34
		PIOD->PIO_CODR = SEL;	 // Set SEL low to output high byte
   8063a:	2304      	movs	r3, #4
   8063c:	6353      	str	r3, [r2, #52]	; 0x34
		TC1->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
   8063e:	4a19      	ldr	r2, [pc, #100]	; (806a4 <Encoder_update+0x9c>)
   80640:	6013      	str	r3, [r2, #0]
   80642:	4770      	bx	lr
	else if (encoder_stage == FIRST_READ && encoder_flag) {
   80644:	4b14      	ldr	r3, [pc, #80]	; (80698 <Encoder_update+0x90>)
   80646:	7e1b      	ldrb	r3, [r3, #24]
   80648:	2b00      	cmp	r3, #0
   8064a:	d0e8      	beq.n	8061e <Encoder_update+0x16>
		encoder_flag = 0;
   8064c:	4a12      	ldr	r2, [pc, #72]	; (80698 <Encoder_update+0x90>)
   8064e:	2300      	movs	r3, #0
   80650:	7613      	strb	r3, [r2, #24]
		int MJ2 = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   80652:	4b15      	ldr	r3, [pc, #84]	; (806a8 <Encoder_update+0xa0>)
   80654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80656:	085b      	lsrs	r3, r3, #1
		encoder_temp = (MJ2 << 8);
   80658:	021b      	lsls	r3, r3, #8
   8065a:	b29b      	uxth	r3, r3
   8065c:	61d3      	str	r3, [r2, #28]
		PIOD->PIO_SODR = SEL;	// Set SEL high to output low byte
   8065e:	2304      	movs	r3, #4
   80660:	4a0f      	ldr	r2, [pc, #60]	; (806a0 <Encoder_update+0x98>)
   80662:	6313      	str	r3, [r2, #48]	; 0x30
		TC1->TC_CHANNEL[0].TC_CCR = TC_CCR_SWTRG;
   80664:	4a0f      	ldr	r2, [pc, #60]	; (806a4 <Encoder_update+0x9c>)
   80666:	6013      	str	r3, [r2, #0]
	else if (encoder_stage == FIRST_READ && encoder_flag) {
   80668:	4770      	bx	lr
	else if (encoder_stage == SECOND_READ && encoder_flag) {
   8066a:	4b0b      	ldr	r3, [pc, #44]	; (80698 <Encoder_update+0x90>)
   8066c:	7e1b      	ldrb	r3, [r3, #24]
   8066e:	2b00      	cmp	r3, #0
   80670:	d0da      	beq.n	80628 <Encoder_update+0x20>
void Encoder_update() {
   80672:	b410      	push	{r4}
		encoder_flag = 0;
   80674:	4a08      	ldr	r2, [pc, #32]	; (80698 <Encoder_update+0x90>)
   80676:	2100      	movs	r1, #0
   80678:	7611      	strb	r1, [r2, #24]
		int MJ2 = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   8067a:	4b0b      	ldr	r3, [pc, #44]	; (806a8 <Encoder_update+0xa0>)
   8067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8067e:	f3c3 0347 	ubfx	r3, r3, #1, #8
		PIOD->PIO_SODR = NOT_OE; // Set !OE high
   80682:	2001      	movs	r0, #1
   80684:	4c06      	ldr	r4, [pc, #24]	; (806a0 <Encoder_update+0x98>)
   80686:	6320      	str	r0, [r4, #48]	; 0x30
		encoder_pos = encoder_temp | MJ2;
   80688:	69d4      	ldr	r4, [r2, #28]
   8068a:	4323      	orrs	r3, r4
   8068c:	6053      	str	r3, [r2, #4]
		encoder_rts = 1;
   8068e:	4b03      	ldr	r3, [pc, #12]	; (8069c <Encoder_update+0x94>)
   80690:	7058      	strb	r0, [r3, #1]
		encoder_stage = START;
   80692:	7651      	strb	r1, [r2, #25]
} 
   80694:	bc10      	pop	{r4}
   80696:	e7c7      	b.n	80628 <Encoder_update+0x20>
   80698:	20000450 	.word	0x20000450
   8069c:	20000004 	.word	0x20000004
   806a0:	400e1400 	.word	0x400e1400
   806a4:	40084000 	.word	0x40084000
   806a8:	400e1200 	.word	0x400e1200

000806ac <Encoder_reset>:

void Encoder_reset() {
	/* Resets encoder position */
	int prev_pulse = pulse_counter;
   806ac:	4b07      	ldr	r3, [pc, #28]	; (806cc <Encoder_reset+0x20>)
   806ae:	681a      	ldr	r2, [r3, #0]
	PIOD->PIO_CODR = NOT_RST;
   806b0:	2102      	movs	r1, #2
   806b2:	4b07      	ldr	r3, [pc, #28]	; (806d0 <Encoder_reset+0x24>)
   806b4:	6359      	str	r1, [r3, #52]	; 0x34
	while (pulse_counter == prev_pulse);
   806b6:	4b05      	ldr	r3, [pc, #20]	; (806cc <Encoder_reset+0x20>)
   806b8:	681b      	ldr	r3, [r3, #0]
   806ba:	429a      	cmp	r2, r3
   806bc:	d0fb      	beq.n	806b6 <Encoder_reset+0xa>
	PIOD->PIO_SODR = NOT_RST;
   806be:	2202      	movs	r2, #2
   806c0:	4b03      	ldr	r3, [pc, #12]	; (806d0 <Encoder_reset+0x24>)
   806c2:	631a      	str	r2, [r3, #48]	; 0x30
	
	// Reset the error integral
	ei = 0;
   806c4:	2200      	movs	r2, #0
   806c6:	4b01      	ldr	r3, [pc, #4]	; (806cc <Encoder_reset+0x20>)
   806c8:	611a      	str	r2, [r3, #16]
   806ca:	4770      	bx	lr
   806cc:	20000450 	.word	0x20000450
   806d0:	400e1400 	.word	0x400e1400

000806d4 <main>:
{
   806d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   806d8:	b0e6      	sub	sp, #408	; 0x198
	WDT->WDT_MR = WDT_MR_WDDIS; // Turns off watchdog
   806da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806de:	4b71      	ldr	r3, [pc, #452]	; (808a4 <main+0x1d0>)
   806e0:	605a      	str	r2, [r3, #4]
    SystemInit();
   806e2:	4b71      	ldr	r3, [pc, #452]	; (808a8 <main+0x1d4>)
   806e4:	4798      	blx	r3
	configure_uart();
   806e6:	4b71      	ldr	r3, [pc, #452]	; (808ac <main+0x1d8>)
   806e8:	4798      	blx	r3
	PWM_Init();
   806ea:	4b71      	ldr	r3, [pc, #452]	; (808b0 <main+0x1dc>)
   806ec:	4798      	blx	r3
	IR_Init();
   806ee:	4b71      	ldr	r3, [pc, #452]	; (808b4 <main+0x1e0>)
   806f0:	4798      	blx	r3
	DAC_Init();
   806f2:	4b71      	ldr	r3, [pc, #452]	; (808b8 <main+0x1e4>)
   806f4:	4798      	blx	r3
	CLK_Init();
   806f6:	4b71      	ldr	r3, [pc, #452]	; (808bc <main+0x1e8>)
   806f8:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   806fa:	4871      	ldr	r0, [pc, #452]	; (808c0 <main+0x1ec>)
   806fc:	4b71      	ldr	r3, [pc, #452]	; (808c4 <main+0x1f0>)
   806fe:	4798      	blx	r3
	PIOC->PIO_PER = PIO_PER_P12;
   80700:	4b71      	ldr	r3, [pc, #452]	; (808c8 <main+0x1f4>)
   80702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80706:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER = PIO_OER_P12;
   80708:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR = (0xFF << 1);
   8070a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8070e:	615a      	str	r2, [r3, #20]
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   80710:	4a6e      	ldr	r2, [pc, #440]	; (808cc <main+0x1f8>)
   80712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80716:	6113      	str	r3, [r2, #16]
	PMC->PMC_PCR |= PMC_PCR_PID(13) | PMC_PCR_EN;
   80718:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   8071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80720:	f043 030d 	orr.w	r3, r3, #13
   80724:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PIOD->PIO_PER = PIO_PER_P10 | PIO_PER_P9 | PIO_PER_P2 | PIO_PER_P1 | PIO_PER_P0;
   80728:	4b69      	ldr	r3, [pc, #420]	; (808d0 <main+0x1fc>)
   8072a:	f240 6207 	movw	r2, #1543	; 0x607
   8072e:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER = PIO_OER_P10 | PIO_OER_P9 | PIO_OER_P2 | PIO_OER_P1 | PIO_OER_P0;
   80730:	611a      	str	r2, [r3, #16]
	PIOD->PIO_SODR = DIR | EN | NOT_RST;
   80732:	f240 6202 	movw	r2, #1538	; 0x602
   80736:	631a      	str	r2, [r3, #48]	; 0x30
	int prev_button_left = 0;
   80738:	2700      	movs	r7, #0
	int prev_button_right = 0;
   8073a:	46b8      	mov	r8, r7
	int score_status = 0;
   8073c:	46b9      	mov	r9, r7
   8073e:	e08f      	b.n	80860 <main+0x18c>
			x[i] = x[i-1];
   80740:	1e5a      	subs	r2, r3, #1
   80742:	a966      	add	r1, sp, #408	; 0x198
   80744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   80748:	f851 0cc8 	ldr.w	r0, [r1, #-200]
   8074c:	a966      	add	r1, sp, #408	; 0x198
   8074e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   80752:	f841 0cc8 	str.w	r0, [r1, #-200]
			IR[i] = IR[i-1];
   80756:	a902      	add	r1, sp, #8
   80758:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   8075c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		for (int i = filter_samples - 1; i > 0; i--) {
   80760:	4613      	mov	r3, r2
   80762:	2b00      	cmp	r3, #0
   80764:	dcec      	bgt.n	80740 <main+0x6c>
   80766:	2200      	movs	r2, #0
   80768:	4614      	mov	r4, r2
   8076a:	4610      	mov	r0, r2
   8076c:	e010      	b.n	80790 <main+0xbc>
			filtered_x += x[i];
   8076e:	ab66      	add	r3, sp, #408	; 0x198
   80770:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80774:	f853 3cc8 	ldr.w	r3, [r3, #-200]
   80778:	4418      	add	r0, r3
			filtered_IR += IR[i]/filter_samples;
   8077a:	ab02      	add	r3, sp, #8
   8077c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80780:	4954      	ldr	r1, [pc, #336]	; (808d4 <main+0x200>)
   80782:	fb81 e103 	smull	lr, r1, r1, r3
   80786:	17db      	asrs	r3, r3, #31
   80788:	ebc3 1321 	rsb	r3, r3, r1, asr #4
   8078c:	441c      	add	r4, r3
		for (int i = 0; i < filter_samples; i++) {
   8078e:	3201      	adds	r2, #1
   80790:	2a31      	cmp	r2, #49	; 0x31
   80792:	ddec      	ble.n	8076e <main+0x9a>
		filtered_x /= filter_samples;
   80794:	4b4f      	ldr	r3, [pc, #316]	; (808d4 <main+0x200>)
   80796:	fb83 2300 	smull	r2, r3, r3, r0
   8079a:	17c0      	asrs	r0, r0, #31
   8079c:	ebc0 1023 	rsb	r0, r0, r3, asr #4
		if (filtered_x < x_offset) 
   807a0:	2831      	cmp	r0, #49	; 0x31
   807a2:	dc68      	bgt.n	80876 <main+0x1a2>
			remapped_filtered_x = map_int(filtered_x, -100, x_offset, -100, 0);
   807a4:	2300      	movs	r3, #0
   807a6:	9300      	str	r3, [sp, #0]
   807a8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   807ac:	2232      	movs	r2, #50	; 0x32
   807ae:	4619      	mov	r1, r3
   807b0:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808e0 <main+0x20c>
   807b4:	47d0      	blx	sl
   807b6:	4682      	mov	sl, r0
		PWM_pos(remapped_filtered_x);
   807b8:	4650      	mov	r0, sl
   807ba:	4b47      	ldr	r3, [pc, #284]	; (808d8 <main+0x204>)
   807bc:	4798      	blx	r3
		if (filtered_IR < 2000 && !score_status) {
   807be:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   807c2:	da04      	bge.n	807ce <main+0xfa>
   807c4:	f1b9 0f00 	cmp.w	r9, #0
   807c8:	d101      	bne.n	807ce <main+0xfa>
			score_status = 1;
   807ca:	f04f 0901 	mov.w	r9, #1
		if (score_status && button_right) {
   807ce:	f1b9 0f00 	cmp.w	r9, #0
   807d2:	d002      	beq.n	807da <main+0x106>
   807d4:	b10d      	cbz	r5, 807da <main+0x106>
			score_status = 0;
   807d6:	f04f 0900 	mov.w	r9, #0
		reference_pos = map_int(-remapped_filtered_x, -100, 100, -5000, 5000);; //map_int(remapped_filtered_x, -100, 100, -32768, 32767);
   807da:	f241 3388 	movw	r3, #5000	; 0x1388
   807de:	9300      	str	r3, [sp, #0]
   807e0:	4b3e      	ldr	r3, [pc, #248]	; (808dc <main+0x208>)
   807e2:	2264      	movs	r2, #100	; 0x64
   807e4:	f06f 0163 	mvn.w	r1, #99	; 0x63
   807e8:	f1ca 0000 	rsb	r0, sl, #0
   807ec:	4c3c      	ldr	r4, [pc, #240]	; (808e0 <main+0x20c>)
   807ee:	47a0      	blx	r4
   807f0:	4b3c      	ldr	r3, [pc, #240]	; (808e4 <main+0x210>)
   807f2:	6098      	str	r0, [r3, #8]
		if (u > 0) {
   807f4:	695b      	ldr	r3, [r3, #20]
   807f6:	2b00      	cmp	r3, #0
   807f8:	dd46      	ble.n	80888 <main+0x1b4>
			PIOD->PIO_CODR = DIR;
   807fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   807fe:	4b34      	ldr	r3, [pc, #208]	; (808d0 <main+0x1fc>)
   80800:	635a      	str	r2, [r3, #52]	; 0x34
		DAC_write(abs(u));
   80802:	4c38      	ldr	r4, [pc, #224]	; (808e4 <main+0x210>)
   80804:	6960      	ldr	r0, [r4, #20]
   80806:	2800      	cmp	r0, #0
   80808:	bfb8      	it	lt
   8080a:	4240      	neglt	r0, r0
   8080c:	4b36      	ldr	r3, [pc, #216]	; (808e8 <main+0x214>)
   8080e:	4798      	blx	r3
		printf("%d\n\r", u);
   80810:	6961      	ldr	r1, [r4, #20]
   80812:	4836      	ldr	r0, [pc, #216]	; (808ec <main+0x218>)
   80814:	4b36      	ldr	r3, [pc, #216]	; (808f0 <main+0x21c>)
   80816:	4798      	blx	r3
		if (!prev_button_left && button_left) {
   80818:	b90f      	cbnz	r7, 8081e <main+0x14a>
   8081a:	2e00      	cmp	r6, #0
   8081c:	d139      	bne.n	80892 <main+0x1be>
		if (!prev_button_right && button_right) {
   8081e:	f1b8 0f00 	cmp.w	r8, #0
   80822:	d107      	bne.n	80834 <main+0x160>
   80824:	b135      	cbz	r5, 80834 <main+0x160>
			PIOC->PIO_CODR = PIO_SODR_P12; // PIN51 on Due
   80826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8082a:	4b27      	ldr	r3, [pc, #156]	; (808c8 <main+0x1f4>)
   8082c:	635a      	str	r2, [r3, #52]	; 0x34
			pulse_counter = 0;
   8082e:	2200      	movs	r2, #0
   80830:	4b2c      	ldr	r3, [pc, #176]	; (808e4 <main+0x210>)
   80832:	601a      	str	r2, [r3, #0]
		if (pulse_counter > 10) {
   80834:	4b2b      	ldr	r3, [pc, #172]	; (808e4 <main+0x210>)
   80836:	681b      	ldr	r3, [r3, #0]
   80838:	2b0a      	cmp	r3, #10
   8083a:	dd03      	ble.n	80844 <main+0x170>
			PIOC->PIO_SODR = PIO_CODR_P12;
   8083c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80840:	4b21      	ldr	r3, [pc, #132]	; (808c8 <main+0x1f4>)
   80842:	631a      	str	r2, [r3, #48]	; 0x30
		if (pulse_counter > 60000) // In case of overflow
   80844:	4b27      	ldr	r3, [pc, #156]	; (808e4 <main+0x210>)
   80846:	681a      	ldr	r2, [r3, #0]
   80848:	f64e 2360 	movw	r3, #60000	; 0xea60
   8084c:	429a      	cmp	r2, r3
   8084e:	dd02      	ble.n	80856 <main+0x182>
			pulse_counter = 100;
   80850:	2264      	movs	r2, #100	; 0x64
   80852:	4b24      	ldr	r3, [pc, #144]	; (808e4 <main+0x210>)
   80854:	601a      	str	r2, [r3, #0]
		if (encoder_update_requested) {
   80856:	4b27      	ldr	r3, [pc, #156]	; (808f4 <main+0x220>)
   80858:	781b      	ldrb	r3, [r3, #0]
   8085a:	b9eb      	cbnz	r3, 80898 <main+0x1c4>
{
   8085c:	4637      	mov	r7, r6
   8085e:	46a8      	mov	r8, r5
		x[0] = message.data[0]-100;
   80860:	4b25      	ldr	r3, [pc, #148]	; (808f8 <main+0x224>)
   80862:	78da      	ldrb	r2, [r3, #3]
   80864:	3a64      	subs	r2, #100	; 0x64
   80866:	9234      	str	r2, [sp, #208]	; 0xd0
		int button_left = message.data[4];
   80868:	79de      	ldrb	r6, [r3, #7]
		int button_right = message.data[5];
   8086a:	7a1d      	ldrb	r5, [r3, #8]
		IR[0] = IR_read();
   8086c:	4b23      	ldr	r3, [pc, #140]	; (808fc <main+0x228>)
   8086e:	4798      	blx	r3
   80870:	9002      	str	r0, [sp, #8]
		for (int i = filter_samples - 1; i > 0; i--) {
   80872:	2331      	movs	r3, #49	; 0x31
   80874:	e775      	b.n	80762 <main+0x8e>
			remapped_filtered_x = map_int(filtered_x, x_offset, 100, 0, 100);
   80876:	2264      	movs	r2, #100	; 0x64
   80878:	9200      	str	r2, [sp, #0]
   8087a:	2300      	movs	r3, #0
   8087c:	2132      	movs	r1, #50	; 0x32
   8087e:	f8df a060 	ldr.w	sl, [pc, #96]	; 808e0 <main+0x20c>
   80882:	47d0      	blx	sl
   80884:	4682      	mov	sl, r0
   80886:	e797      	b.n	807b8 <main+0xe4>
			PIOD->PIO_SODR = DIR;
   80888:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8088c:	4b10      	ldr	r3, [pc, #64]	; (808d0 <main+0x1fc>)
   8088e:	631a      	str	r2, [r3, #48]	; 0x30
   80890:	e7b7      	b.n	80802 <main+0x12e>
			Encoder_reset();
   80892:	4b1b      	ldr	r3, [pc, #108]	; (80900 <main+0x22c>)
   80894:	4798      	blx	r3
   80896:	e7c2      	b.n	8081e <main+0x14a>
			encoder_update_requested = 0;
   80898:	2200      	movs	r2, #0
   8089a:	4b16      	ldr	r3, [pc, #88]	; (808f4 <main+0x220>)
   8089c:	701a      	strb	r2, [r3, #0]
			Encoder_update();
   8089e:	4b19      	ldr	r3, [pc, #100]	; (80904 <main+0x230>)
   808a0:	4798      	blx	r3
   808a2:	e7db      	b.n	8085c <main+0x188>
   808a4:	400e1a50 	.word	0x400e1a50
   808a8:	000803e1 	.word	0x000803e1
   808ac:	00080c81 	.word	0x00080c81
   808b0:	00080bed 	.word	0x00080bed
   808b4:	00080485 	.word	0x00080485
   808b8:	00080349 	.word	0x00080349
   808bc:	000804d9 	.word	0x000804d9
   808c0:	003f3777 	.word	0x003f3777
   808c4:	00080245 	.word	0x00080245
   808c8:	400e1200 	.word	0x400e1200
   808cc:	400e0600 	.word	0x400e0600
   808d0:	400e1400 	.word	0x400e1400
   808d4:	51eb851f 	.word	0x51eb851f
   808d8:	00080c61 	.word	0x00080c61
   808dc:	ffffec78 	.word	0xffffec78
   808e0:	000804b1 	.word	0x000804b1
   808e4:	20000450 	.word	0x20000450
   808e8:	00080365 	.word	0x00080365
   808ec:	00081418 	.word	0x00081418
   808f0:	00080b99 	.word	0x00080b99
   808f4:	20000004 	.word	0x20000004
   808f8:	20000474 	.word	0x20000474
   808fc:	000804a5 	.word	0x000804a5
   80900:	000806ad 	.word	0x000806ad
   80904:	00080609 	.word	0x00080609

00080908 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80908:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8090a:	b2c8      	uxtb	r0, r1
   8090c:	4b01      	ldr	r3, [pc, #4]	; (80914 <printchar+0xc>)
   8090e:	4798      	blx	r3
   80910:	bd08      	pop	{r3, pc}
   80912:	bf00      	nop
   80914:	00080ce9 	.word	0x00080ce9

00080918 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8091c:	4607      	mov	r7, r0
   8091e:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80920:	1e15      	subs	r5, r2, #0
   80922:	dd02      	ble.n	8092a <prints+0x12>
   80924:	460a      	mov	r2, r1
   80926:	2100      	movs	r1, #0
   80928:	e004      	b.n	80934 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8092a:	f04f 0820 	mov.w	r8, #32
   8092e:	e00e      	b.n	8094e <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80930:	3101      	adds	r1, #1
   80932:	3201      	adds	r2, #1
   80934:	7810      	ldrb	r0, [r2, #0]
   80936:	2800      	cmp	r0, #0
   80938:	d1fa      	bne.n	80930 <prints+0x18>
		if (len >= width) width = 0;
   8093a:	42a9      	cmp	r1, r5
   8093c:	da01      	bge.n	80942 <prints+0x2a>
		else width -= len;
   8093e:	1a6d      	subs	r5, r5, r1
   80940:	e000      	b.n	80944 <prints+0x2c>
		if (len >= width) width = 0;
   80942:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80944:	f013 0f02 	tst.w	r3, #2
   80948:	d106      	bne.n	80958 <prints+0x40>
	register int pc = 0, padchar = ' ';
   8094a:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8094e:	f013 0401 	ands.w	r4, r3, #1
   80952:	d00a      	beq.n	8096a <prints+0x52>
	register int pc = 0, padchar = ' ';
   80954:	2400      	movs	r4, #0
   80956:	e010      	b.n	8097a <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80958:	f04f 0830 	mov.w	r8, #48	; 0x30
   8095c:	e7f7      	b.n	8094e <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8095e:	4641      	mov	r1, r8
   80960:	4638      	mov	r0, r7
   80962:	4b0d      	ldr	r3, [pc, #52]	; (80998 <prints+0x80>)
   80964:	4798      	blx	r3
			++pc;
   80966:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80968:	3d01      	subs	r5, #1
   8096a:	2d00      	cmp	r5, #0
   8096c:	dcf7      	bgt.n	8095e <prints+0x46>
   8096e:	e004      	b.n	8097a <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80970:	4638      	mov	r0, r7
   80972:	4b09      	ldr	r3, [pc, #36]	; (80998 <prints+0x80>)
   80974:	4798      	blx	r3
		++pc;
   80976:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80978:	3601      	adds	r6, #1
   8097a:	7831      	ldrb	r1, [r6, #0]
   8097c:	2900      	cmp	r1, #0
   8097e:	d1f7      	bne.n	80970 <prints+0x58>
   80980:	e005      	b.n	8098e <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80982:	4641      	mov	r1, r8
   80984:	4638      	mov	r0, r7
   80986:	4b04      	ldr	r3, [pc, #16]	; (80998 <prints+0x80>)
   80988:	4798      	blx	r3
		++pc;
   8098a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   8098c:	3d01      	subs	r5, #1
   8098e:	2d00      	cmp	r5, #0
   80990:	dcf7      	bgt.n	80982 <prints+0x6a>
	}

	return pc;
}
   80992:	4620      	mov	r0, r4
   80994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80998:	00080909 	.word	0x00080909

0008099c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   8099c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8099e:	b085      	sub	sp, #20
   809a0:	4607      	mov	r7, r0
   809a2:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   809a4:	b151      	cbz	r1, 809bc <printi+0x20>
   809a6:	461e      	mov	r6, r3
   809a8:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   809aa:	b113      	cbz	r3, 809b2 <printi+0x16>
   809ac:	2a0a      	cmp	r2, #10
   809ae:	d012      	beq.n	809d6 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   809b0:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   809b2:	ad04      	add	r5, sp, #16
   809b4:	2300      	movs	r3, #0
   809b6:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   809ba:	e018      	b.n	809ee <printi+0x52>
		print_buf[0] = '0';
   809bc:	2330      	movs	r3, #48	; 0x30
   809be:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   809c2:	2300      	movs	r3, #0
   809c4:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   809c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809cc:	a901      	add	r1, sp, #4
   809ce:	4638      	mov	r0, r7
   809d0:	4c1b      	ldr	r4, [pc, #108]	; (80a40 <printi+0xa4>)
   809d2:	47a0      	blx	r4
   809d4:	e029      	b.n	80a2a <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   809d6:	2900      	cmp	r1, #0
   809d8:	db01      	blt.n	809de <printi+0x42>
	register int t, neg = 0, pc = 0;
   809da:	2600      	movs	r6, #0
   809dc:	e7e9      	b.n	809b2 <printi+0x16>
		u = -i;
   809de:	424c      	negs	r4, r1
		neg = 1;
   809e0:	2601      	movs	r6, #1
   809e2:	e7e6      	b.n	809b2 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   809e4:	3330      	adds	r3, #48	; 0x30
   809e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   809ea:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   809ee:	b14c      	cbz	r4, 80a04 <printi+0x68>
		t = u % b;
   809f0:	fbb4 f3f2 	udiv	r3, r4, r2
   809f4:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   809f8:	2b09      	cmp	r3, #9
   809fa:	ddf3      	ble.n	809e4 <printi+0x48>
			t += letbase - '0' - 10;
   809fc:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80a00:	440b      	add	r3, r1
   80a02:	e7ef      	b.n	809e4 <printi+0x48>
	}

	if (neg) {
   80a04:	b156      	cbz	r6, 80a1c <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a08:	b11b      	cbz	r3, 80a12 <printi+0x76>
   80a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a0c:	f013 0f02 	tst.w	r3, #2
   80a10:	d10d      	bne.n	80a2e <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a12:	232d      	movs	r3, #45	; 0x2d
   80a14:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a18:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a1a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a20:	4629      	mov	r1, r5
   80a22:	4638      	mov	r0, r7
   80a24:	4c06      	ldr	r4, [pc, #24]	; (80a40 <printi+0xa4>)
   80a26:	47a0      	blx	r4
   80a28:	4430      	add	r0, r6
}
   80a2a:	b005      	add	sp, #20
   80a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80a2e:	212d      	movs	r1, #45	; 0x2d
   80a30:	4638      	mov	r0, r7
   80a32:	4b04      	ldr	r3, [pc, #16]	; (80a44 <printi+0xa8>)
   80a34:	4798      	blx	r3
			--width;
   80a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a38:	3b01      	subs	r3, #1
   80a3a:	930a      	str	r3, [sp, #40]	; 0x28
   80a3c:	e7ee      	b.n	80a1c <printi+0x80>
   80a3e:	bf00      	nop
   80a40:	00080919 	.word	0x00080919
   80a44:	00080909 	.word	0x00080909

00080a48 <print>:

static int print( char **out, const char *format, va_list args )
{
   80a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a4a:	b089      	sub	sp, #36	; 0x24
   80a4c:	4606      	mov	r6, r0
   80a4e:	460c      	mov	r4, r1
   80a50:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80a52:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80a54:	e081      	b.n	80b5a <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80a56:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80a58:	2301      	movs	r3, #1
   80a5a:	e08b      	b.n	80b74 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80a5c:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80a5e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80a62:	7822      	ldrb	r2, [r4, #0]
   80a64:	2a30      	cmp	r2, #48	; 0x30
   80a66:	d0f9      	beq.n	80a5c <print+0x14>
   80a68:	2200      	movs	r2, #0
   80a6a:	e006      	b.n	80a7a <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80a6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a70:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80a72:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80a76:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80a78:	3401      	adds	r4, #1
   80a7a:	7821      	ldrb	r1, [r4, #0]
   80a7c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80a80:	b2c0      	uxtb	r0, r0
   80a82:	2809      	cmp	r0, #9
   80a84:	d9f2      	bls.n	80a6c <print+0x24>
			}
			if( *format == 's' ) {
   80a86:	2973      	cmp	r1, #115	; 0x73
   80a88:	d018      	beq.n	80abc <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80a8a:	2964      	cmp	r1, #100	; 0x64
   80a8c:	d022      	beq.n	80ad4 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80a8e:	2978      	cmp	r1, #120	; 0x78
   80a90:	d02f      	beq.n	80af2 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80a92:	2958      	cmp	r1, #88	; 0x58
   80a94:	d03c      	beq.n	80b10 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80a96:	2975      	cmp	r1, #117	; 0x75
   80a98:	d049      	beq.n	80b2e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80a9a:	2963      	cmp	r1, #99	; 0x63
   80a9c:	d15c      	bne.n	80b58 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80a9e:	9905      	ldr	r1, [sp, #20]
   80aa0:	1d08      	adds	r0, r1, #4
   80aa2:	9005      	str	r0, [sp, #20]
   80aa4:	7809      	ldrb	r1, [r1, #0]
   80aa6:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80aaa:	2100      	movs	r1, #0
   80aac:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80ab0:	a907      	add	r1, sp, #28
   80ab2:	4630      	mov	r0, r6
   80ab4:	4f34      	ldr	r7, [pc, #208]	; (80b88 <print+0x140>)
   80ab6:	47b8      	blx	r7
   80ab8:	4405      	add	r5, r0
				continue;
   80aba:	e04d      	b.n	80b58 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80abc:	9905      	ldr	r1, [sp, #20]
   80abe:	1d08      	adds	r0, r1, #4
   80ac0:	9005      	str	r0, [sp, #20]
   80ac2:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80ac4:	b121      	cbz	r1, 80ad0 <print+0x88>
   80ac6:	4630      	mov	r0, r6
   80ac8:	4f2f      	ldr	r7, [pc, #188]	; (80b88 <print+0x140>)
   80aca:	47b8      	blx	r7
   80acc:	4405      	add	r5, r0
				continue;
   80ace:	e043      	b.n	80b58 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80ad0:	492e      	ldr	r1, [pc, #184]	; (80b8c <print+0x144>)
   80ad2:	e7f8      	b.n	80ac6 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80ad4:	9905      	ldr	r1, [sp, #20]
   80ad6:	1d08      	adds	r0, r1, #4
   80ad8:	9005      	str	r0, [sp, #20]
   80ada:	6809      	ldr	r1, [r1, #0]
   80adc:	2061      	movs	r0, #97	; 0x61
   80ade:	9002      	str	r0, [sp, #8]
   80ae0:	9301      	str	r3, [sp, #4]
   80ae2:	9200      	str	r2, [sp, #0]
   80ae4:	2301      	movs	r3, #1
   80ae6:	220a      	movs	r2, #10
   80ae8:	4630      	mov	r0, r6
   80aea:	4f29      	ldr	r7, [pc, #164]	; (80b90 <print+0x148>)
   80aec:	47b8      	blx	r7
   80aee:	4405      	add	r5, r0
				continue;
   80af0:	e032      	b.n	80b58 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80af2:	9905      	ldr	r1, [sp, #20]
   80af4:	1d08      	adds	r0, r1, #4
   80af6:	9005      	str	r0, [sp, #20]
   80af8:	6809      	ldr	r1, [r1, #0]
   80afa:	2061      	movs	r0, #97	; 0x61
   80afc:	9002      	str	r0, [sp, #8]
   80afe:	9301      	str	r3, [sp, #4]
   80b00:	9200      	str	r2, [sp, #0]
   80b02:	2300      	movs	r3, #0
   80b04:	2210      	movs	r2, #16
   80b06:	4630      	mov	r0, r6
   80b08:	4f21      	ldr	r7, [pc, #132]	; (80b90 <print+0x148>)
   80b0a:	47b8      	blx	r7
   80b0c:	4405      	add	r5, r0
				continue;
   80b0e:	e023      	b.n	80b58 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b10:	9905      	ldr	r1, [sp, #20]
   80b12:	1d08      	adds	r0, r1, #4
   80b14:	9005      	str	r0, [sp, #20]
   80b16:	6809      	ldr	r1, [r1, #0]
   80b18:	2041      	movs	r0, #65	; 0x41
   80b1a:	9002      	str	r0, [sp, #8]
   80b1c:	9301      	str	r3, [sp, #4]
   80b1e:	9200      	str	r2, [sp, #0]
   80b20:	2300      	movs	r3, #0
   80b22:	2210      	movs	r2, #16
   80b24:	4630      	mov	r0, r6
   80b26:	4f1a      	ldr	r7, [pc, #104]	; (80b90 <print+0x148>)
   80b28:	47b8      	blx	r7
   80b2a:	4405      	add	r5, r0
				continue;
   80b2c:	e014      	b.n	80b58 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b2e:	9905      	ldr	r1, [sp, #20]
   80b30:	1d08      	adds	r0, r1, #4
   80b32:	9005      	str	r0, [sp, #20]
   80b34:	6809      	ldr	r1, [r1, #0]
   80b36:	2061      	movs	r0, #97	; 0x61
   80b38:	9002      	str	r0, [sp, #8]
   80b3a:	9301      	str	r3, [sp, #4]
   80b3c:	9200      	str	r2, [sp, #0]
   80b3e:	2300      	movs	r3, #0
   80b40:	220a      	movs	r2, #10
   80b42:	4630      	mov	r0, r6
   80b44:	4f12      	ldr	r7, [pc, #72]	; (80b90 <print+0x148>)
   80b46:	47b8      	blx	r7
   80b48:	4405      	add	r5, r0
				continue;
   80b4a:	e005      	b.n	80b58 <print+0x110>
			++format;
   80b4c:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80b4e:	7821      	ldrb	r1, [r4, #0]
   80b50:	4630      	mov	r0, r6
   80b52:	4b10      	ldr	r3, [pc, #64]	; (80b94 <print+0x14c>)
   80b54:	4798      	blx	r3
			++pc;
   80b56:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80b58:	3401      	adds	r4, #1
   80b5a:	7823      	ldrb	r3, [r4, #0]
   80b5c:	b163      	cbz	r3, 80b78 <print+0x130>
		if (*format == '%') {
   80b5e:	2b25      	cmp	r3, #37	; 0x25
   80b60:	d1f5      	bne.n	80b4e <print+0x106>
			++format;
   80b62:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80b64:	7863      	ldrb	r3, [r4, #1]
   80b66:	b13b      	cbz	r3, 80b78 <print+0x130>
			if (*format == '%') goto out;
   80b68:	2b25      	cmp	r3, #37	; 0x25
   80b6a:	d0ef      	beq.n	80b4c <print+0x104>
			if (*format == '-') {
   80b6c:	2b2d      	cmp	r3, #45	; 0x2d
   80b6e:	f43f af72 	beq.w	80a56 <print+0xe>
			width = pad = 0;
   80b72:	2300      	movs	r3, #0
   80b74:	4614      	mov	r4, r2
   80b76:	e774      	b.n	80a62 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80b78:	b116      	cbz	r6, 80b80 <print+0x138>
   80b7a:	6833      	ldr	r3, [r6, #0]
   80b7c:	2200      	movs	r2, #0
   80b7e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80b80:	4628      	mov	r0, r5
   80b82:	b009      	add	sp, #36	; 0x24
   80b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b86:	bf00      	nop
   80b88:	00080919 	.word	0x00080919
   80b8c:	00081420 	.word	0x00081420
   80b90:	0008099d 	.word	0x0008099d
   80b94:	00080909 	.word	0x00080909

00080b98 <printf>:

int printf(const char *format, ...)
{
   80b98:	b40f      	push	{r0, r1, r2, r3}
   80b9a:	b500      	push	{lr}
   80b9c:	b083      	sub	sp, #12
   80b9e:	aa04      	add	r2, sp, #16
   80ba0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80ba4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80ba6:	2000      	movs	r0, #0
   80ba8:	4b03      	ldr	r3, [pc, #12]	; (80bb8 <printf+0x20>)
   80baa:	4798      	blx	r3
}
   80bac:	b003      	add	sp, #12
   80bae:	f85d eb04 	ldr.w	lr, [sp], #4
   80bb2:	b004      	add	sp, #16
   80bb4:	4770      	bx	lr
   80bb6:	bf00      	nop
   80bb8:	00080a49 	.word	0x00080a49

00080bbc <PWM_Handler>:
   80bbc:	b508      	push	{r3, lr}
   80bbe:	4a07      	ldr	r2, [pc, #28]	; (80bdc <PWM_Handler+0x20>)
   80bc0:	6813      	ldr	r3, [r2, #0]
   80bc2:	3301      	adds	r3, #1
   80bc4:	6013      	str	r3, [r2, #0]
   80bc6:	4906      	ldr	r1, [pc, #24]	; (80be0 <PWM_Handler+0x24>)
   80bc8:	fb81 2103 	smull	r2, r1, r1, r3
   80bcc:	17db      	asrs	r3, r3, #31
   80bce:	ebc3 11a1 	rsb	r1, r3, r1, asr #6
   80bd2:	4804      	ldr	r0, [pc, #16]	; (80be4 <PWM_Handler+0x28>)
   80bd4:	4b04      	ldr	r3, [pc, #16]	; (80be8 <PWM_Handler+0x2c>)
   80bd6:	4798      	blx	r3
   80bd8:	bd08      	pop	{r3, pc}
   80bda:	bf00      	nop
   80bdc:	20000470 	.word	0x20000470
   80be0:	51eb851f 	.word	0x51eb851f
   80be4:	00081418 	.word	0x00081418
   80be8:	00080b99 	.word	0x00080b99

00080bec <PWM_Init>:
   80bec:	4a17      	ldr	r2, [pc, #92]	; (80c4c <PWM_Init+0x60>)
   80bee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bf2:	f043 0310 	orr.w	r3, r3, #16
   80bf6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80bfa:	4b15      	ldr	r3, [pc, #84]	; (80c50 <PWM_Init+0x64>)
   80bfc:	691a      	ldr	r2, [r3, #16]
   80bfe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c02:	611a      	str	r2, [r3, #16]
   80c04:	685a      	ldr	r2, [r3, #4]
   80c06:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c0a:	605a      	str	r2, [r3, #4]
   80c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c0e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c12:	671a      	str	r2, [r3, #112]	; 0x70
   80c14:	4a0f      	ldr	r2, [pc, #60]	; (80c54 <PWM_Init+0x68>)
   80c16:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80c1a:	f023 0301 	bic.w	r3, r3, #1
   80c1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
   80c22:	f240 220a 	movw	r2, #522	; 0x20a
   80c26:	4b0c      	ldr	r3, [pc, #48]	; (80c58 <PWM_Init+0x6c>)
   80c28:	601a      	str	r2, [r3, #0]
   80c2a:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   80c2e:	330c      	adds	r3, #12
   80c30:	601a      	str	r2, [r3, #0]
   80c32:	227b      	movs	r2, #123	; 0x7b
   80c34:	3b08      	subs	r3, #8
   80c36:	601a      	str	r2, [r3, #0]
   80c38:	2220      	movs	r2, #32
   80c3a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   80c3e:	601a      	str	r2, [r3, #0]
   80c40:	4a06      	ldr	r2, [pc, #24]	; (80c5c <PWM_Init+0x70>)
   80c42:	6813      	ldr	r3, [r2, #0]
   80c44:	f043 0301 	orr.w	r3, r3, #1
   80c48:	6013      	str	r3, [r2, #0]
   80c4a:	4770      	bx	lr
   80c4c:	400e0600 	.word	0x400e0600
   80c50:	400e1200 	.word	0x400e1200
   80c54:	40094000 	.word	0x40094000
   80c58:	400942a0 	.word	0x400942a0
   80c5c:	40094188 	.word	0x40094188

00080c60 <PWM_pos>:
   80c60:	4240      	negs	r0, r0
   80c62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   80c66:	1040      	asrs	r0, r0, #1
   80c68:	307b      	adds	r0, #123	; 0x7b
   80c6a:	2849      	cmp	r0, #73	; 0x49
   80c6c:	dc00      	bgt.n	80c70 <PWM_pos+0x10>
   80c6e:	204a      	movs	r0, #74	; 0x4a
   80c70:	28ac      	cmp	r0, #172	; 0xac
   80c72:	dd00      	ble.n	80c76 <PWM_pos+0x16>
   80c74:	20ac      	movs	r0, #172	; 0xac
   80c76:	4b01      	ldr	r3, [pc, #4]	; (80c7c <PWM_pos+0x1c>)
   80c78:	6018      	str	r0, [r3, #0]
   80c7a:	4770      	bx	lr
   80c7c:	400942a8 	.word	0x400942a8

00080c80 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80c80:	4b16      	ldr	r3, [pc, #88]	; (80cdc <configure_uart+0x5c>)
   80c82:	2200      	movs	r2, #0
   80c84:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80c86:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c88:	4b15      	ldr	r3, [pc, #84]	; (80ce0 <configure_uart+0x60>)
   80c8a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c8e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c90:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c94:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c96:	4002      	ands	r2, r0
   80c98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c9c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c9e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ca4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ca8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80caa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cae:	21ac      	movs	r1, #172	; 0xac
   80cb0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80cb2:	f240 2123 	movw	r1, #547	; 0x223
   80cb6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cbc:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80cbe:	f240 2102 	movw	r1, #514	; 0x202
   80cc2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80cc6:	f04f 31ff 	mov.w	r1, #4294967295
   80cca:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80ccc:	21e1      	movs	r1, #225	; 0xe1
   80cce:	6099      	str	r1, [r3, #8]
   80cd0:	4904      	ldr	r1, [pc, #16]	; (80ce4 <configure_uart+0x64>)
   80cd2:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80cd4:	2250      	movs	r2, #80	; 0x50
   80cd6:	601a      	str	r2, [r3, #0]
   80cd8:	4770      	bx	lr
   80cda:	bf00      	nop
   80cdc:	20000480 	.word	0x20000480
   80ce0:	400e0e00 	.word	0x400e0e00
   80ce4:	e000e100 	.word	0xe000e100

00080ce8 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80ce8:	4b07      	ldr	r3, [pc, #28]	; (80d08 <uart_putchar+0x20>)
   80cea:	695b      	ldr	r3, [r3, #20]
   80cec:	f013 0f02 	tst.w	r3, #2
   80cf0:	d008      	beq.n	80d04 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80cf2:	4b05      	ldr	r3, [pc, #20]	; (80d08 <uart_putchar+0x20>)
   80cf4:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <uart_putchar+0x20>)
   80cf8:	695b      	ldr	r3, [r3, #20]
   80cfa:	f413 7f00 	tst.w	r3, #512	; 0x200
   80cfe:	d0fa      	beq.n	80cf6 <uart_putchar+0xe>
	return 0;
   80d00:	2000      	movs	r0, #0
   80d02:	4770      	bx	lr
	return 1;
   80d04:	2001      	movs	r0, #1
}
   80d06:	4770      	bx	lr
   80d08:	400e0800 	.word	0x400e0800

00080d0c <UART_Handler>:

void UART_Handler(void)
{
   80d0c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80d0e:	4b15      	ldr	r3, [pc, #84]	; (80d64 <UART_Handler+0x58>)
   80d10:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80d12:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d16:	d003      	beq.n	80d20 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d18:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d1c:	4a11      	ldr	r2, [pc, #68]	; (80d64 <UART_Handler+0x58>)
   80d1e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d20:	f013 0f01 	tst.w	r3, #1
   80d24:	d012      	beq.n	80d4c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d26:	4810      	ldr	r0, [pc, #64]	; (80d68 <UART_Handler+0x5c>)
   80d28:	7842      	ldrb	r2, [r0, #1]
   80d2a:	1c53      	adds	r3, r2, #1
   80d2c:	4259      	negs	r1, r3
   80d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d36:	bf58      	it	pl
   80d38:	424b      	negpl	r3, r1
   80d3a:	7801      	ldrb	r1, [r0, #0]
   80d3c:	428b      	cmp	r3, r1
   80d3e:	d006      	beq.n	80d4e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d40:	4908      	ldr	r1, [pc, #32]	; (80d64 <UART_Handler+0x58>)
   80d42:	6988      	ldr	r0, [r1, #24]
   80d44:	4908      	ldr	r1, [pc, #32]	; (80d68 <UART_Handler+0x5c>)
   80d46:	440a      	add	r2, r1
   80d48:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d4a:	704b      	strb	r3, [r1, #1]
   80d4c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d4e:	4807      	ldr	r0, [pc, #28]	; (80d6c <UART_Handler+0x60>)
   80d50:	4b07      	ldr	r3, [pc, #28]	; (80d70 <UART_Handler+0x64>)
   80d52:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d54:	4b04      	ldr	r3, [pc, #16]	; (80d68 <UART_Handler+0x5c>)
   80d56:	7859      	ldrb	r1, [r3, #1]
   80d58:	4a02      	ldr	r2, [pc, #8]	; (80d64 <UART_Handler+0x58>)
   80d5a:	6992      	ldr	r2, [r2, #24]
   80d5c:	440b      	add	r3, r1
   80d5e:	709a      	strb	r2, [r3, #2]
			return;
   80d60:	bd08      	pop	{r3, pc}
   80d62:	bf00      	nop
   80d64:	400e0800 	.word	0x400e0800
   80d68:	20000480 	.word	0x20000480
   80d6c:	00081428 	.word	0x00081428
   80d70:	00080b99 	.word	0x00080b99

00080d74 <__aeabi_frsub>:
   80d74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80d78:	e002      	b.n	80d80 <__addsf3>
   80d7a:	bf00      	nop

00080d7c <__aeabi_fsub>:
   80d7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080d80 <__addsf3>:
   80d80:	0042      	lsls	r2, r0, #1
   80d82:	bf1f      	itttt	ne
   80d84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80d88:	ea92 0f03 	teqne	r2, r3
   80d8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80d90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80d94:	d06a      	beq.n	80e6c <__addsf3+0xec>
   80d96:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80d9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80d9e:	bfc1      	itttt	gt
   80da0:	18d2      	addgt	r2, r2, r3
   80da2:	4041      	eorgt	r1, r0
   80da4:	4048      	eorgt	r0, r1
   80da6:	4041      	eorgt	r1, r0
   80da8:	bfb8      	it	lt
   80daa:	425b      	neglt	r3, r3
   80dac:	2b19      	cmp	r3, #25
   80dae:	bf88      	it	hi
   80db0:	4770      	bxhi	lr
   80db2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80dba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80dbe:	bf18      	it	ne
   80dc0:	4240      	negne	r0, r0
   80dc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80dc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80dca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80dce:	bf18      	it	ne
   80dd0:	4249      	negne	r1, r1
   80dd2:	ea92 0f03 	teq	r2, r3
   80dd6:	d03f      	beq.n	80e58 <__addsf3+0xd8>
   80dd8:	f1a2 0201 	sub.w	r2, r2, #1
   80ddc:	fa41 fc03 	asr.w	ip, r1, r3
   80de0:	eb10 000c 	adds.w	r0, r0, ip
   80de4:	f1c3 0320 	rsb	r3, r3, #32
   80de8:	fa01 f103 	lsl.w	r1, r1, r3
   80dec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80df0:	d502      	bpl.n	80df8 <__addsf3+0x78>
   80df2:	4249      	negs	r1, r1
   80df4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80df8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80dfc:	d313      	bcc.n	80e26 <__addsf3+0xa6>
   80dfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80e02:	d306      	bcc.n	80e12 <__addsf3+0x92>
   80e04:	0840      	lsrs	r0, r0, #1
   80e06:	ea4f 0131 	mov.w	r1, r1, rrx
   80e0a:	f102 0201 	add.w	r2, r2, #1
   80e0e:	2afe      	cmp	r2, #254	; 0xfe
   80e10:	d251      	bcs.n	80eb6 <__addsf3+0x136>
   80e12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80e1a:	bf08      	it	eq
   80e1c:	f020 0001 	biceq.w	r0, r0, #1
   80e20:	ea40 0003 	orr.w	r0, r0, r3
   80e24:	4770      	bx	lr
   80e26:	0049      	lsls	r1, r1, #1
   80e28:	eb40 0000 	adc.w	r0, r0, r0
   80e2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80e30:	f1a2 0201 	sub.w	r2, r2, #1
   80e34:	d1ed      	bne.n	80e12 <__addsf3+0x92>
   80e36:	fab0 fc80 	clz	ip, r0
   80e3a:	f1ac 0c08 	sub.w	ip, ip, #8
   80e3e:	ebb2 020c 	subs.w	r2, r2, ip
   80e42:	fa00 f00c 	lsl.w	r0, r0, ip
   80e46:	bfaa      	itet	ge
   80e48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80e4c:	4252      	neglt	r2, r2
   80e4e:	4318      	orrge	r0, r3
   80e50:	bfbc      	itt	lt
   80e52:	40d0      	lsrlt	r0, r2
   80e54:	4318      	orrlt	r0, r3
   80e56:	4770      	bx	lr
   80e58:	f092 0f00 	teq	r2, #0
   80e5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80e60:	bf06      	itte	eq
   80e62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80e66:	3201      	addeq	r2, #1
   80e68:	3b01      	subne	r3, #1
   80e6a:	e7b5      	b.n	80dd8 <__addsf3+0x58>
   80e6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80e74:	bf18      	it	ne
   80e76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e7a:	d021      	beq.n	80ec0 <__addsf3+0x140>
   80e7c:	ea92 0f03 	teq	r2, r3
   80e80:	d004      	beq.n	80e8c <__addsf3+0x10c>
   80e82:	f092 0f00 	teq	r2, #0
   80e86:	bf08      	it	eq
   80e88:	4608      	moveq	r0, r1
   80e8a:	4770      	bx	lr
   80e8c:	ea90 0f01 	teq	r0, r1
   80e90:	bf1c      	itt	ne
   80e92:	2000      	movne	r0, #0
   80e94:	4770      	bxne	lr
   80e96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80e9a:	d104      	bne.n	80ea6 <__addsf3+0x126>
   80e9c:	0040      	lsls	r0, r0, #1
   80e9e:	bf28      	it	cs
   80ea0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80ea4:	4770      	bx	lr
   80ea6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80eaa:	bf3c      	itt	cc
   80eac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80eb0:	4770      	bxcc	lr
   80eb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80eb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80ebe:	4770      	bx	lr
   80ec0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80ec4:	bf16      	itet	ne
   80ec6:	4608      	movne	r0, r1
   80ec8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80ecc:	4601      	movne	r1, r0
   80ece:	0242      	lsls	r2, r0, #9
   80ed0:	bf06      	itte	eq
   80ed2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80ed6:	ea90 0f01 	teqeq	r0, r1
   80eda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80ede:	4770      	bx	lr

00080ee0 <__aeabi_ui2f>:
   80ee0:	f04f 0300 	mov.w	r3, #0
   80ee4:	e004      	b.n	80ef0 <__aeabi_i2f+0x8>
   80ee6:	bf00      	nop

00080ee8 <__aeabi_i2f>:
   80ee8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80eec:	bf48      	it	mi
   80eee:	4240      	negmi	r0, r0
   80ef0:	ea5f 0c00 	movs.w	ip, r0
   80ef4:	bf08      	it	eq
   80ef6:	4770      	bxeq	lr
   80ef8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80efc:	4601      	mov	r1, r0
   80efe:	f04f 0000 	mov.w	r0, #0
   80f02:	e01c      	b.n	80f3e <__aeabi_l2f+0x2a>

00080f04 <__aeabi_ul2f>:
   80f04:	ea50 0201 	orrs.w	r2, r0, r1
   80f08:	bf08      	it	eq
   80f0a:	4770      	bxeq	lr
   80f0c:	f04f 0300 	mov.w	r3, #0
   80f10:	e00a      	b.n	80f28 <__aeabi_l2f+0x14>
   80f12:	bf00      	nop

00080f14 <__aeabi_l2f>:
   80f14:	ea50 0201 	orrs.w	r2, r0, r1
   80f18:	bf08      	it	eq
   80f1a:	4770      	bxeq	lr
   80f1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80f20:	d502      	bpl.n	80f28 <__aeabi_l2f+0x14>
   80f22:	4240      	negs	r0, r0
   80f24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f28:	ea5f 0c01 	movs.w	ip, r1
   80f2c:	bf02      	ittt	eq
   80f2e:	4684      	moveq	ip, r0
   80f30:	4601      	moveq	r1, r0
   80f32:	2000      	moveq	r0, #0
   80f34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   80f38:	bf08      	it	eq
   80f3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   80f3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   80f42:	fabc f28c 	clz	r2, ip
   80f46:	3a08      	subs	r2, #8
   80f48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   80f4c:	db10      	blt.n	80f70 <__aeabi_l2f+0x5c>
   80f4e:	fa01 fc02 	lsl.w	ip, r1, r2
   80f52:	4463      	add	r3, ip
   80f54:	fa00 fc02 	lsl.w	ip, r0, r2
   80f58:	f1c2 0220 	rsb	r2, r2, #32
   80f5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f60:	fa20 f202 	lsr.w	r2, r0, r2
   80f64:	eb43 0002 	adc.w	r0, r3, r2
   80f68:	bf08      	it	eq
   80f6a:	f020 0001 	biceq.w	r0, r0, #1
   80f6e:	4770      	bx	lr
   80f70:	f102 0220 	add.w	r2, r2, #32
   80f74:	fa01 fc02 	lsl.w	ip, r1, r2
   80f78:	f1c2 0220 	rsb	r2, r2, #32
   80f7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   80f80:	fa21 f202 	lsr.w	r2, r1, r2
   80f84:	eb43 0002 	adc.w	r0, r3, r2
   80f88:	bf08      	it	eq
   80f8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80f8e:	4770      	bx	lr

00080f90 <__aeabi_fmul>:
   80f90:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80f98:	bf1e      	ittt	ne
   80f9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80f9e:	ea92 0f0c 	teqne	r2, ip
   80fa2:	ea93 0f0c 	teqne	r3, ip
   80fa6:	d06f      	beq.n	81088 <__aeabi_fmul+0xf8>
   80fa8:	441a      	add	r2, r3
   80faa:	ea80 0c01 	eor.w	ip, r0, r1
   80fae:	0240      	lsls	r0, r0, #9
   80fb0:	bf18      	it	ne
   80fb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80fb6:	d01e      	beq.n	80ff6 <__aeabi_fmul+0x66>
   80fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80fbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80fc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80fc4:	fba0 3101 	umull	r3, r1, r0, r1
   80fc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80fcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   80fd0:	bf3e      	ittt	cc
   80fd2:	0049      	lslcc	r1, r1, #1
   80fd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   80fd8:	005b      	lslcc	r3, r3, #1
   80fda:	ea40 0001 	orr.w	r0, r0, r1
   80fde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   80fe2:	2afd      	cmp	r2, #253	; 0xfd
   80fe4:	d81d      	bhi.n	81022 <__aeabi_fmul+0x92>
   80fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   80fea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80fee:	bf08      	it	eq
   80ff0:	f020 0001 	biceq.w	r0, r0, #1
   80ff4:	4770      	bx	lr
   80ff6:	f090 0f00 	teq	r0, #0
   80ffa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   80ffe:	bf08      	it	eq
   81000:	0249      	lsleq	r1, r1, #9
   81002:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81006:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8100a:	3a7f      	subs	r2, #127	; 0x7f
   8100c:	bfc2      	ittt	gt
   8100e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81012:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81016:	4770      	bxgt	lr
   81018:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8101c:	f04f 0300 	mov.w	r3, #0
   81020:	3a01      	subs	r2, #1
   81022:	dc5d      	bgt.n	810e0 <__aeabi_fmul+0x150>
   81024:	f112 0f19 	cmn.w	r2, #25
   81028:	bfdc      	itt	le
   8102a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8102e:	4770      	bxle	lr
   81030:	f1c2 0200 	rsb	r2, r2, #0
   81034:	0041      	lsls	r1, r0, #1
   81036:	fa21 f102 	lsr.w	r1, r1, r2
   8103a:	f1c2 0220 	rsb	r2, r2, #32
   8103e:	fa00 fc02 	lsl.w	ip, r0, r2
   81042:	ea5f 0031 	movs.w	r0, r1, rrx
   81046:	f140 0000 	adc.w	r0, r0, #0
   8104a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8104e:	bf08      	it	eq
   81050:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81054:	4770      	bx	lr
   81056:	f092 0f00 	teq	r2, #0
   8105a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8105e:	bf02      	ittt	eq
   81060:	0040      	lsleq	r0, r0, #1
   81062:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81066:	3a01      	subeq	r2, #1
   81068:	d0f9      	beq.n	8105e <__aeabi_fmul+0xce>
   8106a:	ea40 000c 	orr.w	r0, r0, ip
   8106e:	f093 0f00 	teq	r3, #0
   81072:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81076:	bf02      	ittt	eq
   81078:	0049      	lsleq	r1, r1, #1
   8107a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8107e:	3b01      	subeq	r3, #1
   81080:	d0f9      	beq.n	81076 <__aeabi_fmul+0xe6>
   81082:	ea41 010c 	orr.w	r1, r1, ip
   81086:	e78f      	b.n	80fa8 <__aeabi_fmul+0x18>
   81088:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8108c:	ea92 0f0c 	teq	r2, ip
   81090:	bf18      	it	ne
   81092:	ea93 0f0c 	teqne	r3, ip
   81096:	d00a      	beq.n	810ae <__aeabi_fmul+0x11e>
   81098:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8109c:	bf18      	it	ne
   8109e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   810a2:	d1d8      	bne.n	81056 <__aeabi_fmul+0xc6>
   810a4:	ea80 0001 	eor.w	r0, r0, r1
   810a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810ac:	4770      	bx	lr
   810ae:	f090 0f00 	teq	r0, #0
   810b2:	bf17      	itett	ne
   810b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   810b8:	4608      	moveq	r0, r1
   810ba:	f091 0f00 	teqne	r1, #0
   810be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   810c2:	d014      	beq.n	810ee <__aeabi_fmul+0x15e>
   810c4:	ea92 0f0c 	teq	r2, ip
   810c8:	d101      	bne.n	810ce <__aeabi_fmul+0x13e>
   810ca:	0242      	lsls	r2, r0, #9
   810cc:	d10f      	bne.n	810ee <__aeabi_fmul+0x15e>
   810ce:	ea93 0f0c 	teq	r3, ip
   810d2:	d103      	bne.n	810dc <__aeabi_fmul+0x14c>
   810d4:	024b      	lsls	r3, r1, #9
   810d6:	bf18      	it	ne
   810d8:	4608      	movne	r0, r1
   810da:	d108      	bne.n	810ee <__aeabi_fmul+0x15e>
   810dc:	ea80 0001 	eor.w	r0, r0, r1
   810e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   810ec:	4770      	bx	lr
   810ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   810f6:	4770      	bx	lr

000810f8 <__aeabi_fdiv>:
   810f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   810fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81100:	bf1e      	ittt	ne
   81102:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81106:	ea92 0f0c 	teqne	r2, ip
   8110a:	ea93 0f0c 	teqne	r3, ip
   8110e:	d069      	beq.n	811e4 <__aeabi_fdiv+0xec>
   81110:	eba2 0203 	sub.w	r2, r2, r3
   81114:	ea80 0c01 	eor.w	ip, r0, r1
   81118:	0249      	lsls	r1, r1, #9
   8111a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8111e:	d037      	beq.n	81190 <__aeabi_fdiv+0x98>
   81120:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81124:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81128:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8112c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81130:	428b      	cmp	r3, r1
   81132:	bf38      	it	cc
   81134:	005b      	lslcc	r3, r3, #1
   81136:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8113a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8113e:	428b      	cmp	r3, r1
   81140:	bf24      	itt	cs
   81142:	1a5b      	subcs	r3, r3, r1
   81144:	ea40 000c 	orrcs.w	r0, r0, ip
   81148:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8114c:	bf24      	itt	cs
   8114e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81152:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81156:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8115a:	bf24      	itt	cs
   8115c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81160:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81164:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81168:	bf24      	itt	cs
   8116a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8116e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81172:	011b      	lsls	r3, r3, #4
   81174:	bf18      	it	ne
   81176:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8117a:	d1e0      	bne.n	8113e <__aeabi_fdiv+0x46>
   8117c:	2afd      	cmp	r2, #253	; 0xfd
   8117e:	f63f af50 	bhi.w	81022 <__aeabi_fmul+0x92>
   81182:	428b      	cmp	r3, r1
   81184:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81188:	bf08      	it	eq
   8118a:	f020 0001 	biceq.w	r0, r0, #1
   8118e:	4770      	bx	lr
   81190:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81194:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81198:	327f      	adds	r2, #127	; 0x7f
   8119a:	bfc2      	ittt	gt
   8119c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   811a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   811a4:	4770      	bxgt	lr
   811a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811aa:	f04f 0300 	mov.w	r3, #0
   811ae:	3a01      	subs	r2, #1
   811b0:	e737      	b.n	81022 <__aeabi_fmul+0x92>
   811b2:	f092 0f00 	teq	r2, #0
   811b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   811ba:	bf02      	ittt	eq
   811bc:	0040      	lsleq	r0, r0, #1
   811be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   811c2:	3a01      	subeq	r2, #1
   811c4:	d0f9      	beq.n	811ba <__aeabi_fdiv+0xc2>
   811c6:	ea40 000c 	orr.w	r0, r0, ip
   811ca:	f093 0f00 	teq	r3, #0
   811ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   811d2:	bf02      	ittt	eq
   811d4:	0049      	lsleq	r1, r1, #1
   811d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   811da:	3b01      	subeq	r3, #1
   811dc:	d0f9      	beq.n	811d2 <__aeabi_fdiv+0xda>
   811de:	ea41 010c 	orr.w	r1, r1, ip
   811e2:	e795      	b.n	81110 <__aeabi_fdiv+0x18>
   811e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   811e8:	ea92 0f0c 	teq	r2, ip
   811ec:	d108      	bne.n	81200 <__aeabi_fdiv+0x108>
   811ee:	0242      	lsls	r2, r0, #9
   811f0:	f47f af7d 	bne.w	810ee <__aeabi_fmul+0x15e>
   811f4:	ea93 0f0c 	teq	r3, ip
   811f8:	f47f af70 	bne.w	810dc <__aeabi_fmul+0x14c>
   811fc:	4608      	mov	r0, r1
   811fe:	e776      	b.n	810ee <__aeabi_fmul+0x15e>
   81200:	ea93 0f0c 	teq	r3, ip
   81204:	d104      	bne.n	81210 <__aeabi_fdiv+0x118>
   81206:	024b      	lsls	r3, r1, #9
   81208:	f43f af4c 	beq.w	810a4 <__aeabi_fmul+0x114>
   8120c:	4608      	mov	r0, r1
   8120e:	e76e      	b.n	810ee <__aeabi_fmul+0x15e>
   81210:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81214:	bf18      	it	ne
   81216:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8121a:	d1ca      	bne.n	811b2 <__aeabi_fdiv+0xba>
   8121c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81220:	f47f af5c 	bne.w	810dc <__aeabi_fmul+0x14c>
   81224:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81228:	f47f af3c 	bne.w	810a4 <__aeabi_fmul+0x114>
   8122c:	e75f      	b.n	810ee <__aeabi_fmul+0x15e>
   8122e:	bf00      	nop

00081230 <__aeabi_f2iz>:
   81230:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81234:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81238:	d30f      	bcc.n	8125a <__aeabi_f2iz+0x2a>
   8123a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8123e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81242:	d90d      	bls.n	81260 <__aeabi_f2iz+0x30>
   81244:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8124c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81250:	fa23 f002 	lsr.w	r0, r3, r2
   81254:	bf18      	it	ne
   81256:	4240      	negne	r0, r0
   81258:	4770      	bx	lr
   8125a:	f04f 0000 	mov.w	r0, #0
   8125e:	4770      	bx	lr
   81260:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81264:	d101      	bne.n	8126a <__aeabi_f2iz+0x3a>
   81266:	0242      	lsls	r2, r0, #9
   81268:	d105      	bne.n	81276 <__aeabi_f2iz+0x46>
   8126a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   8126e:	bf08      	it	eq
   81270:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81274:	4770      	bx	lr
   81276:	f04f 0000 	mov.w	r0, #0
   8127a:	4770      	bx	lr

0008127c <__libc_init_array>:
   8127c:	b570      	push	{r4, r5, r6, lr}
   8127e:	4e0f      	ldr	r6, [pc, #60]	; (812bc <__libc_init_array+0x40>)
   81280:	4d0f      	ldr	r5, [pc, #60]	; (812c0 <__libc_init_array+0x44>)
   81282:	1b76      	subs	r6, r6, r5
   81284:	10b6      	asrs	r6, r6, #2
   81286:	bf18      	it	ne
   81288:	2400      	movne	r4, #0
   8128a:	d005      	beq.n	81298 <__libc_init_array+0x1c>
   8128c:	3401      	adds	r4, #1
   8128e:	f855 3b04 	ldr.w	r3, [r5], #4
   81292:	4798      	blx	r3
   81294:	42a6      	cmp	r6, r4
   81296:	d1f9      	bne.n	8128c <__libc_init_array+0x10>
   81298:	4e0a      	ldr	r6, [pc, #40]	; (812c4 <__libc_init_array+0x48>)
   8129a:	4d0b      	ldr	r5, [pc, #44]	; (812c8 <__libc_init_array+0x4c>)
   8129c:	f000 f8d6 	bl	8144c <_init>
   812a0:	1b76      	subs	r6, r6, r5
   812a2:	10b6      	asrs	r6, r6, #2
   812a4:	bf18      	it	ne
   812a6:	2400      	movne	r4, #0
   812a8:	d006      	beq.n	812b8 <__libc_init_array+0x3c>
   812aa:	3401      	adds	r4, #1
   812ac:	f855 3b04 	ldr.w	r3, [r5], #4
   812b0:	4798      	blx	r3
   812b2:	42a6      	cmp	r6, r4
   812b4:	d1f9      	bne.n	812aa <__libc_init_array+0x2e>
   812b6:	bd70      	pop	{r4, r5, r6, pc}
   812b8:	bd70      	pop	{r4, r5, r6, pc}
   812ba:	bf00      	nop
   812bc:	00081458 	.word	0x00081458
   812c0:	00081458 	.word	0x00081458
   812c4:	00081460 	.word	0x00081460
   812c8:	00081458 	.word	0x00081458

000812cc <register_fini>:
   812cc:	4b02      	ldr	r3, [pc, #8]	; (812d8 <register_fini+0xc>)
   812ce:	b113      	cbz	r3, 812d6 <register_fini+0xa>
   812d0:	4802      	ldr	r0, [pc, #8]	; (812dc <register_fini+0x10>)
   812d2:	f000 b805 	b.w	812e0 <atexit>
   812d6:	4770      	bx	lr
   812d8:	00000000 	.word	0x00000000
   812dc:	000812ed 	.word	0x000812ed

000812e0 <atexit>:
   812e0:	2300      	movs	r3, #0
   812e2:	4601      	mov	r1, r0
   812e4:	461a      	mov	r2, r3
   812e6:	4618      	mov	r0, r3
   812e8:	f000 b81e 	b.w	81328 <__register_exitproc>

000812ec <__libc_fini_array>:
   812ec:	b538      	push	{r3, r4, r5, lr}
   812ee:	4c0a      	ldr	r4, [pc, #40]	; (81318 <__libc_fini_array+0x2c>)
   812f0:	4d0a      	ldr	r5, [pc, #40]	; (8131c <__libc_fini_array+0x30>)
   812f2:	1b64      	subs	r4, r4, r5
   812f4:	10a4      	asrs	r4, r4, #2
   812f6:	d00a      	beq.n	8130e <__libc_fini_array+0x22>
   812f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   812fc:	3b01      	subs	r3, #1
   812fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81302:	3c01      	subs	r4, #1
   81304:	f855 3904 	ldr.w	r3, [r5], #-4
   81308:	4798      	blx	r3
   8130a:	2c00      	cmp	r4, #0
   8130c:	d1f9      	bne.n	81302 <__libc_fini_array+0x16>
   8130e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81312:	f000 b8a5 	b.w	81460 <_fini>
   81316:	bf00      	nop
   81318:	00081470 	.word	0x00081470
   8131c:	0008146c 	.word	0x0008146c

00081320 <__retarget_lock_acquire_recursive>:
   81320:	4770      	bx	lr
   81322:	bf00      	nop

00081324 <__retarget_lock_release_recursive>:
   81324:	4770      	bx	lr
   81326:	bf00      	nop

00081328 <__register_exitproc>:
   81328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8132c:	4d2c      	ldr	r5, [pc, #176]	; (813e0 <__register_exitproc+0xb8>)
   8132e:	4606      	mov	r6, r0
   81330:	6828      	ldr	r0, [r5, #0]
   81332:	4698      	mov	r8, r3
   81334:	460f      	mov	r7, r1
   81336:	4691      	mov	r9, r2
   81338:	f7ff fff2 	bl	81320 <__retarget_lock_acquire_recursive>
   8133c:	4b29      	ldr	r3, [pc, #164]	; (813e4 <__register_exitproc+0xbc>)
   8133e:	681c      	ldr	r4, [r3, #0]
   81340:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81344:	2b00      	cmp	r3, #0
   81346:	d03e      	beq.n	813c6 <__register_exitproc+0x9e>
   81348:	685a      	ldr	r2, [r3, #4]
   8134a:	2a1f      	cmp	r2, #31
   8134c:	dc1c      	bgt.n	81388 <__register_exitproc+0x60>
   8134e:	f102 0e01 	add.w	lr, r2, #1
   81352:	b176      	cbz	r6, 81372 <__register_exitproc+0x4a>
   81354:	2101      	movs	r1, #1
   81356:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8135a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8135e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81362:	4091      	lsls	r1, r2
   81364:	4308      	orrs	r0, r1
   81366:	2e02      	cmp	r6, #2
   81368:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8136c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81370:	d023      	beq.n	813ba <__register_exitproc+0x92>
   81372:	3202      	adds	r2, #2
   81374:	f8c3 e004 	str.w	lr, [r3, #4]
   81378:	6828      	ldr	r0, [r5, #0]
   8137a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8137e:	f7ff ffd1 	bl	81324 <__retarget_lock_release_recursive>
   81382:	2000      	movs	r0, #0
   81384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81388:	4b17      	ldr	r3, [pc, #92]	; (813e8 <__register_exitproc+0xc0>)
   8138a:	b30b      	cbz	r3, 813d0 <__register_exitproc+0xa8>
   8138c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81390:	f3af 8000 	nop.w
   81394:	4603      	mov	r3, r0
   81396:	b1d8      	cbz	r0, 813d0 <__register_exitproc+0xa8>
   81398:	2000      	movs	r0, #0
   8139a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8139e:	f04f 0e01 	mov.w	lr, #1
   813a2:	6058      	str	r0, [r3, #4]
   813a4:	6019      	str	r1, [r3, #0]
   813a6:	4602      	mov	r2, r0
   813a8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813ac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   813b0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   813b4:	2e00      	cmp	r6, #0
   813b6:	d0dc      	beq.n	81372 <__register_exitproc+0x4a>
   813b8:	e7cc      	b.n	81354 <__register_exitproc+0x2c>
   813ba:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   813be:	4301      	orrs	r1, r0
   813c0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   813c4:	e7d5      	b.n	81372 <__register_exitproc+0x4a>
   813c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   813ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813ce:	e7bb      	b.n	81348 <__register_exitproc+0x20>
   813d0:	6828      	ldr	r0, [r5, #0]
   813d2:	f7ff ffa7 	bl	81324 <__retarget_lock_release_recursive>
   813d6:	f04f 30ff 	mov.w	r0, #4294967295
   813da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813de:	bf00      	nop
   813e0:	20000430 	.word	0x20000430
   813e4:	00081448 	.word	0x00081448
   813e8:	00000000 	.word	0x00000000
   813ec:	304e4143 	.word	0x304e4143
   813f0:	73656d20 	.word	0x73656d20
   813f4:	65676173 	.word	0x65676173
   813f8:	72726120 	.word	0x72726120
   813fc:	64657669 	.word	0x64657669
   81400:	206e6920 	.word	0x206e6920
   81404:	2d6e6f6e 	.word	0x2d6e6f6e
   81408:	64657375 	.word	0x64657375
   8140c:	69616d20 	.word	0x69616d20
   81410:	786f626c 	.word	0x786f626c
   81414:	00000d0a 	.word	0x00000d0a
   81418:	0d0a6425 	.word	0x0d0a6425
   8141c:	00000000 	.word	0x00000000
   81420:	6c756e28 	.word	0x6c756e28
   81424:	0000296c 	.word	0x0000296c
   81428:	3a525245 	.word	0x3a525245
   8142c:	52415520 	.word	0x52415520
   81430:	58522054 	.word	0x58522054
   81434:	66756220 	.word	0x66756220
   81438:	20726566 	.word	0x20726566
   8143c:	66207369 	.word	0x66207369
   81440:	0a6c6c75 	.word	0x0a6c6c75
   81444:	0000000d 	.word	0x0000000d

00081448 <_global_impure_ptr>:
   81448:	20000008                                ... 

0008144c <_init>:
   8144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8144e:	bf00      	nop
   81450:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81452:	bc08      	pop	{r3}
   81454:	469e      	mov	lr, r3
   81456:	4770      	bx	lr

00081458 <__init_array_start>:
   81458:	000812cd 	.word	0x000812cd

0008145c <__frame_dummy_init_array_entry>:
   8145c:	00080119                                ....

00081460 <_fini>:
   81460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81462:	bf00      	nop
   81464:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81466:	bc08      	pop	{r3}
   81468:	469e      	mov	lr, r3
   8146a:	4770      	bx	lr

0008146c <__fini_array_start>:
   8146c:	000800f5 	.word	0x000800f5


PingPongLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800100  00000c3a  00000cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800236  00800236  00000e04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b64  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000848  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b3  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000508  00000000  00000000  00002ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000033cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e3       	ldi	r30, 0x3A	; 58
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 33       	cpi	r26, 0x36	; 54
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a6 e3       	ldi	r26, 0x36	; 54
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 34       	cpi	r26, 0x44	; 68
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  a6:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
		case '7': PORTA = 0b01000000; break;
		case '8': PORTA = 0b10000000; break;
		
		default:
		printf("No port values changed");
		break;
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	08 95       	ret

000000be <Read_ADC>:
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f4 e1       	ldi	r31, 0x14	; 20
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	80 83       	st	Z, r24
  c6:	82 e1       	ldi	r24, 0x12	; 18
  c8:	80 83       	st	Z, r24
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	80 83       	st	Z, r24
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
  d2:	8c ec       	ldi	r24, 0xCC	; 204
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <Read_ADC+0x18>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Read_ADC+0x1e>
  dc:	00 00       	nop
  de:	80 81       	ld	r24, Z
  e0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <analog0>
  e4:	80 81       	ld	r24, Z
  e6:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <analog1>
  ea:	80 81       	ld	r24, Z
  ec:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <analog2>
  f0:	80 81       	ld	r24, Z
  f2:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <analog3>
  f6:	08 95       	ret

000000f8 <Calibrate_Joystick>:
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <offset_x+0x1>
 100:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <offset_x>
 104:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__data_end+0x1>
 108:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__data_end>
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	38 c0       	rjmp	.+112    	; 0x182 <Calibrate_Joystick+0x8a>
 112:	0e 94 5f 00 	call	0xbe	; 0xbe <Read_ADC>
 116:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <analog0>
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	28 9f       	mul	r18, r24
 11e:	90 01       	movw	r18, r0
 120:	11 24       	eor	r1, r1
 122:	32 53       	subi	r19, 0x32	; 50
 124:	c9 01       	movw	r24, r18
 126:	99 23       	and	r25, r25
 128:	14 f4       	brge	.+4      	; 0x12e <Calibrate_Joystick+0x36>
 12a:	81 58       	subi	r24, 0x81	; 129
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
 12e:	9c 01       	movw	r18, r24
 130:	22 0f       	add	r18, r18
 132:	23 2f       	mov	r18, r19
 134:	22 1f       	adc	r18, r18
 136:	33 0b       	sbc	r19, r19
 138:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <analog1>
 13c:	84 e6       	ldi	r24, 0x64	; 100
 13e:	48 9f       	mul	r20, r24
 140:	a0 01       	movw	r20, r0
 142:	11 24       	eor	r1, r1
 144:	52 53       	subi	r21, 0x32	; 50
 146:	ca 01       	movw	r24, r20
 148:	99 23       	and	r25, r25
 14a:	14 f4       	brge	.+4      	; 0x150 <Calibrate_Joystick+0x58>
 14c:	81 58       	subi	r24, 0x81	; 129
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	88 0f       	add	r24, r24
 152:	89 2f       	mov	r24, r25
 154:	88 1f       	adc	r24, r24
 156:	99 0b       	sbc	r25, r25
 158:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <offset_x>
 15c:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <offset_x+0x1>
 160:	24 0f       	add	r18, r20
 162:	35 1f       	adc	r19, r21
 164:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <offset_x+0x1>
 168:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <offset_x>
 16c:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <__data_end>
 170:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <__data_end+0x1>
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 17c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c2 33       	cpi	r28, 0x32	; 50
 184:	d1 05       	cpc	r29, r1
 186:	2c f2       	brlt	.-118    	; 0x112 <Calibrate_Joystick+0x1a>
 188:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <offset_x>
 18c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <offset_x+0x1>
 190:	22 e3       	ldi	r18, 0x32	; 50
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	0e 94 26 02 	call	0x44c	; 0x44c <__divmodhi4>
 19a:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <offset_x+0x1>
 19e:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <offset_x>
 1a2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
 1a6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <__data_end+0x1>
 1aa:	b9 01       	movw	r22, r18
 1ac:	0e 94 26 02 	call	0x44c	; 0x44c <__divmodhi4>
 1b0:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <__data_end+0x1>
 1b4:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <__data_end>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <USART_Init>:
 1be:	90 bd       	out	0x20, r25	; 32
 1c0:	89 b9       	out	0x09, r24	; 9
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	8a b9       	out	0x0a, r24	; 10
 1c6:	8e ea       	ldi	r24, 0xAE	; 174
 1c8:	80 bd       	out	0x20, r24	; 32
 1ca:	08 95       	ret

000001cc <SRAM_test>:
	}
}

void SRAM_test(void)
{
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
 1d8:	89 e2       	ldi	r24, 0x29	; 41
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 c0 02 	call	0x580	; 0x580 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
 1e0:	0e 94 9a 02 	call	0x534	; 0x534 <rand>
 1e4:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
 1e6:	0e 94 9f 02 	call	0x53e	; 0x53e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1f2:	20 c0       	rjmp	.+64     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
		uint8_t some_value = rand();
 1f4:	0e 94 9a 02 	call	0x534	; 0x534 <rand>
		ext_ram[i] = some_value;
 1f8:	fe 01       	movw	r30, r28
 1fa:	f8 5e       	subi	r31, 0xE8	; 232
 1fc:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
 1fe:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 200:	28 17       	cp	r18, r24
 202:	b9 f0       	breq	.+46     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 204:	99 27       	eor	r25, r25
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	1f 92       	push	r1
 20c:	2f 93       	push	r18
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	0e 94 aa 02 	call	0x554	; 0x554 <printf>
			write_errors++;
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	8d b7       	in	r24, 0x3d	; 61
 224:	9e b7       	in	r25, 0x3e	; 62
 226:	08 96       	adiw	r24, 0x08	; 8
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	9e bf       	out	0x3e, r25	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	c1 15       	cp	r28, r1
 236:	98 e0       	ldi	r25, 0x08	; 8
 238:	d9 07       	cpc	r29, r25
 23a:	e0 f2       	brcs	.-72     	; 0x1f4 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 23c:	c7 01       	movw	r24, r14
 23e:	0e 94 9f 02 	call	0x53e	; 0x53e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 246:	e1 2c       	mov	r14, r1
 248:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 24a:	20 c0       	rjmp	.+64     	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
		uint8_t some_value = rand();
 24c:	0e 94 9a 02 	call	0x534	; 0x534 <rand>
		uint8_t retreived_value = ext_ram[i];
 250:	fe 01       	movw	r30, r28
 252:	f8 5e       	subi	r31, 0xE8	; 232
 254:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 256:	28 17       	cp	r18, r24
 258:	c1 f0       	breq	.+48     	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 25a:	99 27       	eor	r25, r25
 25c:	9f 93       	push	r25
 25e:	8f 93       	push	r24
 260:	1f 92       	push	r1
 262:	2f 93       	push	r18
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	88 e7       	ldi	r24, 0x78	; 120
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	9f 93       	push	r25
 26e:	8f 93       	push	r24
 270:	0e 94 aa 02 	call	0x554	; 0x554 <printf>
			retrieval_errors++;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	e8 1a       	sub	r14, r24
 278:	f8 0a       	sbc	r15, r24
 27a:	8d b7       	in	r24, 0x3d	; 61
 27c:	9e b7       	in	r25, 0x3e	; 62
 27e:	08 96       	adiw	r24, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	9e bf       	out	0x3e, r25	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 28a:	21 96       	adiw	r28, 0x01	; 1
 28c:	c1 15       	cp	r28, r1
 28e:	98 e0       	ldi	r25, 0x08	; 8
 290:	d9 07       	cpc	r29, r25
 292:	e0 f2       	brcs	.-72     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 294:	ff 92       	push	r15
 296:	ef 92       	push	r14
 298:	1f 93       	push	r17
 29a:	0f 93       	push	r16
 29c:	85 eb       	ldi	r24, 0xB5	; 181
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	9f 93       	push	r25
 2a2:	8f 93       	push	r24
 2a4:	0e 94 aa 02 	call	0x554	; 0x554 <printf>
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	08 95       	ret

000002c2 <SRAM_Init>:

void SRAM_Init(void) {
	// Enable external memory interface
	MCUCR |= (1 << SRE);
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	85 bf       	out	0x35, r24	; 53
	// Mask PC7-PC4
	SFIOR |= (1 << XMM2);
 2c8:	80 b7       	in	r24, 0x30	; 48
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	80 bf       	out	0x30, r24	; 48
 2ce:	08 95       	ret

000002d0 <CLK_Init>:
}

void CLK_Init(int TOP) {
 2d0:	9c 01       	movw	r18, r24
	// Set PD5 as output
	DDRD |= (1 << DDD4);
 2d2:	91 b3       	in	r25, 0x11	; 17
 2d4:	90 61       	ori	r25, 0x10	; 16
 2d6:	91 bb       	out	0x11, r25	; 17
	
	// Compare output mode: Toggle compare match
	TCCR3A |= (1 << COM3A0); 
 2d8:	eb e8       	ldi	r30, 0x8B	; 139
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	90 81       	ld	r25, Z
 2de:	90 64       	ori	r25, 0x40	; 64
 2e0:	90 83       	st	Z, r25
	
	// Mode 4, CTC
	TCCR3B |= (1 << WGM32);
 2e2:	ea e8       	ldi	r30, 0x8A	; 138
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	98 60       	ori	r25, 0x08	; 8
 2ea:	90 83       	st	Z, r25
	
	// Set counter TOP value
	OCR3A = TOP;
 2ec:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 2f0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	
	// Prescaler 1
	TCCR3B |= (1 << CS30);
 2f4:	80 81       	ld	r24, Z
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <main>:
int offset_y = 0;


int main(void)
{
	DDRA = 0xFF;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 0x02;
 300:	86 b1       	in	r24, 0x06	; 6
 302:	82 60       	ori	r24, 0x02	; 2
 304:	86 b9       	out	0x06, r24	; 6
	
	// Joystick button inputs
	DDRD &= !( (1 << PD2) | (1 << PD3) );
 306:	81 b3       	in	r24, 0x11	; 17
 308:	11 ba       	out	0x11, r1	; 17
	
	USART_Init(MYUBRR);
 30a:	8f e1       	ldi	r24, 0x1F	; 31
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 df 00 	call	0x1be	; 0x1be <USART_Init>
	CLK_Init(0);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 68 01 	call	0x2d0	; 0x2d0 <CLK_Init>
	SRAM_Init();
 31a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SRAM_Init>
	
	// Setup for printf
	stdout = &uart_stdio;
 31e:	ee e3       	ldi	r30, 0x3E	; 62
 320:	f2 e0       	ldi	r31, 0x02	; 2
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	93 83       	std	Z+3, r25	; 0x03
 328:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_stdio;
 32a:	91 83       	std	Z+1, r25	; 0x01
 32c:	80 83       	st	Z, r24
	
	unsigned char received_char = 0;
	
    while (1) {
				
		received_char = USART_Receive();
 32e:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Receive>
		char button_left = !!(PIND & (1 << PIND3));
 332:	90 b3       	in	r25, 0x10	; 16
 334:	93 fb       	bst	r25, 3
 336:	dd 27       	eor	r29, r29
 338:	d0 f9       	bld	r29, 0
		char button_right = !!(PIND & (1 << PIND2));
 33a:	90 b3       	in	r25, 0x10	; 16
 33c:	92 fb       	bst	r25, 2
 33e:	cc 27       	eor	r28, r28
 340:	c0 f9       	bld	r28, 0
		
		
		if (received_char == 's') 
 342:	83 37       	cpi	r24, 0x73	; 115
 344:	19 f4       	brne	.+6      	; 0x34c <main+0x50>
			SRAM_test();
 346:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SRAM_test>
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <main+0x32>
			
		else if (received_char == 'a') {
 34c:	81 36       	cpi	r24, 0x61	; 97
 34e:	09 f0       	breq	.+2      	; 0x352 <main+0x56>
 350:	73 c0       	rjmp	.+230    	; 0x438 <__DATA_REGION_LENGTH__+0x38>
			Read_ADC();
 352:	0e 94 5f 00 	call	0xbe	; 0xbe <Read_ADC>
			
			int x_pos = (100*(analog0 - 128))/128 - offset_x;
 356:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <analog0>
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	20 58       	subi	r18, 0x80	; 128
 35e:	31 09       	sbc	r19, r1
 360:	44 e6       	ldi	r20, 0x64	; 100
 362:	42 9f       	mul	r20, r18
 364:	c0 01       	movw	r24, r0
 366:	43 9f       	mul	r20, r19
 368:	90 0d       	add	r25, r0
 36a:	11 24       	eor	r1, r1
 36c:	99 23       	and	r25, r25
 36e:	14 f4       	brge	.+4      	; 0x374 <main+0x78>
 370:	81 58       	subi	r24, 0x81	; 129
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	88 0f       	add	r24, r24
 376:	89 2f       	mov	r24, r25
 378:	88 1f       	adc	r24, r24
 37a:	99 0b       	sbc	r25, r25
 37c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <offset_x>
 380:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <offset_x+0x1>
 384:	82 1b       	sub	r24, r18
 386:	93 0b       	sbc	r25, r19
			int y_pos = (100*(analog1 - 128))/128 - offset_y;
 388:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <analog1>
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	40 58       	subi	r20, 0x80	; 128
 390:	51 09       	sbc	r21, r1
 392:	64 e6       	ldi	r22, 0x64	; 100
 394:	64 9f       	mul	r22, r20
 396:	90 01       	movw	r18, r0
 398:	65 9f       	mul	r22, r21
 39a:	30 0d       	add	r19, r0
 39c:	11 24       	eor	r1, r1
 39e:	33 23       	and	r19, r19
 3a0:	14 f4       	brge	.+4      	; 0x3a6 <main+0xaa>
 3a2:	21 58       	subi	r18, 0x81	; 129
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	22 0f       	add	r18, r18
 3a8:	23 2f       	mov	r18, r19
 3aa:	22 1f       	adc	r18, r18
 3ac:	33 0b       	sbc	r19, r19
 3ae:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <__data_end>
 3b2:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <__data_end+0x1>
 3b6:	24 1b       	sub	r18, r20
 3b8:	35 0b       	sbc	r19, r21
			
			if (x_pos < -100) x_pos = -100;
 3ba:	8c 39       	cpi	r24, 0x9C	; 156
 3bc:	4f ef       	ldi	r20, 0xFF	; 255
 3be:	94 07       	cpc	r25, r20
 3c0:	24 f0       	brlt	.+8      	; 0x3ca <main+0xce>
			else if (x_pos > 100) x_pos = 100;
 3c2:	85 36       	cpi	r24, 0x65	; 101
 3c4:	91 05       	cpc	r25, r1
 3c6:	24 f4       	brge	.+8      	; 0x3d0 <main+0xd4>
 3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <main+0xd8>
			Read_ADC();
			
			int x_pos = (100*(analog0 - 128))/128 - offset_x;
			int y_pos = (100*(analog1 - 128))/128 - offset_y;
			
			if (x_pos < -100) x_pos = -100;
 3ca:	8c e9       	ldi	r24, 0x9C	; 156
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <main+0xd8>
			else if (x_pos > 100) x_pos = 100;
 3d0:	84 e6       	ldi	r24, 0x64	; 100
 3d2:	90 e0       	ldi	r25, 0x00	; 0
			if (y_pos < -100) y_pos = -100;
 3d4:	2c 39       	cpi	r18, 0x9C	; 156
 3d6:	4f ef       	ldi	r20, 0xFF	; 255
 3d8:	34 07       	cpc	r19, r20
 3da:	24 f0       	brlt	.+8      	; 0x3e4 <main+0xe8>
			else if (y_pos > 100) y_pos = 100;
 3dc:	25 36       	cpi	r18, 0x65	; 101
 3de:	31 05       	cpc	r19, r1
 3e0:	24 f4       	brge	.+8      	; 0x3ea <main+0xee>
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <main+0xf2>
			int x_pos = (100*(analog0 - 128))/128 - offset_x;
			int y_pos = (100*(analog1 - 128))/128 - offset_y;
			
			if (x_pos < -100) x_pos = -100;
			else if (x_pos > 100) x_pos = 100;
			if (y_pos < -100) y_pos = -100;
 3e4:	2c e9       	ldi	r18, 0x9C	; 156
 3e6:	3f ef       	ldi	r19, 0xFF	; 255
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <main+0xf2>
			else if (y_pos > 100) y_pos = 100;
 3ea:	24 e6       	ldi	r18, 0x64	; 100
 3ec:	30 e0       	ldi	r19, 0x00	; 0
					
			printf("%d, %d, %d, %d\n", x_pos, y_pos, analog2, analog3);
 3ee:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <analog3>
 3f2:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <analog2>
 3f6:	1f 92       	push	r1
 3f8:	5f 93       	push	r21
 3fa:	1f 92       	push	r1
 3fc:	4f 93       	push	r20
 3fe:	3f 93       	push	r19
 400:	2f 93       	push	r18
 402:	9f 93       	push	r25
 404:	8f 93       	push	r24
 406:	8e e0       	ldi	r24, 0x0E	; 14
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
 40e:	0e 94 aa 02 	call	0x554	; 0x554 <printf>
			printf("Left: %u     Right: %u\n", button_left, button_right);
 412:	1f 92       	push	r1
 414:	cf 93       	push	r28
 416:	1f 92       	push	r1
 418:	df 93       	push	r29
 41a:	8e e1       	ldi	r24, 0x1E	; 30
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	0e 94 aa 02 	call	0x554	; 0x554 <printf>
 426:	8d b7       	in	r24, 0x3d	; 61
 428:	9e b7       	in	r25, 0x3e	; 62
 42a:	40 96       	adiw	r24, 0x10	; 16
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	9e bf       	out	0x3e, r25	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	8d bf       	out	0x3d, r24	; 61
 436:	7b cf       	rjmp	.-266    	; 0x32e <main+0x32>
		}
		
		else if (received_char == 'c') {
 438:	83 36       	cpi	r24, 0x63	; 99
 43a:	09 f0       	breq	.+2      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 43c:	78 cf       	rjmp	.-272    	; 0x32e <main+0x32>
			int x_pos = (100*analog0 - 12800)/128;
 43e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <analog0>
			int y_pos = (100*analog1 - 12800)/128;
 442:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <analog1>
			
			Calibrate_Joystick();
 446:	0e 94 7c 00 	call	0xf8	; 0xf8 <Calibrate_Joystick>
 44a:	71 cf       	rjmp	.-286    	; 0x32e <main+0x32>

0000044c <__divmodhi4>:
 44c:	97 fb       	bst	r25, 7
 44e:	07 2e       	mov	r0, r23
 450:	16 f4       	brtc	.+4      	; 0x456 <__divmodhi4+0xa>
 452:	00 94       	com	r0
 454:	07 d0       	rcall	.+14     	; 0x464 <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	09 d0       	rcall	.+18     	; 0x46c <__divmodhi4_neg2>
 45a:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodhi4>
 45e:	07 fc       	sbrc	r0, 7
 460:	05 d0       	rcall	.+10     	; 0x46c <__divmodhi4_neg2>
 462:	3e f4       	brtc	.+14     	; 0x472 <__divmodhi4_exit>

00000464 <__divmodhi4_neg1>:
 464:	90 95       	com	r25
 466:	81 95       	neg	r24
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__divmodhi4_neg2>:
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255

00000472 <__divmodhi4_exit>:
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <do_rand>:
 49c:	8f 92       	push	r8
 49e:	9f 92       	push	r9
 4a0:	af 92       	push	r10
 4a2:	bf 92       	push	r11
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	ec 01       	movw	r28, r24
 4b2:	68 81       	ld	r22, Y
 4b4:	79 81       	ldd	r23, Y+1	; 0x01
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ba:	61 15       	cp	r22, r1
 4bc:	71 05       	cpc	r23, r1
 4be:	81 05       	cpc	r24, r1
 4c0:	91 05       	cpc	r25, r1
 4c2:	21 f4       	brne	.+8      	; 0x4cc <do_rand+0x30>
 4c4:	64 e2       	ldi	r22, 0x24	; 36
 4c6:	79 ed       	ldi	r23, 0xD9	; 217
 4c8:	8b e5       	ldi	r24, 0x5B	; 91
 4ca:	97 e0       	ldi	r25, 0x07	; 7
 4cc:	2d e1       	ldi	r18, 0x1D	; 29
 4ce:	33 ef       	ldi	r19, 0xF3	; 243
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodsi4>
 4d8:	49 01       	movw	r8, r18
 4da:	5a 01       	movw	r10, r20
 4dc:	9b 01       	movw	r18, r22
 4de:	ac 01       	movw	r20, r24
 4e0:	a7 ea       	ldi	r26, 0xA7	; 167
 4e2:	b1 e4       	ldi	r27, 0x41	; 65
 4e4:	0e 94 a0 05 	call	0xb40	; 0xb40 <__muluhisi3>
 4e8:	6b 01       	movw	r12, r22
 4ea:	7c 01       	movw	r14, r24
 4ec:	ac ee       	ldi	r26, 0xEC	; 236
 4ee:	b4 ef       	ldi	r27, 0xF4	; 244
 4f0:	a5 01       	movw	r20, r10
 4f2:	94 01       	movw	r18, r8
 4f4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__mulohisi3>
 4f8:	dc 01       	movw	r26, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	8c 0d       	add	r24, r12
 4fe:	9d 1d       	adc	r25, r13
 500:	ae 1d       	adc	r26, r14
 502:	bf 1d       	adc	r27, r15
 504:	b7 ff       	sbrs	r27, 7
 506:	03 c0       	rjmp	.+6      	; 0x50e <__stack+0xf>
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	a1 09       	sbc	r26, r1
 50c:	b0 48       	sbci	r27, 0x80	; 128
 50e:	88 83       	st	Y, r24
 510:	99 83       	std	Y+1, r25	; 0x01
 512:	aa 83       	std	Y+2, r26	; 0x02
 514:	bb 83       	std	Y+3, r27	; 0x03
 516:	9f 77       	andi	r25, 0x7F	; 127
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	df 90       	pop	r13
 522:	cf 90       	pop	r12
 524:	bf 90       	pop	r11
 526:	af 90       	pop	r10
 528:	9f 90       	pop	r9
 52a:	8f 90       	pop	r8
 52c:	08 95       	ret

0000052e <rand_r>:
 52e:	0e 94 4e 02 	call	0x49c	; 0x49c <do_rand>
 532:	08 95       	ret

00000534 <rand>:
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 4e 02 	call	0x49c	; 0x49c <do_rand>
 53c:	08 95       	ret

0000053e <srand>:
 53e:	a0 e0       	ldi	r26, 0x00	; 0
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 546:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 54a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 54e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 552:	08 95       	ret

00000554 <printf>:
 554:	a0 e0       	ldi	r26, 0x00	; 0
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e0 eb       	ldi	r30, 0xB0	; 176
 55a:	f2 e0       	ldi	r31, 0x02	; 2
 55c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__prologue_saves__+0x20>
 560:	ae 01       	movw	r20, r28
 562:	4b 5f       	subi	r20, 0xFB	; 251
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	fa 01       	movw	r30, r20
 568:	61 91       	ld	r22, Z+
 56a:	71 91       	ld	r23, Z+
 56c:	af 01       	movw	r20, r30
 56e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__iob+0x2>
 572:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__iob+0x3>
 576:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <vfprintf>
 57a:	e2 e0       	ldi	r30, 0x02	; 2
 57c:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__epilogue_restores__+0x20>

00000580 <puts>:
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__iob+0x2>
 58c:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <__iob+0x3>
 590:	23 81       	ldd	r18, Z+3	; 0x03
 592:	21 ff       	sbrs	r18, 1
 594:	1b c0       	rjmp	.+54     	; 0x5cc <puts+0x4c>
 596:	8c 01       	movw	r16, r24
 598:	d0 e0       	ldi	r29, 0x00	; 0
 59a:	c0 e0       	ldi	r28, 0x00	; 0
 59c:	f8 01       	movw	r30, r16
 59e:	81 91       	ld	r24, Z+
 5a0:	8f 01       	movw	r16, r30
 5a2:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__iob+0x2>
 5a6:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__iob+0x3>
 5aa:	db 01       	movw	r26, r22
 5ac:	18 96       	adiw	r26, 0x08	; 8
 5ae:	ed 91       	ld	r30, X+
 5b0:	fc 91       	ld	r31, X
 5b2:	19 97       	sbiw	r26, 0x09	; 9
 5b4:	88 23       	and	r24, r24
 5b6:	31 f0       	breq	.+12     	; 0x5c4 <puts+0x44>
 5b8:	09 95       	icall
 5ba:	89 2b       	or	r24, r25
 5bc:	79 f3       	breq	.-34     	; 0x59c <puts+0x1c>
 5be:	df ef       	ldi	r29, 0xFF	; 255
 5c0:	cf ef       	ldi	r28, 0xFF	; 255
 5c2:	ec cf       	rjmp	.-40     	; 0x59c <puts+0x1c>
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	09 95       	icall
 5c8:	89 2b       	or	r24, r25
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <puts+0x52>
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	9f ef       	ldi	r25, 0xFF	; 255
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <puts+0x56>
 5d2:	8d 2f       	mov	r24, r29
 5d4:	9c 2f       	mov	r25, r28
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <vfprintf>:
 5e0:	ab e0       	ldi	r26, 0x0B	; 11
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e6 ef       	ldi	r30, 0xF6	; 246
 5e6:	f2 e0       	ldi	r31, 0x02	; 2
 5e8:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__prologue_saves__>
 5ec:	6c 01       	movw	r12, r24
 5ee:	7b 01       	movw	r14, r22
 5f0:	8a 01       	movw	r16, r20
 5f2:	fc 01       	movw	r30, r24
 5f4:	17 82       	std	Z+7, r1	; 0x07
 5f6:	16 82       	std	Z+6, r1	; 0x06
 5f8:	83 81       	ldd	r24, Z+3	; 0x03
 5fa:	81 ff       	sbrs	r24, 1
 5fc:	cc c1       	rjmp	.+920    	; 0x996 <vfprintf+0x3b6>
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	3c 01       	movw	r6, r24
 604:	f6 01       	movw	r30, r12
 606:	93 81       	ldd	r25, Z+3	; 0x03
 608:	f7 01       	movw	r30, r14
 60a:	93 fd       	sbrc	r25, 3
 60c:	85 91       	lpm	r24, Z+
 60e:	93 ff       	sbrs	r25, 3
 610:	81 91       	ld	r24, Z+
 612:	7f 01       	movw	r14, r30
 614:	88 23       	and	r24, r24
 616:	09 f4       	brne	.+2      	; 0x61a <vfprintf+0x3a>
 618:	ba c1       	rjmp	.+884    	; 0x98e <vfprintf+0x3ae>
 61a:	85 32       	cpi	r24, 0x25	; 37
 61c:	39 f4       	brne	.+14     	; 0x62c <vfprintf+0x4c>
 61e:	93 fd       	sbrc	r25, 3
 620:	85 91       	lpm	r24, Z+
 622:	93 ff       	sbrs	r25, 3
 624:	81 91       	ld	r24, Z+
 626:	7f 01       	movw	r14, r30
 628:	85 32       	cpi	r24, 0x25	; 37
 62a:	29 f4       	brne	.+10     	; 0x636 <vfprintf+0x56>
 62c:	b6 01       	movw	r22, r12
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 634:	e7 cf       	rjmp	.-50     	; 0x604 <vfprintf+0x24>
 636:	91 2c       	mov	r9, r1
 638:	21 2c       	mov	r2, r1
 63a:	31 2c       	mov	r3, r1
 63c:	ff e1       	ldi	r31, 0x1F	; 31
 63e:	f3 15       	cp	r31, r3
 640:	d8 f0       	brcs	.+54     	; 0x678 <vfprintf+0x98>
 642:	8b 32       	cpi	r24, 0x2B	; 43
 644:	79 f0       	breq	.+30     	; 0x664 <vfprintf+0x84>
 646:	38 f4       	brcc	.+14     	; 0x656 <vfprintf+0x76>
 648:	80 32       	cpi	r24, 0x20	; 32
 64a:	79 f0       	breq	.+30     	; 0x66a <vfprintf+0x8a>
 64c:	83 32       	cpi	r24, 0x23	; 35
 64e:	a1 f4       	brne	.+40     	; 0x678 <vfprintf+0x98>
 650:	23 2d       	mov	r18, r3
 652:	20 61       	ori	r18, 0x10	; 16
 654:	1d c0       	rjmp	.+58     	; 0x690 <vfprintf+0xb0>
 656:	8d 32       	cpi	r24, 0x2D	; 45
 658:	61 f0       	breq	.+24     	; 0x672 <vfprintf+0x92>
 65a:	80 33       	cpi	r24, 0x30	; 48
 65c:	69 f4       	brne	.+26     	; 0x678 <vfprintf+0x98>
 65e:	23 2d       	mov	r18, r3
 660:	21 60       	ori	r18, 0x01	; 1
 662:	16 c0       	rjmp	.+44     	; 0x690 <vfprintf+0xb0>
 664:	83 2d       	mov	r24, r3
 666:	82 60       	ori	r24, 0x02	; 2
 668:	38 2e       	mov	r3, r24
 66a:	e3 2d       	mov	r30, r3
 66c:	e4 60       	ori	r30, 0x04	; 4
 66e:	3e 2e       	mov	r3, r30
 670:	2a c0       	rjmp	.+84     	; 0x6c6 <vfprintf+0xe6>
 672:	f3 2d       	mov	r31, r3
 674:	f8 60       	ori	r31, 0x08	; 8
 676:	1d c0       	rjmp	.+58     	; 0x6b2 <vfprintf+0xd2>
 678:	37 fc       	sbrc	r3, 7
 67a:	2d c0       	rjmp	.+90     	; 0x6d6 <vfprintf+0xf6>
 67c:	20 ed       	ldi	r18, 0xD0	; 208
 67e:	28 0f       	add	r18, r24
 680:	2a 30       	cpi	r18, 0x0A	; 10
 682:	40 f0       	brcs	.+16     	; 0x694 <vfprintf+0xb4>
 684:	8e 32       	cpi	r24, 0x2E	; 46
 686:	b9 f4       	brne	.+46     	; 0x6b6 <vfprintf+0xd6>
 688:	36 fc       	sbrc	r3, 6
 68a:	81 c1       	rjmp	.+770    	; 0x98e <vfprintf+0x3ae>
 68c:	23 2d       	mov	r18, r3
 68e:	20 64       	ori	r18, 0x40	; 64
 690:	32 2e       	mov	r3, r18
 692:	19 c0       	rjmp	.+50     	; 0x6c6 <vfprintf+0xe6>
 694:	36 fe       	sbrs	r3, 6
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <vfprintf+0xc4>
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	98 9e       	mul	r9, r24
 69c:	20 0d       	add	r18, r0
 69e:	11 24       	eor	r1, r1
 6a0:	92 2e       	mov	r9, r18
 6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <vfprintf+0xe6>
 6a4:	ea e0       	ldi	r30, 0x0A	; 10
 6a6:	2e 9e       	mul	r2, r30
 6a8:	20 0d       	add	r18, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	22 2e       	mov	r2, r18
 6ae:	f3 2d       	mov	r31, r3
 6b0:	f0 62       	ori	r31, 0x20	; 32
 6b2:	3f 2e       	mov	r3, r31
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <vfprintf+0xe6>
 6b6:	8c 36       	cpi	r24, 0x6C	; 108
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <vfprintf+0xe2>
 6ba:	83 2d       	mov	r24, r3
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	38 2e       	mov	r3, r24
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <vfprintf+0xe6>
 6c2:	88 36       	cpi	r24, 0x68	; 104
 6c4:	41 f4       	brne	.+16     	; 0x6d6 <vfprintf+0xf6>
 6c6:	f7 01       	movw	r30, r14
 6c8:	93 fd       	sbrc	r25, 3
 6ca:	85 91       	lpm	r24, Z+
 6cc:	93 ff       	sbrs	r25, 3
 6ce:	81 91       	ld	r24, Z+
 6d0:	7f 01       	movw	r14, r30
 6d2:	81 11       	cpse	r24, r1
 6d4:	b3 cf       	rjmp	.-154    	; 0x63c <vfprintf+0x5c>
 6d6:	98 2f       	mov	r25, r24
 6d8:	9f 7d       	andi	r25, 0xDF	; 223
 6da:	95 54       	subi	r25, 0x45	; 69
 6dc:	93 30       	cpi	r25, 0x03	; 3
 6de:	28 f4       	brcc	.+10     	; 0x6ea <vfprintf+0x10a>
 6e0:	0c 5f       	subi	r16, 0xFC	; 252
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	9f e3       	ldi	r25, 0x3F	; 63
 6e6:	99 83       	std	Y+1, r25	; 0x01
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <vfprintf+0x124>
 6ea:	83 36       	cpi	r24, 0x63	; 99
 6ec:	31 f0       	breq	.+12     	; 0x6fa <vfprintf+0x11a>
 6ee:	83 37       	cpi	r24, 0x73	; 115
 6f0:	71 f0       	breq	.+28     	; 0x70e <vfprintf+0x12e>
 6f2:	83 35       	cpi	r24, 0x53	; 83
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <vfprintf+0x118>
 6f6:	59 c0       	rjmp	.+178    	; 0x7aa <vfprintf+0x1ca>
 6f8:	21 c0       	rjmp	.+66     	; 0x73c <vfprintf+0x15c>
 6fa:	f8 01       	movw	r30, r16
 6fc:	80 81       	ld	r24, Z
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	0e 5f       	subi	r16, 0xFE	; 254
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	88 24       	eor	r8, r8
 706:	83 94       	inc	r8
 708:	91 2c       	mov	r9, r1
 70a:	53 01       	movw	r10, r6
 70c:	13 c0       	rjmp	.+38     	; 0x734 <vfprintf+0x154>
 70e:	28 01       	movw	r4, r16
 710:	f2 e0       	ldi	r31, 0x02	; 2
 712:	4f 0e       	add	r4, r31
 714:	51 1c       	adc	r5, r1
 716:	f8 01       	movw	r30, r16
 718:	a0 80       	ld	r10, Z
 71a:	b1 80       	ldd	r11, Z+1	; 0x01
 71c:	36 fe       	sbrs	r3, 6
 71e:	03 c0       	rjmp	.+6      	; 0x726 <vfprintf+0x146>
 720:	69 2d       	mov	r22, r9
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0x14a>
 726:	6f ef       	ldi	r22, 0xFF	; 255
 728:	7f ef       	ldi	r23, 0xFF	; 255
 72a:	c5 01       	movw	r24, r10
 72c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <strnlen>
 730:	4c 01       	movw	r8, r24
 732:	82 01       	movw	r16, r4
 734:	f3 2d       	mov	r31, r3
 736:	ff 77       	andi	r31, 0x7F	; 127
 738:	3f 2e       	mov	r3, r31
 73a:	16 c0       	rjmp	.+44     	; 0x768 <vfprintf+0x188>
 73c:	28 01       	movw	r4, r16
 73e:	22 e0       	ldi	r18, 0x02	; 2
 740:	42 0e       	add	r4, r18
 742:	51 1c       	adc	r5, r1
 744:	f8 01       	movw	r30, r16
 746:	a0 80       	ld	r10, Z
 748:	b1 80       	ldd	r11, Z+1	; 0x01
 74a:	36 fe       	sbrs	r3, 6
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x174>
 74e:	69 2d       	mov	r22, r9
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x178>
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	7f ef       	ldi	r23, 0xFF	; 255
 758:	c5 01       	movw	r24, r10
 75a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <strnlen_P>
 75e:	4c 01       	movw	r8, r24
 760:	f3 2d       	mov	r31, r3
 762:	f0 68       	ori	r31, 0x80	; 128
 764:	3f 2e       	mov	r3, r31
 766:	82 01       	movw	r16, r4
 768:	33 fc       	sbrc	r3, 3
 76a:	1b c0       	rjmp	.+54     	; 0x7a2 <vfprintf+0x1c2>
 76c:	82 2d       	mov	r24, r2
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	88 16       	cp	r8, r24
 772:	99 06       	cpc	r9, r25
 774:	b0 f4       	brcc	.+44     	; 0x7a2 <vfprintf+0x1c2>
 776:	b6 01       	movw	r22, r12
 778:	80 e2       	ldi	r24, 0x20	; 32
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 780:	2a 94       	dec	r2
 782:	f4 cf       	rjmp	.-24     	; 0x76c <vfprintf+0x18c>
 784:	f5 01       	movw	r30, r10
 786:	37 fc       	sbrc	r3, 7
 788:	85 91       	lpm	r24, Z+
 78a:	37 fe       	sbrs	r3, 7
 78c:	81 91       	ld	r24, Z+
 78e:	5f 01       	movw	r10, r30
 790:	b6 01       	movw	r22, r12
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 798:	21 10       	cpse	r2, r1
 79a:	2a 94       	dec	r2
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	82 1a       	sub	r8, r18
 7a0:	91 08       	sbc	r9, r1
 7a2:	81 14       	cp	r8, r1
 7a4:	91 04       	cpc	r9, r1
 7a6:	71 f7       	brne	.-36     	; 0x784 <vfprintf+0x1a4>
 7a8:	e8 c0       	rjmp	.+464    	; 0x97a <vfprintf+0x39a>
 7aa:	84 36       	cpi	r24, 0x64	; 100
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <vfprintf+0x1d2>
 7ae:	89 36       	cpi	r24, 0x69	; 105
 7b0:	41 f5       	brne	.+80     	; 0x802 <vfprintf+0x222>
 7b2:	f8 01       	movw	r30, r16
 7b4:	37 fe       	sbrs	r3, 7
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <vfprintf+0x1e6>
 7b8:	60 81       	ld	r22, Z
 7ba:	71 81       	ldd	r23, Z+1	; 0x01
 7bc:	82 81       	ldd	r24, Z+2	; 0x02
 7be:	93 81       	ldd	r25, Z+3	; 0x03
 7c0:	0c 5f       	subi	r16, 0xFC	; 252
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <vfprintf+0x1f6>
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	07 2e       	mov	r0, r23
 7cc:	00 0c       	add	r0, r0
 7ce:	88 0b       	sbc	r24, r24
 7d0:	99 0b       	sbc	r25, r25
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	f3 2d       	mov	r31, r3
 7d8:	ff 76       	andi	r31, 0x6F	; 111
 7da:	3f 2e       	mov	r3, r31
 7dc:	97 ff       	sbrs	r25, 7
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <vfprintf+0x212>
 7e0:	90 95       	com	r25
 7e2:	80 95       	com	r24
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	f0 68       	ori	r31, 0x80	; 128
 7f0:	3f 2e       	mov	r3, r31
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	a3 01       	movw	r20, r6
 7f8:	0e 94 23 05 	call	0xa46	; 0xa46 <__ultoa_invert>
 7fc:	88 2e       	mov	r8, r24
 7fe:	86 18       	sub	r8, r6
 800:	45 c0       	rjmp	.+138    	; 0x88c <vfprintf+0x2ac>
 802:	85 37       	cpi	r24, 0x75	; 117
 804:	31 f4       	brne	.+12     	; 0x812 <vfprintf+0x232>
 806:	23 2d       	mov	r18, r3
 808:	2f 7e       	andi	r18, 0xEF	; 239
 80a:	b2 2e       	mov	r11, r18
 80c:	2a e0       	ldi	r18, 0x0A	; 10
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	25 c0       	rjmp	.+74     	; 0x85c <vfprintf+0x27c>
 812:	93 2d       	mov	r25, r3
 814:	99 7f       	andi	r25, 0xF9	; 249
 816:	b9 2e       	mov	r11, r25
 818:	8f 36       	cpi	r24, 0x6F	; 111
 81a:	c1 f0       	breq	.+48     	; 0x84c <vfprintf+0x26c>
 81c:	18 f4       	brcc	.+6      	; 0x824 <vfprintf+0x244>
 81e:	88 35       	cpi	r24, 0x58	; 88
 820:	79 f0       	breq	.+30     	; 0x840 <vfprintf+0x260>
 822:	b5 c0       	rjmp	.+362    	; 0x98e <vfprintf+0x3ae>
 824:	80 37       	cpi	r24, 0x70	; 112
 826:	19 f0       	breq	.+6      	; 0x82e <vfprintf+0x24e>
 828:	88 37       	cpi	r24, 0x78	; 120
 82a:	21 f0       	breq	.+8      	; 0x834 <vfprintf+0x254>
 82c:	b0 c0       	rjmp	.+352    	; 0x98e <vfprintf+0x3ae>
 82e:	e9 2f       	mov	r30, r25
 830:	e0 61       	ori	r30, 0x10	; 16
 832:	be 2e       	mov	r11, r30
 834:	b4 fe       	sbrs	r11, 4
 836:	0d c0       	rjmp	.+26     	; 0x852 <vfprintf+0x272>
 838:	fb 2d       	mov	r31, r11
 83a:	f4 60       	ori	r31, 0x04	; 4
 83c:	bf 2e       	mov	r11, r31
 83e:	09 c0       	rjmp	.+18     	; 0x852 <vfprintf+0x272>
 840:	34 fe       	sbrs	r3, 4
 842:	0a c0       	rjmp	.+20     	; 0x858 <vfprintf+0x278>
 844:	29 2f       	mov	r18, r25
 846:	26 60       	ori	r18, 0x06	; 6
 848:	b2 2e       	mov	r11, r18
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0x278>
 84c:	28 e0       	ldi	r18, 0x08	; 8
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	05 c0       	rjmp	.+10     	; 0x85c <vfprintf+0x27c>
 852:	20 e1       	ldi	r18, 0x10	; 16
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0x27c>
 858:	20 e1       	ldi	r18, 0x10	; 16
 85a:	32 e0       	ldi	r19, 0x02	; 2
 85c:	f8 01       	movw	r30, r16
 85e:	b7 fe       	sbrs	r11, 7
 860:	07 c0       	rjmp	.+14     	; 0x870 <vfprintf+0x290>
 862:	60 81       	ld	r22, Z
 864:	71 81       	ldd	r23, Z+1	; 0x01
 866:	82 81       	ldd	r24, Z+2	; 0x02
 868:	93 81       	ldd	r25, Z+3	; 0x03
 86a:	0c 5f       	subi	r16, 0xFC	; 252
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	06 c0       	rjmp	.+12     	; 0x87c <vfprintf+0x29c>
 870:	60 81       	ld	r22, Z
 872:	71 81       	ldd	r23, Z+1	; 0x01
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 5f       	subi	r16, 0xFE	; 254
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	a3 01       	movw	r20, r6
 87e:	0e 94 23 05 	call	0xa46	; 0xa46 <__ultoa_invert>
 882:	88 2e       	mov	r8, r24
 884:	86 18       	sub	r8, r6
 886:	fb 2d       	mov	r31, r11
 888:	ff 77       	andi	r31, 0x7F	; 127
 88a:	3f 2e       	mov	r3, r31
 88c:	36 fe       	sbrs	r3, 6
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <vfprintf+0x2ca>
 890:	23 2d       	mov	r18, r3
 892:	2e 7f       	andi	r18, 0xFE	; 254
 894:	a2 2e       	mov	r10, r18
 896:	89 14       	cp	r8, r9
 898:	58 f4       	brcc	.+22     	; 0x8b0 <vfprintf+0x2d0>
 89a:	34 fe       	sbrs	r3, 4
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <vfprintf+0x2d4>
 89e:	32 fc       	sbrc	r3, 2
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x2d4>
 8a2:	83 2d       	mov	r24, r3
 8a4:	8e 7e       	andi	r24, 0xEE	; 238
 8a6:	a8 2e       	mov	r10, r24
 8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <vfprintf+0x2d4>
 8aa:	b8 2c       	mov	r11, r8
 8ac:	a3 2c       	mov	r10, r3
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <vfprintf+0x2d6>
 8b0:	b8 2c       	mov	r11, r8
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <vfprintf+0x2d6>
 8b4:	b9 2c       	mov	r11, r9
 8b6:	a4 fe       	sbrs	r10, 4
 8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <vfprintf+0x2f8>
 8ba:	fe 01       	movw	r30, r28
 8bc:	e8 0d       	add	r30, r8
 8be:	f1 1d       	adc	r31, r1
 8c0:	80 81       	ld	r24, Z
 8c2:	80 33       	cpi	r24, 0x30	; 48
 8c4:	21 f4       	brne	.+8      	; 0x8ce <vfprintf+0x2ee>
 8c6:	9a 2d       	mov	r25, r10
 8c8:	99 7e       	andi	r25, 0xE9	; 233
 8ca:	a9 2e       	mov	r10, r25
 8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <vfprintf+0x300>
 8ce:	a2 fe       	sbrs	r10, 2
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <vfprintf+0x2fe>
 8d2:	b3 94       	inc	r11
 8d4:	b3 94       	inc	r11
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <vfprintf+0x300>
 8d8:	8a 2d       	mov	r24, r10
 8da:	86 78       	andi	r24, 0x86	; 134
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <vfprintf+0x300>
 8de:	b3 94       	inc	r11
 8e0:	a3 fc       	sbrc	r10, 3
 8e2:	11 c0       	rjmp	.+34     	; 0x906 <vfprintf+0x326>
 8e4:	a0 fe       	sbrs	r10, 0
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x314>
 8e8:	b2 14       	cp	r11, r2
 8ea:	88 f4       	brcc	.+34     	; 0x90e <vfprintf+0x32e>
 8ec:	28 0c       	add	r2, r8
 8ee:	92 2c       	mov	r9, r2
 8f0:	9b 18       	sub	r9, r11
 8f2:	0e c0       	rjmp	.+28     	; 0x910 <vfprintf+0x330>
 8f4:	b2 14       	cp	r11, r2
 8f6:	60 f4       	brcc	.+24     	; 0x910 <vfprintf+0x330>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 902:	b3 94       	inc	r11
 904:	f7 cf       	rjmp	.-18     	; 0x8f4 <vfprintf+0x314>
 906:	b2 14       	cp	r11, r2
 908:	18 f4       	brcc	.+6      	; 0x910 <vfprintf+0x330>
 90a:	2b 18       	sub	r2, r11
 90c:	02 c0       	rjmp	.+4      	; 0x912 <vfprintf+0x332>
 90e:	98 2c       	mov	r9, r8
 910:	21 2c       	mov	r2, r1
 912:	a4 fe       	sbrs	r10, 4
 914:	10 c0       	rjmp	.+32     	; 0x936 <vfprintf+0x356>
 916:	b6 01       	movw	r22, r12
 918:	80 e3       	ldi	r24, 0x30	; 48
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 920:	a2 fe       	sbrs	r10, 2
 922:	17 c0       	rjmp	.+46     	; 0x952 <vfprintf+0x372>
 924:	a1 fc       	sbrc	r10, 1
 926:	03 c0       	rjmp	.+6      	; 0x92e <vfprintf+0x34e>
 928:	88 e7       	ldi	r24, 0x78	; 120
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x352>
 92e:	88 e5       	ldi	r24, 0x58	; 88
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	b6 01       	movw	r22, r12
 934:	0c c0       	rjmp	.+24     	; 0x94e <vfprintf+0x36e>
 936:	8a 2d       	mov	r24, r10
 938:	86 78       	andi	r24, 0x86	; 134
 93a:	59 f0       	breq	.+22     	; 0x952 <vfprintf+0x372>
 93c:	a1 fe       	sbrs	r10, 1
 93e:	02 c0       	rjmp	.+4      	; 0x944 <vfprintf+0x364>
 940:	8b e2       	ldi	r24, 0x2B	; 43
 942:	01 c0       	rjmp	.+2      	; 0x946 <vfprintf+0x366>
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	a7 fc       	sbrc	r10, 7
 948:	8d e2       	ldi	r24, 0x2D	; 45
 94a:	b6 01       	movw	r22, r12
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 952:	89 14       	cp	r8, r9
 954:	38 f4       	brcc	.+14     	; 0x964 <vfprintf+0x384>
 956:	b6 01       	movw	r22, r12
 958:	80 e3       	ldi	r24, 0x30	; 48
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 960:	9a 94       	dec	r9
 962:	f7 cf       	rjmp	.-18     	; 0x952 <vfprintf+0x372>
 964:	8a 94       	dec	r8
 966:	f3 01       	movw	r30, r6
 968:	e8 0d       	add	r30, r8
 96a:	f1 1d       	adc	r31, r1
 96c:	80 81       	ld	r24, Z
 96e:	b6 01       	movw	r22, r12
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 976:	81 10       	cpse	r8, r1
 978:	f5 cf       	rjmp	.-22     	; 0x964 <vfprintf+0x384>
 97a:	22 20       	and	r2, r2
 97c:	09 f4       	brne	.+2      	; 0x980 <vfprintf+0x3a0>
 97e:	42 ce       	rjmp	.-892    	; 0x604 <vfprintf+0x24>
 980:	b6 01       	movw	r22, r12
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 e7 04 	call	0x9ce	; 0x9ce <fputc>
 98a:	2a 94       	dec	r2
 98c:	f6 cf       	rjmp	.-20     	; 0x97a <vfprintf+0x39a>
 98e:	f6 01       	movw	r30, r12
 990:	86 81       	ldd	r24, Z+6	; 0x06
 992:	97 81       	ldd	r25, Z+7	; 0x07
 994:	02 c0       	rjmp	.+4      	; 0x99a <vfprintf+0x3ba>
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	2b 96       	adiw	r28, 0x0b	; 11
 99c:	e2 e1       	ldi	r30, 0x12	; 18
 99e:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__epilogue_restores__>

000009a2 <strnlen_P>:
 9a2:	fc 01       	movw	r30, r24
 9a4:	05 90       	lpm	r0, Z+
 9a6:	61 50       	subi	r22, 0x01	; 1
 9a8:	70 40       	sbci	r23, 0x00	; 0
 9aa:	01 10       	cpse	r0, r1
 9ac:	d8 f7       	brcc	.-10     	; 0x9a4 <strnlen_P+0x2>
 9ae:	80 95       	com	r24
 9b0:	90 95       	com	r25
 9b2:	8e 0f       	add	r24, r30
 9b4:	9f 1f       	adc	r25, r31
 9b6:	08 95       	ret

000009b8 <strnlen>:
 9b8:	fc 01       	movw	r30, r24
 9ba:	61 50       	subi	r22, 0x01	; 1
 9bc:	70 40       	sbci	r23, 0x00	; 0
 9be:	01 90       	ld	r0, Z+
 9c0:	01 10       	cpse	r0, r1
 9c2:	d8 f7       	brcc	.-10     	; 0x9ba <strnlen+0x2>
 9c4:	80 95       	com	r24
 9c6:	90 95       	com	r25
 9c8:	8e 0f       	add	r24, r30
 9ca:	9f 1f       	adc	r25, r31
 9cc:	08 95       	ret

000009ce <fputc>:
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	fb 01       	movw	r30, r22
 9d8:	23 81       	ldd	r18, Z+3	; 0x03
 9da:	21 fd       	sbrc	r18, 1
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <fputc+0x16>
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	2c c0       	rjmp	.+88     	; 0xa3c <fputc+0x6e>
 9e4:	22 ff       	sbrs	r18, 2
 9e6:	16 c0       	rjmp	.+44     	; 0xa14 <fputc+0x46>
 9e8:	46 81       	ldd	r20, Z+6	; 0x06
 9ea:	57 81       	ldd	r21, Z+7	; 0x07
 9ec:	24 81       	ldd	r18, Z+4	; 0x04
 9ee:	35 81       	ldd	r19, Z+5	; 0x05
 9f0:	42 17       	cp	r20, r18
 9f2:	53 07       	cpc	r21, r19
 9f4:	44 f4       	brge	.+16     	; 0xa06 <fputc+0x38>
 9f6:	a0 81       	ld	r26, Z
 9f8:	b1 81       	ldd	r27, Z+1	; 0x01
 9fa:	9d 01       	movw	r18, r26
 9fc:	2f 5f       	subi	r18, 0xFF	; 255
 9fe:	3f 4f       	sbci	r19, 0xFF	; 255
 a00:	31 83       	std	Z+1, r19	; 0x01
 a02:	20 83       	st	Z, r18
 a04:	8c 93       	st	X, r24
 a06:	26 81       	ldd	r18, Z+6	; 0x06
 a08:	37 81       	ldd	r19, Z+7	; 0x07
 a0a:	2f 5f       	subi	r18, 0xFF	; 255
 a0c:	3f 4f       	sbci	r19, 0xFF	; 255
 a0e:	37 83       	std	Z+7, r19	; 0x07
 a10:	26 83       	std	Z+6, r18	; 0x06
 a12:	14 c0       	rjmp	.+40     	; 0xa3c <fputc+0x6e>
 a14:	8b 01       	movw	r16, r22
 a16:	ec 01       	movw	r28, r24
 a18:	fb 01       	movw	r30, r22
 a1a:	00 84       	ldd	r0, Z+8	; 0x08
 a1c:	f1 85       	ldd	r31, Z+9	; 0x09
 a1e:	e0 2d       	mov	r30, r0
 a20:	09 95       	icall
 a22:	89 2b       	or	r24, r25
 a24:	e1 f6       	brne	.-72     	; 0x9de <fputc+0x10>
 a26:	d8 01       	movw	r26, r16
 a28:	16 96       	adiw	r26, 0x06	; 6
 a2a:	8d 91       	ld	r24, X+
 a2c:	9c 91       	ld	r25, X
 a2e:	17 97       	sbiw	r26, 0x07	; 7
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	17 96       	adiw	r26, 0x07	; 7
 a34:	9c 93       	st	X, r25
 a36:	8e 93       	st	-X, r24
 a38:	16 97       	sbiw	r26, 0x06	; 6
 a3a:	ce 01       	movw	r24, r28
 a3c:	df 91       	pop	r29
 a3e:	cf 91       	pop	r28
 a40:	1f 91       	pop	r17
 a42:	0f 91       	pop	r16
 a44:	08 95       	ret

00000a46 <__ultoa_invert>:
 a46:	fa 01       	movw	r30, r20
 a48:	aa 27       	eor	r26, r26
 a4a:	28 30       	cpi	r18, 0x08	; 8
 a4c:	51 f1       	breq	.+84     	; 0xaa2 <__ultoa_invert+0x5c>
 a4e:	20 31       	cpi	r18, 0x10	; 16
 a50:	81 f1       	breq	.+96     	; 0xab2 <__ultoa_invert+0x6c>
 a52:	e8 94       	clt
 a54:	6f 93       	push	r22
 a56:	6e 7f       	andi	r22, 0xFE	; 254
 a58:	6e 5f       	subi	r22, 0xFE	; 254
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	af 4f       	sbci	r26, 0xFF	; 255
 a62:	b1 e0       	ldi	r27, 0x01	; 1
 a64:	3e d0       	rcall	.+124    	; 0xae2 <__ultoa_invert+0x9c>
 a66:	b4 e0       	ldi	r27, 0x04	; 4
 a68:	3c d0       	rcall	.+120    	; 0xae2 <__ultoa_invert+0x9c>
 a6a:	67 0f       	add	r22, r23
 a6c:	78 1f       	adc	r23, r24
 a6e:	89 1f       	adc	r24, r25
 a70:	9a 1f       	adc	r25, r26
 a72:	a1 1d       	adc	r26, r1
 a74:	68 0f       	add	r22, r24
 a76:	79 1f       	adc	r23, r25
 a78:	8a 1f       	adc	r24, r26
 a7a:	91 1d       	adc	r25, r1
 a7c:	a1 1d       	adc	r26, r1
 a7e:	6a 0f       	add	r22, r26
 a80:	71 1d       	adc	r23, r1
 a82:	81 1d       	adc	r24, r1
 a84:	91 1d       	adc	r25, r1
 a86:	a1 1d       	adc	r26, r1
 a88:	20 d0       	rcall	.+64     	; 0xaca <__ultoa_invert+0x84>
 a8a:	09 f4       	brne	.+2      	; 0xa8e <__ultoa_invert+0x48>
 a8c:	68 94       	set
 a8e:	3f 91       	pop	r19
 a90:	2a e0       	ldi	r18, 0x0A	; 10
 a92:	26 9f       	mul	r18, r22
 a94:	11 24       	eor	r1, r1
 a96:	30 19       	sub	r19, r0
 a98:	30 5d       	subi	r19, 0xD0	; 208
 a9a:	31 93       	st	Z+, r19
 a9c:	de f6       	brtc	.-74     	; 0xa54 <__ultoa_invert+0xe>
 a9e:	cf 01       	movw	r24, r30
 aa0:	08 95       	ret
 aa2:	46 2f       	mov	r20, r22
 aa4:	47 70       	andi	r20, 0x07	; 7
 aa6:	40 5d       	subi	r20, 0xD0	; 208
 aa8:	41 93       	st	Z+, r20
 aaa:	b3 e0       	ldi	r27, 0x03	; 3
 aac:	0f d0       	rcall	.+30     	; 0xacc <__ultoa_invert+0x86>
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__ultoa_invert+0x5c>
 ab0:	f6 cf       	rjmp	.-20     	; 0xa9e <__ultoa_invert+0x58>
 ab2:	46 2f       	mov	r20, r22
 ab4:	4f 70       	andi	r20, 0x0F	; 15
 ab6:	40 5d       	subi	r20, 0xD0	; 208
 ab8:	4a 33       	cpi	r20, 0x3A	; 58
 aba:	18 f0       	brcs	.+6      	; 0xac2 <__ultoa_invert+0x7c>
 abc:	49 5d       	subi	r20, 0xD9	; 217
 abe:	31 fd       	sbrc	r19, 1
 ac0:	40 52       	subi	r20, 0x20	; 32
 ac2:	41 93       	st	Z+, r20
 ac4:	02 d0       	rcall	.+4      	; 0xaca <__ultoa_invert+0x84>
 ac6:	a9 f7       	brne	.-22     	; 0xab2 <__ultoa_invert+0x6c>
 ac8:	ea cf       	rjmp	.-44     	; 0xa9e <__ultoa_invert+0x58>
 aca:	b4 e0       	ldi	r27, 0x04	; 4
 acc:	a6 95       	lsr	r26
 ace:	97 95       	ror	r25
 ad0:	87 95       	ror	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	ba 95       	dec	r27
 ad8:	c9 f7       	brne	.-14     	; 0xacc <__ultoa_invert+0x86>
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	61 05       	cpc	r22, r1
 ade:	71 05       	cpc	r23, r1
 ae0:	08 95       	ret
 ae2:	9b 01       	movw	r18, r22
 ae4:	ac 01       	movw	r20, r24
 ae6:	0a 2e       	mov	r0, r26
 ae8:	06 94       	lsr	r0
 aea:	57 95       	ror	r21
 aec:	47 95       	ror	r20
 aee:	37 95       	ror	r19
 af0:	27 95       	ror	r18
 af2:	ba 95       	dec	r27
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__ultoa_invert+0xa2>
 af6:	62 0f       	add	r22, r18
 af8:	73 1f       	adc	r23, r19
 afa:	84 1f       	adc	r24, r20
 afc:	95 1f       	adc	r25, r21
 afe:	a0 1d       	adc	r26, r0
 b00:	08 95       	ret

00000b02 <__divmodsi4>:
 b02:	05 2e       	mov	r0, r21
 b04:	97 fb       	bst	r25, 7
 b06:	1e f4       	brtc	.+6      	; 0xb0e <__divmodsi4+0xc>
 b08:	00 94       	com	r0
 b0a:	0e 94 98 05 	call	0xb30	; 0xb30 <__negsi2>
 b0e:	57 fd       	sbrc	r21, 7
 b10:	07 d0       	rcall	.+14     	; 0xb20 <__divmodsi4_neg2>
 b12:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodsi4>
 b16:	07 fc       	sbrc	r0, 7
 b18:	03 d0       	rcall	.+6      	; 0xb20 <__divmodsi4_neg2>
 b1a:	4e f4       	brtc	.+18     	; 0xb2e <__divmodsi4_exit>
 b1c:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__negsi2>

00000b20 <__divmodsi4_neg2>:
 b20:	50 95       	com	r21
 b22:	40 95       	com	r20
 b24:	30 95       	com	r19
 b26:	21 95       	neg	r18
 b28:	3f 4f       	sbci	r19, 0xFF	; 255
 b2a:	4f 4f       	sbci	r20, 0xFF	; 255
 b2c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b2e <__divmodsi4_exit>:
 b2e:	08 95       	ret

00000b30 <__negsi2>:
 b30:	90 95       	com	r25
 b32:	80 95       	com	r24
 b34:	70 95       	com	r23
 b36:	61 95       	neg	r22
 b38:	7f 4f       	sbci	r23, 0xFF	; 255
 b3a:	8f 4f       	sbci	r24, 0xFF	; 255
 b3c:	9f 4f       	sbci	r25, 0xFF	; 255
 b3e:	08 95       	ret

00000b40 <__muluhisi3>:
 b40:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 b44:	a5 9f       	mul	r26, r21
 b46:	90 0d       	add	r25, r0
 b48:	b4 9f       	mul	r27, r20
 b4a:	90 0d       	add	r25, r0
 b4c:	a4 9f       	mul	r26, r20
 b4e:	80 0d       	add	r24, r0
 b50:	91 1d       	adc	r25, r1
 b52:	11 24       	eor	r1, r1
 b54:	08 95       	ret

00000b56 <__mulshisi3>:
 b56:	b7 ff       	sbrs	r27, 7
 b58:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__muluhisi3>

00000b5c <__mulohisi3>:
 b5c:	0e 94 a0 05 	call	0xb40	; 0xb40 <__muluhisi3>
 b60:	82 1b       	sub	r24, r18
 b62:	93 0b       	sbc	r25, r19
 b64:	08 95       	ret

00000b66 <__prologue_saves__>:
 b66:	2f 92       	push	r2
 b68:	3f 92       	push	r3
 b6a:	4f 92       	push	r4
 b6c:	5f 92       	push	r5
 b6e:	6f 92       	push	r6
 b70:	7f 92       	push	r7
 b72:	8f 92       	push	r8
 b74:	9f 92       	push	r9
 b76:	af 92       	push	r10
 b78:	bf 92       	push	r11
 b7a:	cf 92       	push	r12
 b7c:	df 92       	push	r13
 b7e:	ef 92       	push	r14
 b80:	ff 92       	push	r15
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	ca 1b       	sub	r28, r26
 b90:	db 0b       	sbc	r29, r27
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	f8 94       	cli
 b96:	de bf       	out	0x3e, r29	; 62
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	cd bf       	out	0x3d, r28	; 61
 b9c:	09 94       	ijmp

00000b9e <__epilogue_restores__>:
 b9e:	2a 88       	ldd	r2, Y+18	; 0x12
 ba0:	39 88       	ldd	r3, Y+17	; 0x11
 ba2:	48 88       	ldd	r4, Y+16	; 0x10
 ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
 baa:	8c 84       	ldd	r8, Y+12	; 0x0c
 bac:	9b 84       	ldd	r9, Y+11	; 0x0b
 bae:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb0:	b9 84       	ldd	r11, Y+9	; 0x09
 bb2:	c8 84       	ldd	r12, Y+8	; 0x08
 bb4:	df 80       	ldd	r13, Y+7	; 0x07
 bb6:	ee 80       	ldd	r14, Y+6	; 0x06
 bb8:	fd 80       	ldd	r15, Y+5	; 0x05
 bba:	0c 81       	ldd	r16, Y+4	; 0x04
 bbc:	1b 81       	ldd	r17, Y+3	; 0x03
 bbe:	aa 81       	ldd	r26, Y+2	; 0x02
 bc0:	b9 81       	ldd	r27, Y+1	; 0x01
 bc2:	ce 0f       	add	r28, r30
 bc4:	d1 1d       	adc	r29, r1
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	ed 01       	movw	r28, r26
 bd2:	08 95       	ret

00000bd4 <__udivmodsi4>:
 bd4:	a1 e2       	ldi	r26, 0x21	; 33
 bd6:	1a 2e       	mov	r1, r26
 bd8:	aa 1b       	sub	r26, r26
 bda:	bb 1b       	sub	r27, r27
 bdc:	fd 01       	movw	r30, r26
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <__udivmodsi4_ep>

00000be0 <__udivmodsi4_loop>:
 be0:	aa 1f       	adc	r26, r26
 be2:	bb 1f       	adc	r27, r27
 be4:	ee 1f       	adc	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	a2 17       	cp	r26, r18
 bea:	b3 07       	cpc	r27, r19
 bec:	e4 07       	cpc	r30, r20
 bee:	f5 07       	cpc	r31, r21
 bf0:	20 f0       	brcs	.+8      	; 0xbfa <__udivmodsi4_ep>
 bf2:	a2 1b       	sub	r26, r18
 bf4:	b3 0b       	sbc	r27, r19
 bf6:	e4 0b       	sbc	r30, r20
 bf8:	f5 0b       	sbc	r31, r21

00000bfa <__udivmodsi4_ep>:
 bfa:	66 1f       	adc	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	1a 94       	dec	r1
 c04:	69 f7       	brne	.-38     	; 0xbe0 <__udivmodsi4_loop>
 c06:	60 95       	com	r22
 c08:	70 95       	com	r23
 c0a:	80 95       	com	r24
 c0c:	90 95       	com	r25
 c0e:	9b 01       	movw	r18, r22
 c10:	ac 01       	movw	r20, r24
 c12:	bd 01       	movw	r22, r26
 c14:	cf 01       	movw	r24, r30
 c16:	08 95       	ret

00000c18 <__umulhisi3>:
 c18:	a2 9f       	mul	r26, r18
 c1a:	b0 01       	movw	r22, r0
 c1c:	b3 9f       	mul	r27, r19
 c1e:	c0 01       	movw	r24, r0
 c20:	a3 9f       	mul	r26, r19
 c22:	70 0d       	add	r23, r0
 c24:	81 1d       	adc	r24, r1
 c26:	11 24       	eor	r1, r1
 c28:	91 1d       	adc	r25, r1
 c2a:	b2 9f       	mul	r27, r18
 c2c:	70 0d       	add	r23, r0
 c2e:	81 1d       	adc	r24, r1
 c30:	11 24       	eor	r1, r1
 c32:	91 1d       	adc	r25, r1
 c34:	08 95       	ret

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>


PingPongLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  0000099c  00000a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080020e  0080020e  00000b3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000932  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bd  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000338  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000028d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e9       	ldi	r30, 0x9C	; 156
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 30       	cpi	r26, 0x0E	; 14
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e0       	ldi	r26, 0x0E	; 14
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  a6:	0c 94 cc 04 	jmp	0x998	; 0x998 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
		case '7': PORTA = 0b01000000; break;
		case '8': PORTA = 0b10000000; break;
		
		default:
		printf("No port values changed");
		break;
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	08 95       	ret

000000be <USART_Init>:
  be:	90 bd       	out	0x20, r25	; 32
  c0:	89 b9       	out	0x09, r24	; 9
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	8e ea       	ldi	r24, 0xAE	; 174
  c8:	80 bd       	out	0x20, r24	; 32
  ca:	08 95       	ret

000000cc <SRAM_test>:
	}
}

void SRAM_test(void)
{
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
  d8:	89 e2       	ldi	r24, 0x29	; 41
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  e0:	0e 94 4b 01 	call	0x296	; 0x296 <rand>
  e4:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  f2:	20 c0       	rjmp	.+64     	; 0x134 <SRAM_test+0x68>
		uint8_t some_value = rand();
  f4:	0e 94 4b 01 	call	0x296	; 0x296 <rand>
		ext_ram[i] = some_value;
  f8:	fe 01       	movw	r30, r28
  fa:	f8 5e       	subi	r31, 0xE8	; 232
  fc:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
  fe:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 100:	28 17       	cp	r18, r24
 102:	b9 f0       	breq	.+46     	; 0x132 <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 104:	99 27       	eor	r25, r25
 106:	9f 93       	push	r25
 108:	8f 93       	push	r24
 10a:	1f 92       	push	r1
 10c:	2f 93       	push	r18
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	9f 93       	push	r25
 118:	8f 93       	push	r24
 11a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <printf>
			write_errors++;
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	8d b7       	in	r24, 0x3d	; 61
 124:	9e b7       	in	r25, 0x3e	; 62
 126:	08 96       	adiw	r24, 0x08	; 8
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	9e bf       	out	0x3e, r25	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c1 15       	cp	r28, r1
 136:	98 e0       	ldi	r25, 0x08	; 8
 138:	d9 07       	cpc	r29, r25
 13a:	e0 f2       	brcs	.-72     	; 0xf4 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 13c:	c7 01       	movw	r24, r14
 13e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 146:	e1 2c       	mov	r14, r1
 148:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 14a:	20 c0       	rjmp	.+64     	; 0x18c <SRAM_test+0xc0>
		uint8_t some_value = rand();
 14c:	0e 94 4b 01 	call	0x296	; 0x296 <rand>
		uint8_t retreived_value = ext_ram[i];
 150:	fe 01       	movw	r30, r28
 152:	f8 5e       	subi	r31, 0xE8	; 232
 154:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 156:	28 17       	cp	r18, r24
 158:	c1 f0       	breq	.+48     	; 0x18a <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 15a:	99 27       	eor	r25, r25
 15c:	9f 93       	push	r25
 15e:	8f 93       	push	r24
 160:	1f 92       	push	r1
 162:	2f 93       	push	r18
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	9f 93       	push	r25
 16e:	8f 93       	push	r24
 170:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <printf>
			retrieval_errors++;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	e8 1a       	sub	r14, r24
 178:	f8 0a       	sbc	r15, r24
 17a:	8d b7       	in	r24, 0x3d	; 61
 17c:	9e b7       	in	r25, 0x3e	; 62
 17e:	08 96       	adiw	r24, 0x08	; 8
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	9e bf       	out	0x3e, r25	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	c1 15       	cp	r28, r1
 18e:	98 e0       	ldi	r25, 0x08	; 8
 190:	d9 07       	cpc	r29, r25
 192:	e0 f2       	brcs	.-72     	; 0x14c <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 194:	ff 92       	push	r15
 196:	ef 92       	push	r14
 198:	1f 93       	push	r17
 19a:	0f 93       	push	r16
 19c:	85 eb       	ldi	r24, 0xB5	; 181
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <printf>
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <main>:
);

int main(void)
{
	// Sets PA0 as output and PA1 as input
	USART_Init(MYUBRR);
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Init>
	DDRA = 0xFF;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 0x02;
 1ce:	86 b1       	in	r24, 0x06	; 6
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	86 b9       	out	0x06, r24	; 6
	
	// Enable external memory interface
	MCUCR |= (1 << SRE);
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	85 bf       	out	0x35, r24	; 53
	// Mask PC7-PC4
	SFIOR |= (1 << XMM2);
 1da:	80 b7       	in	r24, 0x30	; 48
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 bf       	out	0x30, r24	; 48
	
	//USART_Receive();
	stdout = &uart_stdio;
 1e0:	ee e0       	ldi	r30, 0x0E	; 14
 1e2:	f2 e0       	ldi	r31, 0x02	; 2
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	93 83       	std	Z+3, r25	; 0x03
 1ea:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_stdio;
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
	unsigned char received_char;
	//unsigned char rceived_char_old;
	
    while (1)  {

		received_char = USART_Receive();
 1f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Receive>
		// printf("%c", received_char);

		if (received_char == 's') SRAM_test();
 1f4:	83 37       	cpi	r24, 0x73	; 115
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x2e>
 1f8:	0e 94 66 00 	call	0xcc	; 0xcc <SRAM_test>
 1fc:	f9 cf       	rjmp	.-14     	; 0x1f0 <main+0x2e>

000001fe <do_rand>:
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24
 214:	68 81       	ld	r22, Y
 216:	79 81       	ldd	r23, Y+1	; 0x01
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	9b 81       	ldd	r25, Y+3	; 0x03
 21c:	61 15       	cp	r22, r1
 21e:	71 05       	cpc	r23, r1
 220:	81 05       	cpc	r24, r1
 222:	91 05       	cpc	r25, r1
 224:	21 f4       	brne	.+8      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 226:	64 e2       	ldi	r22, 0x24	; 36
 228:	79 ed       	ldi	r23, 0xD9	; 217
 22a:	8b e5       	ldi	r24, 0x5B	; 91
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	2d e1       	ldi	r18, 0x1D	; 29
 230:	33 ef       	ldi	r19, 0xF3	; 243
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	0e 94 32 04 	call	0x864	; 0x864 <__divmodsi4>
 23a:	49 01       	movw	r8, r18
 23c:	5a 01       	movw	r10, r20
 23e:	9b 01       	movw	r18, r22
 240:	ac 01       	movw	r20, r24
 242:	a7 ea       	ldi	r26, 0xA7	; 167
 244:	b1 e4       	ldi	r27, 0x41	; 65
 246:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__muluhisi3>
 24a:	6b 01       	movw	r12, r22
 24c:	7c 01       	movw	r14, r24
 24e:	ac ee       	ldi	r26, 0xEC	; 236
 250:	b4 ef       	ldi	r27, 0xF4	; 244
 252:	a5 01       	movw	r20, r10
 254:	94 01       	movw	r18, r8
 256:	0e 94 5f 04 	call	0x8be	; 0x8be <__mulohisi3>
 25a:	dc 01       	movw	r26, r24
 25c:	cb 01       	movw	r24, r22
 25e:	8c 0d       	add	r24, r12
 260:	9d 1d       	adc	r25, r13
 262:	ae 1d       	adc	r26, r14
 264:	bf 1d       	adc	r27, r15
 266:	b7 ff       	sbrs	r27, 7
 268:	03 c0       	rjmp	.+6      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	a1 09       	sbc	r26, r1
 26e:	b0 48       	sbci	r27, 0x80	; 128
 270:	88 83       	st	Y, r24
 272:	99 83       	std	Y+1, r25	; 0x01
 274:	aa 83       	std	Y+2, r26	; 0x02
 276:	bb 83       	std	Y+3, r27	; 0x03
 278:	9f 77       	andi	r25, 0x7F	; 127
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	bf 90       	pop	r11
 288:	af 90       	pop	r10
 28a:	9f 90       	pop	r9
 28c:	8f 90       	pop	r8
 28e:	08 95       	ret

00000290 <rand_r>:
 290:	0e 94 ff 00 	call	0x1fe	; 0x1fe <do_rand>
 294:	08 95       	ret

00000296 <rand>:
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <do_rand>
 29e:	08 95       	ret

000002a0 <srand>:
 2a0:	a0 e0       	ldi	r26, 0x00	; 0
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2b4:	08 95       	ret

000002b6 <printf>:
 2b6:	a0 e0       	ldi	r26, 0x00	; 0
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e1 e6       	ldi	r30, 0x61	; 97
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__prologue_saves__+0x20>
 2c2:	ae 01       	movw	r20, r28
 2c4:	4b 5f       	subi	r20, 0xFB	; 251
 2c6:	5f 4f       	sbci	r21, 0xFF	; 255
 2c8:	fa 01       	movw	r30, r20
 2ca:	61 91       	ld	r22, Z+
 2cc:	71 91       	ld	r23, Z+
 2ce:	af 01       	movw	r20, r30
 2d0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end+0x2>
 2d4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x3>
 2d8:	0e 94 a1 01 	call	0x342	; 0x342 <vfprintf>
 2dc:	e2 e0       	ldi	r30, 0x02	; 2
 2de:	0c 94 90 04 	jmp	0x920	; 0x920 <__epilogue_restores__+0x20>

000002e2 <puts>:
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end+0x2>
 2ee:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x3>
 2f2:	23 81       	ldd	r18, Z+3	; 0x03
 2f4:	21 ff       	sbrs	r18, 1
 2f6:	1b c0       	rjmp	.+54     	; 0x32e <puts+0x4c>
 2f8:	8c 01       	movw	r16, r24
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	f8 01       	movw	r30, r16
 300:	81 91       	ld	r24, Z+
 302:	8f 01       	movw	r16, r30
 304:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <__data_end+0x2>
 308:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <__data_end+0x3>
 30c:	db 01       	movw	r26, r22
 30e:	18 96       	adiw	r26, 0x08	; 8
 310:	ed 91       	ld	r30, X+
 312:	fc 91       	ld	r31, X
 314:	19 97       	sbiw	r26, 0x09	; 9
 316:	88 23       	and	r24, r24
 318:	31 f0       	breq	.+12     	; 0x326 <puts+0x44>
 31a:	09 95       	icall
 31c:	89 2b       	or	r24, r25
 31e:	79 f3       	breq	.-34     	; 0x2fe <puts+0x1c>
 320:	df ef       	ldi	r29, 0xFF	; 255
 322:	cf ef       	ldi	r28, 0xFF	; 255
 324:	ec cf       	rjmp	.-40     	; 0x2fe <puts+0x1c>
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	09 95       	icall
 32a:	89 2b       	or	r24, r25
 32c:	19 f0       	breq	.+6      	; 0x334 <puts+0x52>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	02 c0       	rjmp	.+4      	; 0x338 <puts+0x56>
 334:	8d 2f       	mov	r24, r29
 336:	9c 2f       	mov	r25, r28
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <vfprintf>:
 342:	ab e0       	ldi	r26, 0x0B	; 11
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e7 ea       	ldi	r30, 0xA7	; 167
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__prologue_saves__>
 34e:	6c 01       	movw	r12, r24
 350:	7b 01       	movw	r14, r22
 352:	8a 01       	movw	r16, r20
 354:	fc 01       	movw	r30, r24
 356:	17 82       	std	Z+7, r1	; 0x07
 358:	16 82       	std	Z+6, r1	; 0x06
 35a:	83 81       	ldd	r24, Z+3	; 0x03
 35c:	81 ff       	sbrs	r24, 1
 35e:	cc c1       	rjmp	.+920    	; 0x6f8 <__stack+0x1f9>
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	3c 01       	movw	r6, r24
 366:	f6 01       	movw	r30, r12
 368:	93 81       	ldd	r25, Z+3	; 0x03
 36a:	f7 01       	movw	r30, r14
 36c:	93 fd       	sbrc	r25, 3
 36e:	85 91       	lpm	r24, Z+
 370:	93 ff       	sbrs	r25, 3
 372:	81 91       	ld	r24, Z+
 374:	7f 01       	movw	r14, r30
 376:	88 23       	and	r24, r24
 378:	09 f4       	brne	.+2      	; 0x37c <vfprintf+0x3a>
 37a:	ba c1       	rjmp	.+884    	; 0x6f0 <__stack+0x1f1>
 37c:	85 32       	cpi	r24, 0x25	; 37
 37e:	39 f4       	brne	.+14     	; 0x38e <vfprintf+0x4c>
 380:	93 fd       	sbrc	r25, 3
 382:	85 91       	lpm	r24, Z+
 384:	93 ff       	sbrs	r25, 3
 386:	81 91       	ld	r24, Z+
 388:	7f 01       	movw	r14, r30
 38a:	85 32       	cpi	r24, 0x25	; 37
 38c:	29 f4       	brne	.+10     	; 0x398 <vfprintf+0x56>
 38e:	b6 01       	movw	r22, r12
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 396:	e7 cf       	rjmp	.-50     	; 0x366 <vfprintf+0x24>
 398:	91 2c       	mov	r9, r1
 39a:	21 2c       	mov	r2, r1
 39c:	31 2c       	mov	r3, r1
 39e:	ff e1       	ldi	r31, 0x1F	; 31
 3a0:	f3 15       	cp	r31, r3
 3a2:	d8 f0       	brcs	.+54     	; 0x3da <vfprintf+0x98>
 3a4:	8b 32       	cpi	r24, 0x2B	; 43
 3a6:	79 f0       	breq	.+30     	; 0x3c6 <vfprintf+0x84>
 3a8:	38 f4       	brcc	.+14     	; 0x3b8 <vfprintf+0x76>
 3aa:	80 32       	cpi	r24, 0x20	; 32
 3ac:	79 f0       	breq	.+30     	; 0x3cc <vfprintf+0x8a>
 3ae:	83 32       	cpi	r24, 0x23	; 35
 3b0:	a1 f4       	brne	.+40     	; 0x3da <vfprintf+0x98>
 3b2:	23 2d       	mov	r18, r3
 3b4:	20 61       	ori	r18, 0x10	; 16
 3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <vfprintf+0xb0>
 3b8:	8d 32       	cpi	r24, 0x2D	; 45
 3ba:	61 f0       	breq	.+24     	; 0x3d4 <vfprintf+0x92>
 3bc:	80 33       	cpi	r24, 0x30	; 48
 3be:	69 f4       	brne	.+26     	; 0x3da <vfprintf+0x98>
 3c0:	23 2d       	mov	r18, r3
 3c2:	21 60       	ori	r18, 0x01	; 1
 3c4:	16 c0       	rjmp	.+44     	; 0x3f2 <vfprintf+0xb0>
 3c6:	83 2d       	mov	r24, r3
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	38 2e       	mov	r3, r24
 3cc:	e3 2d       	mov	r30, r3
 3ce:	e4 60       	ori	r30, 0x04	; 4
 3d0:	3e 2e       	mov	r3, r30
 3d2:	2a c0       	rjmp	.+84     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3d4:	f3 2d       	mov	r31, r3
 3d6:	f8 60       	ori	r31, 0x08	; 8
 3d8:	1d c0       	rjmp	.+58     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 3da:	37 fc       	sbrc	r3, 7
 3dc:	2d c0       	rjmp	.+90     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 3de:	20 ed       	ldi	r18, 0xD0	; 208
 3e0:	28 0f       	add	r18, r24
 3e2:	2a 30       	cpi	r18, 0x0A	; 10
 3e4:	40 f0       	brcs	.+16     	; 0x3f6 <vfprintf+0xb4>
 3e6:	8e 32       	cpi	r24, 0x2E	; 46
 3e8:	b9 f4       	brne	.+46     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 3ea:	36 fc       	sbrc	r3, 6
 3ec:	81 c1       	rjmp	.+770    	; 0x6f0 <__stack+0x1f1>
 3ee:	23 2d       	mov	r18, r3
 3f0:	20 64       	ori	r18, 0x40	; 64
 3f2:	32 2e       	mov	r3, r18
 3f4:	19 c0       	rjmp	.+50     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3f6:	36 fe       	sbrs	r3, 6
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	98 9e       	mul	r9, r24
 3fe:	20 0d       	add	r18, r0
 400:	11 24       	eor	r1, r1
 402:	92 2e       	mov	r9, r18
 404:	11 c0       	rjmp	.+34     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 406:	ea e0       	ldi	r30, 0x0A	; 10
 408:	2e 9e       	mul	r2, r30
 40a:	20 0d       	add	r18, r0
 40c:	11 24       	eor	r1, r1
 40e:	22 2e       	mov	r2, r18
 410:	f3 2d       	mov	r31, r3
 412:	f0 62       	ori	r31, 0x20	; 32
 414:	3f 2e       	mov	r3, r31
 416:	08 c0       	rjmp	.+16     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 418:	8c 36       	cpi	r24, 0x6C	; 108
 41a:	21 f4       	brne	.+8      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 41c:	83 2d       	mov	r24, r3
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	38 2e       	mov	r3, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 424:	88 36       	cpi	r24, 0x68	; 104
 426:	41 f4       	brne	.+16     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 428:	f7 01       	movw	r30, r14
 42a:	93 fd       	sbrc	r25, 3
 42c:	85 91       	lpm	r24, Z+
 42e:	93 ff       	sbrs	r25, 3
 430:	81 91       	ld	r24, Z+
 432:	7f 01       	movw	r14, r30
 434:	81 11       	cpse	r24, r1
 436:	b3 cf       	rjmp	.-154    	; 0x39e <vfprintf+0x5c>
 438:	98 2f       	mov	r25, r24
 43a:	9f 7d       	andi	r25, 0xDF	; 223
 43c:	95 54       	subi	r25, 0x45	; 69
 43e:	93 30       	cpi	r25, 0x03	; 3
 440:	28 f4       	brcc	.+10     	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
 442:	0c 5f       	subi	r16, 0xFC	; 252
 444:	1f 4f       	sbci	r17, 0xFF	; 255
 446:	9f e3       	ldi	r25, 0x3F	; 63
 448:	99 83       	std	Y+1, r25	; 0x01
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__DATA_REGION_LENGTH__+0x66>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	31 f0       	breq	.+12     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 450:	83 37       	cpi	r24, 0x73	; 115
 452:	71 f0       	breq	.+28     	; 0x470 <__DATA_REGION_LENGTH__+0x70>
 454:	83 35       	cpi	r24, 0x53	; 83
 456:	09 f0       	breq	.+2      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 458:	59 c0       	rjmp	.+178    	; 0x50c <__stack+0xd>
 45a:	21 c0       	rjmp	.+66     	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
 45c:	f8 01       	movw	r30, r16
 45e:	80 81       	ld	r24, Z
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	0e 5f       	subi	r16, 0xFE	; 254
 464:	1f 4f       	sbci	r17, 0xFF	; 255
 466:	88 24       	eor	r8, r8
 468:	83 94       	inc	r8
 46a:	91 2c       	mov	r9, r1
 46c:	53 01       	movw	r10, r6
 46e:	13 c0       	rjmp	.+38     	; 0x496 <__DATA_REGION_LENGTH__+0x96>
 470:	28 01       	movw	r4, r16
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	4f 0e       	add	r4, r31
 476:	51 1c       	adc	r5, r1
 478:	f8 01       	movw	r30, r16
 47a:	a0 80       	ld	r10, Z
 47c:	b1 80       	ldd	r11, Z+1	; 0x01
 47e:	36 fe       	sbrs	r3, 6
 480:	03 c0       	rjmp	.+6      	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 482:	69 2d       	mov	r22, r9
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__DATA_REGION_LENGTH__+0x8c>
 488:	6f ef       	ldi	r22, 0xFF	; 255
 48a:	7f ef       	ldi	r23, 0xFF	; 255
 48c:	c5 01       	movw	r24, r10
 48e:	0e 94 8d 03 	call	0x71a	; 0x71a <strnlen>
 492:	4c 01       	movw	r8, r24
 494:	82 01       	movw	r16, r4
 496:	f3 2d       	mov	r31, r3
 498:	ff 77       	andi	r31, 0x7F	; 127
 49a:	3f 2e       	mov	r3, r31
 49c:	16 c0       	rjmp	.+44     	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
 49e:	28 01       	movw	r4, r16
 4a0:	22 e0       	ldi	r18, 0x02	; 2
 4a2:	42 0e       	add	r4, r18
 4a4:	51 1c       	adc	r5, r1
 4a6:	f8 01       	movw	r30, r16
 4a8:	a0 80       	ld	r10, Z
 4aa:	b1 80       	ldd	r11, Z+1	; 0x01
 4ac:	36 fe       	sbrs	r3, 6
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__DATA_REGION_LENGTH__+0xb6>
 4b0:	69 2d       	mov	r22, r9
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4b6:	6f ef       	ldi	r22, 0xFF	; 255
 4b8:	7f ef       	ldi	r23, 0xFF	; 255
 4ba:	c5 01       	movw	r24, r10
 4bc:	0e 94 82 03 	call	0x704	; 0x704 <strnlen_P>
 4c0:	4c 01       	movw	r8, r24
 4c2:	f3 2d       	mov	r31, r3
 4c4:	f0 68       	ori	r31, 0x80	; 128
 4c6:	3f 2e       	mov	r3, r31
 4c8:	82 01       	movw	r16, r4
 4ca:	33 fc       	sbrc	r3, 3
 4cc:	1b c0       	rjmp	.+54     	; 0x504 <__stack+0x5>
 4ce:	82 2d       	mov	r24, r2
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	88 16       	cp	r8, r24
 4d4:	99 06       	cpc	r9, r25
 4d6:	b0 f4       	brcc	.+44     	; 0x504 <__stack+0x5>
 4d8:	b6 01       	movw	r22, r12
 4da:	80 e2       	ldi	r24, 0x20	; 32
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 4e2:	2a 94       	dec	r2
 4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
 4e6:	f5 01       	movw	r30, r10
 4e8:	37 fc       	sbrc	r3, 7
 4ea:	85 91       	lpm	r24, Z+
 4ec:	37 fe       	sbrs	r3, 7
 4ee:	81 91       	ld	r24, Z+
 4f0:	5f 01       	movw	r10, r30
 4f2:	b6 01       	movw	r22, r12
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 4fa:	21 10       	cpse	r2, r1
 4fc:	2a 94       	dec	r2
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	82 1a       	sub	r8, r18
 502:	91 08       	sbc	r9, r1
 504:	81 14       	cp	r8, r1
 506:	91 04       	cpc	r9, r1
 508:	71 f7       	brne	.-36     	; 0x4e6 <__DATA_REGION_LENGTH__+0xe6>
 50a:	e8 c0       	rjmp	.+464    	; 0x6dc <__stack+0x1dd>
 50c:	84 36       	cpi	r24, 0x64	; 100
 50e:	11 f0       	breq	.+4      	; 0x514 <__stack+0x15>
 510:	89 36       	cpi	r24, 0x69	; 105
 512:	41 f5       	brne	.+80     	; 0x564 <__stack+0x65>
 514:	f8 01       	movw	r30, r16
 516:	37 fe       	sbrs	r3, 7
 518:	07 c0       	rjmp	.+14     	; 0x528 <__stack+0x29>
 51a:	60 81       	ld	r22, Z
 51c:	71 81       	ldd	r23, Z+1	; 0x01
 51e:	82 81       	ldd	r24, Z+2	; 0x02
 520:	93 81       	ldd	r25, Z+3	; 0x03
 522:	0c 5f       	subi	r16, 0xFC	; 252
 524:	1f 4f       	sbci	r17, 0xFF	; 255
 526:	08 c0       	rjmp	.+16     	; 0x538 <__stack+0x39>
 528:	60 81       	ld	r22, Z
 52a:	71 81       	ldd	r23, Z+1	; 0x01
 52c:	07 2e       	mov	r0, r23
 52e:	00 0c       	add	r0, r0
 530:	88 0b       	sbc	r24, r24
 532:	99 0b       	sbc	r25, r25
 534:	0e 5f       	subi	r16, 0xFE	; 254
 536:	1f 4f       	sbci	r17, 0xFF	; 255
 538:	f3 2d       	mov	r31, r3
 53a:	ff 76       	andi	r31, 0x6F	; 111
 53c:	3f 2e       	mov	r3, r31
 53e:	97 ff       	sbrs	r25, 7
 540:	09 c0       	rjmp	.+18     	; 0x554 <__stack+0x55>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	f0 68       	ori	r31, 0x80	; 128
 552:	3f 2e       	mov	r3, r31
 554:	2a e0       	ldi	r18, 0x0A	; 10
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	a3 01       	movw	r20, r6
 55a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__ultoa_invert>
 55e:	88 2e       	mov	r8, r24
 560:	86 18       	sub	r8, r6
 562:	45 c0       	rjmp	.+138    	; 0x5ee <__stack+0xef>
 564:	85 37       	cpi	r24, 0x75	; 117
 566:	31 f4       	brne	.+12     	; 0x574 <__stack+0x75>
 568:	23 2d       	mov	r18, r3
 56a:	2f 7e       	andi	r18, 0xEF	; 239
 56c:	b2 2e       	mov	r11, r18
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	25 c0       	rjmp	.+74     	; 0x5be <__stack+0xbf>
 574:	93 2d       	mov	r25, r3
 576:	99 7f       	andi	r25, 0xF9	; 249
 578:	b9 2e       	mov	r11, r25
 57a:	8f 36       	cpi	r24, 0x6F	; 111
 57c:	c1 f0       	breq	.+48     	; 0x5ae <__stack+0xaf>
 57e:	18 f4       	brcc	.+6      	; 0x586 <__stack+0x87>
 580:	88 35       	cpi	r24, 0x58	; 88
 582:	79 f0       	breq	.+30     	; 0x5a2 <__stack+0xa3>
 584:	b5 c0       	rjmp	.+362    	; 0x6f0 <__stack+0x1f1>
 586:	80 37       	cpi	r24, 0x70	; 112
 588:	19 f0       	breq	.+6      	; 0x590 <__stack+0x91>
 58a:	88 37       	cpi	r24, 0x78	; 120
 58c:	21 f0       	breq	.+8      	; 0x596 <__stack+0x97>
 58e:	b0 c0       	rjmp	.+352    	; 0x6f0 <__stack+0x1f1>
 590:	e9 2f       	mov	r30, r25
 592:	e0 61       	ori	r30, 0x10	; 16
 594:	be 2e       	mov	r11, r30
 596:	b4 fe       	sbrs	r11, 4
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <__stack+0xb5>
 59a:	fb 2d       	mov	r31, r11
 59c:	f4 60       	ori	r31, 0x04	; 4
 59e:	bf 2e       	mov	r11, r31
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__stack+0xb5>
 5a2:	34 fe       	sbrs	r3, 4
 5a4:	0a c0       	rjmp	.+20     	; 0x5ba <__stack+0xbb>
 5a6:	29 2f       	mov	r18, r25
 5a8:	26 60       	ori	r18, 0x06	; 6
 5aa:	b2 2e       	mov	r11, r18
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <__stack+0xbb>
 5ae:	28 e0       	ldi	r18, 0x08	; 8
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__stack+0xbf>
 5b4:	20 e1       	ldi	r18, 0x10	; 16
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__stack+0xbf>
 5ba:	20 e1       	ldi	r18, 0x10	; 16
 5bc:	32 e0       	ldi	r19, 0x02	; 2
 5be:	f8 01       	movw	r30, r16
 5c0:	b7 fe       	sbrs	r11, 7
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <__stack+0xd3>
 5c4:	60 81       	ld	r22, Z
 5c6:	71 81       	ldd	r23, Z+1	; 0x01
 5c8:	82 81       	ldd	r24, Z+2	; 0x02
 5ca:	93 81       	ldd	r25, Z+3	; 0x03
 5cc:	0c 5f       	subi	r16, 0xFC	; 252
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <__stack+0xdf>
 5d2:	60 81       	ld	r22, Z
 5d4:	71 81       	ldd	r23, Z+1	; 0x01
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 5f       	subi	r16, 0xFE	; 254
 5dc:	1f 4f       	sbci	r17, 0xFF	; 255
 5de:	a3 01       	movw	r20, r6
 5e0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__ultoa_invert>
 5e4:	88 2e       	mov	r8, r24
 5e6:	86 18       	sub	r8, r6
 5e8:	fb 2d       	mov	r31, r11
 5ea:	ff 77       	andi	r31, 0x7F	; 127
 5ec:	3f 2e       	mov	r3, r31
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <__stack+0x10d>
 5f2:	23 2d       	mov	r18, r3
 5f4:	2e 7f       	andi	r18, 0xFE	; 254
 5f6:	a2 2e       	mov	r10, r18
 5f8:	89 14       	cp	r8, r9
 5fa:	58 f4       	brcc	.+22     	; 0x612 <__stack+0x113>
 5fc:	34 fe       	sbrs	r3, 4
 5fe:	0b c0       	rjmp	.+22     	; 0x616 <__stack+0x117>
 600:	32 fc       	sbrc	r3, 2
 602:	09 c0       	rjmp	.+18     	; 0x616 <__stack+0x117>
 604:	83 2d       	mov	r24, r3
 606:	8e 7e       	andi	r24, 0xEE	; 238
 608:	a8 2e       	mov	r10, r24
 60a:	05 c0       	rjmp	.+10     	; 0x616 <__stack+0x117>
 60c:	b8 2c       	mov	r11, r8
 60e:	a3 2c       	mov	r10, r3
 610:	03 c0       	rjmp	.+6      	; 0x618 <__stack+0x119>
 612:	b8 2c       	mov	r11, r8
 614:	01 c0       	rjmp	.+2      	; 0x618 <__stack+0x119>
 616:	b9 2c       	mov	r11, r9
 618:	a4 fe       	sbrs	r10, 4
 61a:	0f c0       	rjmp	.+30     	; 0x63a <__stack+0x13b>
 61c:	fe 01       	movw	r30, r28
 61e:	e8 0d       	add	r30, r8
 620:	f1 1d       	adc	r31, r1
 622:	80 81       	ld	r24, Z
 624:	80 33       	cpi	r24, 0x30	; 48
 626:	21 f4       	brne	.+8      	; 0x630 <__stack+0x131>
 628:	9a 2d       	mov	r25, r10
 62a:	99 7e       	andi	r25, 0xE9	; 233
 62c:	a9 2e       	mov	r10, r25
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__stack+0x143>
 630:	a2 fe       	sbrs	r10, 2
 632:	06 c0       	rjmp	.+12     	; 0x640 <__stack+0x141>
 634:	b3 94       	inc	r11
 636:	b3 94       	inc	r11
 638:	04 c0       	rjmp	.+8      	; 0x642 <__stack+0x143>
 63a:	8a 2d       	mov	r24, r10
 63c:	86 78       	andi	r24, 0x86	; 134
 63e:	09 f0       	breq	.+2      	; 0x642 <__stack+0x143>
 640:	b3 94       	inc	r11
 642:	a3 fc       	sbrc	r10, 3
 644:	11 c0       	rjmp	.+34     	; 0x668 <__stack+0x169>
 646:	a0 fe       	sbrs	r10, 0
 648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x157>
 64a:	b2 14       	cp	r11, r2
 64c:	88 f4       	brcc	.+34     	; 0x670 <__stack+0x171>
 64e:	28 0c       	add	r2, r8
 650:	92 2c       	mov	r9, r2
 652:	9b 18       	sub	r9, r11
 654:	0e c0       	rjmp	.+28     	; 0x672 <__stack+0x173>
 656:	b2 14       	cp	r11, r2
 658:	60 f4       	brcc	.+24     	; 0x672 <__stack+0x173>
 65a:	b6 01       	movw	r22, r12
 65c:	80 e2       	ldi	r24, 0x20	; 32
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 664:	b3 94       	inc	r11
 666:	f7 cf       	rjmp	.-18     	; 0x656 <__stack+0x157>
 668:	b2 14       	cp	r11, r2
 66a:	18 f4       	brcc	.+6      	; 0x672 <__stack+0x173>
 66c:	2b 18       	sub	r2, r11
 66e:	02 c0       	rjmp	.+4      	; 0x674 <__stack+0x175>
 670:	98 2c       	mov	r9, r8
 672:	21 2c       	mov	r2, r1
 674:	a4 fe       	sbrs	r10, 4
 676:	10 c0       	rjmp	.+32     	; 0x698 <__stack+0x199>
 678:	b6 01       	movw	r22, r12
 67a:	80 e3       	ldi	r24, 0x30	; 48
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 682:	a2 fe       	sbrs	r10, 2
 684:	17 c0       	rjmp	.+46     	; 0x6b4 <__stack+0x1b5>
 686:	a1 fc       	sbrc	r10, 1
 688:	03 c0       	rjmp	.+6      	; 0x690 <__stack+0x191>
 68a:	88 e7       	ldi	r24, 0x78	; 120
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <__stack+0x195>
 690:	88 e5       	ldi	r24, 0x58	; 88
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	b6 01       	movw	r22, r12
 696:	0c c0       	rjmp	.+24     	; 0x6b0 <__stack+0x1b1>
 698:	8a 2d       	mov	r24, r10
 69a:	86 78       	andi	r24, 0x86	; 134
 69c:	59 f0       	breq	.+22     	; 0x6b4 <__stack+0x1b5>
 69e:	a1 fe       	sbrs	r10, 1
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <__stack+0x1a7>
 6a2:	8b e2       	ldi	r24, 0x2B	; 43
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <__stack+0x1a9>
 6a6:	80 e2       	ldi	r24, 0x20	; 32
 6a8:	a7 fc       	sbrc	r10, 7
 6aa:	8d e2       	ldi	r24, 0x2D	; 45
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 6b4:	89 14       	cp	r8, r9
 6b6:	38 f4       	brcc	.+14     	; 0x6c6 <__stack+0x1c7>
 6b8:	b6 01       	movw	r22, r12
 6ba:	80 e3       	ldi	r24, 0x30	; 48
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 6c2:	9a 94       	dec	r9
 6c4:	f7 cf       	rjmp	.-18     	; 0x6b4 <__stack+0x1b5>
 6c6:	8a 94       	dec	r8
 6c8:	f3 01       	movw	r30, r6
 6ca:	e8 0d       	add	r30, r8
 6cc:	f1 1d       	adc	r31, r1
 6ce:	80 81       	ld	r24, Z
 6d0:	b6 01       	movw	r22, r12
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 6d8:	81 10       	cpse	r8, r1
 6da:	f5 cf       	rjmp	.-22     	; 0x6c6 <__stack+0x1c7>
 6dc:	22 20       	and	r2, r2
 6de:	09 f4       	brne	.+2      	; 0x6e2 <__stack+0x1e3>
 6e0:	42 ce       	rjmp	.-892    	; 0x366 <vfprintf+0x24>
 6e2:	b6 01       	movw	r22, r12
 6e4:	80 e2       	ldi	r24, 0x20	; 32
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 98 03 	call	0x730	; 0x730 <fputc>
 6ec:	2a 94       	dec	r2
 6ee:	f6 cf       	rjmp	.-20     	; 0x6dc <__stack+0x1dd>
 6f0:	f6 01       	movw	r30, r12
 6f2:	86 81       	ldd	r24, Z+6	; 0x06
 6f4:	97 81       	ldd	r25, Z+7	; 0x07
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__stack+0x1fd>
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	2b 96       	adiw	r28, 0x0b	; 11
 6fe:	e2 e1       	ldi	r30, 0x12	; 18
 700:	0c 94 80 04 	jmp	0x900	; 0x900 <__epilogue_restores__>

00000704 <strnlen_P>:
 704:	fc 01       	movw	r30, r24
 706:	05 90       	lpm	r0, Z+
 708:	61 50       	subi	r22, 0x01	; 1
 70a:	70 40       	sbci	r23, 0x00	; 0
 70c:	01 10       	cpse	r0, r1
 70e:	d8 f7       	brcc	.-10     	; 0x706 <strnlen_P+0x2>
 710:	80 95       	com	r24
 712:	90 95       	com	r25
 714:	8e 0f       	add	r24, r30
 716:	9f 1f       	adc	r25, r31
 718:	08 95       	ret

0000071a <strnlen>:
 71a:	fc 01       	movw	r30, r24
 71c:	61 50       	subi	r22, 0x01	; 1
 71e:	70 40       	sbci	r23, 0x00	; 0
 720:	01 90       	ld	r0, Z+
 722:	01 10       	cpse	r0, r1
 724:	d8 f7       	brcc	.-10     	; 0x71c <strnlen+0x2>
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	8e 0f       	add	r24, r30
 72c:	9f 1f       	adc	r25, r31
 72e:	08 95       	ret

00000730 <fputc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	fb 01       	movw	r30, r22
 73a:	23 81       	ldd	r18, Z+3	; 0x03
 73c:	21 fd       	sbrc	r18, 1
 73e:	03 c0       	rjmp	.+6      	; 0x746 <fputc+0x16>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	2c c0       	rjmp	.+88     	; 0x79e <fputc+0x6e>
 746:	22 ff       	sbrs	r18, 2
 748:	16 c0       	rjmp	.+44     	; 0x776 <fputc+0x46>
 74a:	46 81       	ldd	r20, Z+6	; 0x06
 74c:	57 81       	ldd	r21, Z+7	; 0x07
 74e:	24 81       	ldd	r18, Z+4	; 0x04
 750:	35 81       	ldd	r19, Z+5	; 0x05
 752:	42 17       	cp	r20, r18
 754:	53 07       	cpc	r21, r19
 756:	44 f4       	brge	.+16     	; 0x768 <fputc+0x38>
 758:	a0 81       	ld	r26, Z
 75a:	b1 81       	ldd	r27, Z+1	; 0x01
 75c:	9d 01       	movw	r18, r26
 75e:	2f 5f       	subi	r18, 0xFF	; 255
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	31 83       	std	Z+1, r19	; 0x01
 764:	20 83       	st	Z, r18
 766:	8c 93       	st	X, r24
 768:	26 81       	ldd	r18, Z+6	; 0x06
 76a:	37 81       	ldd	r19, Z+7	; 0x07
 76c:	2f 5f       	subi	r18, 0xFF	; 255
 76e:	3f 4f       	sbci	r19, 0xFF	; 255
 770:	37 83       	std	Z+7, r19	; 0x07
 772:	26 83       	std	Z+6, r18	; 0x06
 774:	14 c0       	rjmp	.+40     	; 0x79e <fputc+0x6e>
 776:	8b 01       	movw	r16, r22
 778:	ec 01       	movw	r28, r24
 77a:	fb 01       	movw	r30, r22
 77c:	00 84       	ldd	r0, Z+8	; 0x08
 77e:	f1 85       	ldd	r31, Z+9	; 0x09
 780:	e0 2d       	mov	r30, r0
 782:	09 95       	icall
 784:	89 2b       	or	r24, r25
 786:	e1 f6       	brne	.-72     	; 0x740 <fputc+0x10>
 788:	d8 01       	movw	r26, r16
 78a:	16 96       	adiw	r26, 0x06	; 6
 78c:	8d 91       	ld	r24, X+
 78e:	9c 91       	ld	r25, X
 790:	17 97       	sbiw	r26, 0x07	; 7
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	17 96       	adiw	r26, 0x07	; 7
 796:	9c 93       	st	X, r25
 798:	8e 93       	st	-X, r24
 79a:	16 97       	sbiw	r26, 0x06	; 6
 79c:	ce 01       	movw	r24, r28
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <__ultoa_invert>:
 7a8:	fa 01       	movw	r30, r20
 7aa:	aa 27       	eor	r26, r26
 7ac:	28 30       	cpi	r18, 0x08	; 8
 7ae:	51 f1       	breq	.+84     	; 0x804 <__ultoa_invert+0x5c>
 7b0:	20 31       	cpi	r18, 0x10	; 16
 7b2:	81 f1       	breq	.+96     	; 0x814 <__ultoa_invert+0x6c>
 7b4:	e8 94       	clt
 7b6:	6f 93       	push	r22
 7b8:	6e 7f       	andi	r22, 0xFE	; 254
 7ba:	6e 5f       	subi	r22, 0xFE	; 254
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	af 4f       	sbci	r26, 0xFF	; 255
 7c4:	b1 e0       	ldi	r27, 0x01	; 1
 7c6:	3e d0       	rcall	.+124    	; 0x844 <__ultoa_invert+0x9c>
 7c8:	b4 e0       	ldi	r27, 0x04	; 4
 7ca:	3c d0       	rcall	.+120    	; 0x844 <__ultoa_invert+0x9c>
 7cc:	67 0f       	add	r22, r23
 7ce:	78 1f       	adc	r23, r24
 7d0:	89 1f       	adc	r24, r25
 7d2:	9a 1f       	adc	r25, r26
 7d4:	a1 1d       	adc	r26, r1
 7d6:	68 0f       	add	r22, r24
 7d8:	79 1f       	adc	r23, r25
 7da:	8a 1f       	adc	r24, r26
 7dc:	91 1d       	adc	r25, r1
 7de:	a1 1d       	adc	r26, r1
 7e0:	6a 0f       	add	r22, r26
 7e2:	71 1d       	adc	r23, r1
 7e4:	81 1d       	adc	r24, r1
 7e6:	91 1d       	adc	r25, r1
 7e8:	a1 1d       	adc	r26, r1
 7ea:	20 d0       	rcall	.+64     	; 0x82c <__ultoa_invert+0x84>
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <__ultoa_invert+0x48>
 7ee:	68 94       	set
 7f0:	3f 91       	pop	r19
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	26 9f       	mul	r18, r22
 7f6:	11 24       	eor	r1, r1
 7f8:	30 19       	sub	r19, r0
 7fa:	30 5d       	subi	r19, 0xD0	; 208
 7fc:	31 93       	st	Z+, r19
 7fe:	de f6       	brtc	.-74     	; 0x7b6 <__ultoa_invert+0xe>
 800:	cf 01       	movw	r24, r30
 802:	08 95       	ret
 804:	46 2f       	mov	r20, r22
 806:	47 70       	andi	r20, 0x07	; 7
 808:	40 5d       	subi	r20, 0xD0	; 208
 80a:	41 93       	st	Z+, r20
 80c:	b3 e0       	ldi	r27, 0x03	; 3
 80e:	0f d0       	rcall	.+30     	; 0x82e <__ultoa_invert+0x86>
 810:	c9 f7       	brne	.-14     	; 0x804 <__ultoa_invert+0x5c>
 812:	f6 cf       	rjmp	.-20     	; 0x800 <__ultoa_invert+0x58>
 814:	46 2f       	mov	r20, r22
 816:	4f 70       	andi	r20, 0x0F	; 15
 818:	40 5d       	subi	r20, 0xD0	; 208
 81a:	4a 33       	cpi	r20, 0x3A	; 58
 81c:	18 f0       	brcs	.+6      	; 0x824 <__ultoa_invert+0x7c>
 81e:	49 5d       	subi	r20, 0xD9	; 217
 820:	31 fd       	sbrc	r19, 1
 822:	40 52       	subi	r20, 0x20	; 32
 824:	41 93       	st	Z+, r20
 826:	02 d0       	rcall	.+4      	; 0x82c <__ultoa_invert+0x84>
 828:	a9 f7       	brne	.-22     	; 0x814 <__ultoa_invert+0x6c>
 82a:	ea cf       	rjmp	.-44     	; 0x800 <__ultoa_invert+0x58>
 82c:	b4 e0       	ldi	r27, 0x04	; 4
 82e:	a6 95       	lsr	r26
 830:	97 95       	ror	r25
 832:	87 95       	ror	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	ba 95       	dec	r27
 83a:	c9 f7       	brne	.-14     	; 0x82e <__ultoa_invert+0x86>
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	61 05       	cpc	r22, r1
 840:	71 05       	cpc	r23, r1
 842:	08 95       	ret
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	0a 2e       	mov	r0, r26
 84a:	06 94       	lsr	r0
 84c:	57 95       	ror	r21
 84e:	47 95       	ror	r20
 850:	37 95       	ror	r19
 852:	27 95       	ror	r18
 854:	ba 95       	dec	r27
 856:	c9 f7       	brne	.-14     	; 0x84a <__ultoa_invert+0xa2>
 858:	62 0f       	add	r22, r18
 85a:	73 1f       	adc	r23, r19
 85c:	84 1f       	adc	r24, r20
 85e:	95 1f       	adc	r25, r21
 860:	a0 1d       	adc	r26, r0
 862:	08 95       	ret

00000864 <__divmodsi4>:
 864:	05 2e       	mov	r0, r21
 866:	97 fb       	bst	r25, 7
 868:	1e f4       	brtc	.+6      	; 0x870 <__divmodsi4+0xc>
 86a:	00 94       	com	r0
 86c:	0e 94 49 04 	call	0x892	; 0x892 <__negsi2>
 870:	57 fd       	sbrc	r21, 7
 872:	07 d0       	rcall	.+14     	; 0x882 <__divmodsi4_neg2>
 874:	0e 94 9b 04 	call	0x936	; 0x936 <__udivmodsi4>
 878:	07 fc       	sbrc	r0, 7
 87a:	03 d0       	rcall	.+6      	; 0x882 <__divmodsi4_neg2>
 87c:	4e f4       	brtc	.+18     	; 0x890 <__divmodsi4_exit>
 87e:	0c 94 49 04 	jmp	0x892	; 0x892 <__negsi2>

00000882 <__divmodsi4_neg2>:
 882:	50 95       	com	r21
 884:	40 95       	com	r20
 886:	30 95       	com	r19
 888:	21 95       	neg	r18
 88a:	3f 4f       	sbci	r19, 0xFF	; 255
 88c:	4f 4f       	sbci	r20, 0xFF	; 255
 88e:	5f 4f       	sbci	r21, 0xFF	; 255

00000890 <__divmodsi4_exit>:
 890:	08 95       	ret

00000892 <__negsi2>:
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__muluhisi3>:
 8a2:	0e 94 bd 04 	call	0x97a	; 0x97a <__umulhisi3>
 8a6:	a5 9f       	mul	r26, r21
 8a8:	90 0d       	add	r25, r0
 8aa:	b4 9f       	mul	r27, r20
 8ac:	90 0d       	add	r25, r0
 8ae:	a4 9f       	mul	r26, r20
 8b0:	80 0d       	add	r24, r0
 8b2:	91 1d       	adc	r25, r1
 8b4:	11 24       	eor	r1, r1
 8b6:	08 95       	ret

000008b8 <__mulshisi3>:
 8b8:	b7 ff       	sbrs	r27, 7
 8ba:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__muluhisi3>

000008be <__mulohisi3>:
 8be:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__muluhisi3>
 8c2:	82 1b       	sub	r24, r18
 8c4:	93 0b       	sbc	r25, r19
 8c6:	08 95       	ret

000008c8 <__prologue_saves__>:
 8c8:	2f 92       	push	r2
 8ca:	3f 92       	push	r3
 8cc:	4f 92       	push	r4
 8ce:	5f 92       	push	r5
 8d0:	6f 92       	push	r6
 8d2:	7f 92       	push	r7
 8d4:	8f 92       	push	r8
 8d6:	9f 92       	push	r9
 8d8:	af 92       	push	r10
 8da:	bf 92       	push	r11
 8dc:	cf 92       	push	r12
 8de:	df 92       	push	r13
 8e0:	ef 92       	push	r14
 8e2:	ff 92       	push	r15
 8e4:	0f 93       	push	r16
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62
 8f0:	ca 1b       	sub	r28, r26
 8f2:	db 0b       	sbc	r29, r27
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	f8 94       	cli
 8f8:	de bf       	out	0x3e, r29	; 62
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	cd bf       	out	0x3d, r28	; 61
 8fe:	09 94       	ijmp

00000900 <__epilogue_restores__>:
 900:	2a 88       	ldd	r2, Y+18	; 0x12
 902:	39 88       	ldd	r3, Y+17	; 0x11
 904:	48 88       	ldd	r4, Y+16	; 0x10
 906:	5f 84       	ldd	r5, Y+15	; 0x0f
 908:	6e 84       	ldd	r6, Y+14	; 0x0e
 90a:	7d 84       	ldd	r7, Y+13	; 0x0d
 90c:	8c 84       	ldd	r8, Y+12	; 0x0c
 90e:	9b 84       	ldd	r9, Y+11	; 0x0b
 910:	aa 84       	ldd	r10, Y+10	; 0x0a
 912:	b9 84       	ldd	r11, Y+9	; 0x09
 914:	c8 84       	ldd	r12, Y+8	; 0x08
 916:	df 80       	ldd	r13, Y+7	; 0x07
 918:	ee 80       	ldd	r14, Y+6	; 0x06
 91a:	fd 80       	ldd	r15, Y+5	; 0x05
 91c:	0c 81       	ldd	r16, Y+4	; 0x04
 91e:	1b 81       	ldd	r17, Y+3	; 0x03
 920:	aa 81       	ldd	r26, Y+2	; 0x02
 922:	b9 81       	ldd	r27, Y+1	; 0x01
 924:	ce 0f       	add	r28, r30
 926:	d1 1d       	adc	r29, r1
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	f8 94       	cli
 92c:	de bf       	out	0x3e, r29	; 62
 92e:	0f be       	out	0x3f, r0	; 63
 930:	cd bf       	out	0x3d, r28	; 61
 932:	ed 01       	movw	r28, r26
 934:	08 95       	ret

00000936 <__udivmodsi4>:
 936:	a1 e2       	ldi	r26, 0x21	; 33
 938:	1a 2e       	mov	r1, r26
 93a:	aa 1b       	sub	r26, r26
 93c:	bb 1b       	sub	r27, r27
 93e:	fd 01       	movw	r30, r26
 940:	0d c0       	rjmp	.+26     	; 0x95c <__udivmodsi4_ep>

00000942 <__udivmodsi4_loop>:
 942:	aa 1f       	adc	r26, r26
 944:	bb 1f       	adc	r27, r27
 946:	ee 1f       	adc	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	a2 17       	cp	r26, r18
 94c:	b3 07       	cpc	r27, r19
 94e:	e4 07       	cpc	r30, r20
 950:	f5 07       	cpc	r31, r21
 952:	20 f0       	brcs	.+8      	; 0x95c <__udivmodsi4_ep>
 954:	a2 1b       	sub	r26, r18
 956:	b3 0b       	sbc	r27, r19
 958:	e4 0b       	sbc	r30, r20
 95a:	f5 0b       	sbc	r31, r21

0000095c <__udivmodsi4_ep>:
 95c:	66 1f       	adc	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	1a 94       	dec	r1
 966:	69 f7       	brne	.-38     	; 0x942 <__udivmodsi4_loop>
 968:	60 95       	com	r22
 96a:	70 95       	com	r23
 96c:	80 95       	com	r24
 96e:	90 95       	com	r25
 970:	9b 01       	movw	r18, r22
 972:	ac 01       	movw	r20, r24
 974:	bd 01       	movw	r22, r26
 976:	cf 01       	movw	r24, r30
 978:	08 95       	ret

0000097a <__umulhisi3>:
 97a:	a2 9f       	mul	r26, r18
 97c:	b0 01       	movw	r22, r0
 97e:	b3 9f       	mul	r27, r19
 980:	c0 01       	movw	r24, r0
 982:	a3 9f       	mul	r26, r19
 984:	70 0d       	add	r23, r0
 986:	81 1d       	adc	r24, r1
 988:	11 24       	eor	r1, r1
 98a:	91 1d       	adc	r25, r1
 98c:	b2 9f       	mul	r27, r18
 98e:	70 0d       	add	r23, r0
 990:	81 1d       	adc	r24, r1
 992:	11 24       	eor	r1, r1
 994:	91 1d       	adc	r25, r1
 996:	08 95       	ret

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>

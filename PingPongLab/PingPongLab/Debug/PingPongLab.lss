
PingPongLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800100  00000c32  00000cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800284  00800284  00000e4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cac  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d1  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ccc  00000000  00000000  000036b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dac  00000000  00000000  00004ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e3       	ldi	r30, 0x32	; 50
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 38       	cpi	r26, 0x84	; 132
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e8       	ldi	r26, 0x84	; 132
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 38       	cpi	r26, 0x8C	; 140
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 48 02 	call	0x490	; 0x490 <main>
  a6:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	08 95       	ret

000000be <OLED_send_command>:
  be:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd74>
  c2:	08 95       	ret

000000c4 <OLED_goto_line>:
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	18 f4       	brcc	.+6      	; 0xce <OLED_goto_line+0xa>
  c8:	80 55       	subi	r24, 0x50	; 80
  ca:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  ce:	08 95       	ret

000000d0 <OLED_goto_column>:
  d0:	cf 93       	push	r28
  d2:	88 23       	and	r24, r24
  d4:	54 f0       	brlt	.+20     	; 0xea <OLED_goto_column+0x1a>
  d6:	c8 2f       	mov	r28, r24
  d8:	c2 95       	swap	r28
  da:	cf 70       	andi	r28, 0x0F	; 15
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	8c 0f       	add	r24, r28
  e6:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <OLED_home>:
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <OLED_goto_line>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <OLED_goto_column>
  fa:	08 95       	ret

000000fc <OLED_send_data>:
  fc:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf74>
 100:	08 95       	ret

00000102 <OLED_clear_line>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <OLED_goto_line>
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	04 c0       	rjmp	.+8      	; 0x118 <OLED_clear_line+0x16>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 7e 00 	call	0xfc	; 0xfc <OLED_send_data>
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c0 38       	cpi	r28, 0x80	; 128
 11a:	d1 05       	cpc	r29, r1
 11c:	cc f3       	brlt	.-14     	; 0x110 <OLED_clear_line+0xe>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <OLED_reset>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <OLED_reset+0x12>
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 81 00 	call	0x102	; 0x102 <OLED_clear_line>
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	c8 30       	cpi	r28, 0x08	; 8
 138:	d1 05       	cpc	r29, r1
 13a:	cc f3       	brlt	.-14     	; 0x12e <OLED_reset+0xa>
 13c:	0e 94 77 00 	call	0xee	; 0xee <OLED_home>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <OLED_Init>:
 146:	8e ea       	ldi	r24, 0xAE	; 174
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 14c:	81 ea       	ldi	r24, 0xA1	; 161
 14e:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 152:	8a ed       	ldi	r24, 0xDA	; 218
 154:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 158:	82 e1       	ldi	r24, 0x12	; 18
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 15e:	88 ec       	ldi	r24, 0xC8	; 200
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 164:	88 ea       	ldi	r24, 0xA8	; 168
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 170:	85 ed       	ldi	r24, 0xD5	; 213
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 17c:	81 e8       	ldi	r24, 0x81	; 129
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 182:	80 e5       	ldi	r24, 0x50	; 80
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 188:	89 ed       	ldi	r24, 0xD9	; 217
 18a:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 18e:	81 e2       	ldi	r24, 0x21	; 33
 190:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1a0:	8b ed       	ldi	r24, 0xDB	; 219
 1a2:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1ac:	8d ea       	ldi	r24, 0xAD	; 173
 1ae:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1b8:	84 ea       	ldi	r24, 0xA4	; 164
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1be:	86 ea       	ldi	r24, 0xA6	; 166
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1c4:	8f ea       	ldi	r24, 0xAF	; 175
 1c6:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1ca:	08 95       	ret

000001cc <SPI_Init>:
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	80 6b       	ori	r24, 0xB0	; 176
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	87 b3       	in	r24, 0x17	; 23
 1d4:	8f 7b       	andi	r24, 0xBF	; 191
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	8d b1       	in	r24, 0x0d	; 13
 1da:	81 65       	ori	r24, 0x51	; 81
 1dc:	8d b9       	out	0x0d, r24	; 13
 1de:	08 95       	ret

000001e0 <SPI_write>:
 1e0:	8f b9       	out	0x0f, r24	; 15
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <SPI_write+0x2>
 1e6:	08 95       	ret

000001e8 <SPI_read>:
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8f b9       	out	0x0f, r24	; 15
 1ec:	77 9b       	sbis	0x0e, 7	; 14
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <SPI_read+0x4>
 1f0:	8f b1       	in	r24, 0x0f	; 15
 1f2:	08 95       	ret

000001f4 <MCP_active>:
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	8f 7e       	andi	r24, 0xEF	; 239
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	08 95       	ret

000001fc <MCP_deactive>:
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	88 bb       	out	0x18, r24	; 24
 202:	08 95       	ret

00000204 <MCP_read>:
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
 208:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MCP_active>
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 218:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SPI_read>
 21c:	c8 2f       	mov	r28, r24
 21e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP_deactive>
 222:	8c 2f       	mov	r24, r28
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <MCP_write>:
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	d8 2f       	mov	r29, r24
 22e:	c6 2f       	mov	r28, r22
 230:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MCP_active>
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 23a:	8d 2f       	mov	r24, r29
 23c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 246:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP_deactive>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <MCP_status>:
 250:	cf 93       	push	r28
 252:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MCP_active>
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 25c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SPI_read>
 260:	c8 2f       	mov	r28, r24
 262:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP_deactive>
 266:	8c 2f       	mov	r24, r28
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <MCP_bitmod>:
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	18 2f       	mov	r17, r24
 274:	d6 2f       	mov	r29, r22
 276:	c4 2f       	mov	r28, r20
 278:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MCP_active>
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 282:	81 2f       	mov	r24, r17
 284:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 288:	8d 2f       	mov	r24, r29
 28a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 294:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP_deactive>
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <MCP_reset>:
 2a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MCP_active>
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
 2aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MCP_deactive>
 2ae:	08 95       	ret

000002b0 <CAN_Init>:
 2b0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <MCP_reset>
 2b4:	65 ec       	ldi	r22, 0xC5	; 197
 2b6:	8a e2       	ldi	r24, 0x2A	; 42
 2b8:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 2bc:	6f e3       	ldi	r22, 0x3F	; 63
 2be:	89 e2       	ldi	r24, 0x29	; 41
 2c0:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8f e0       	ldi	r24, 0x0F	; 15
 2c8:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
 2d6:	40 ec       	ldi	r20, 0xC0	; 192
 2d8:	60 ec       	ldi	r22, 0xC0	; 192
 2da:	80 e6       	ldi	r24, 0x60	; 96
 2dc:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
 2e0:	08 95       	ret

000002e2 <CAN_send>:
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	2c 97       	sbiw	r28, 0x0c	; 12
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	e9 82       	std	Y+1, r14	; 0x01
 300:	fa 82       	std	Y+2, r15	; 0x02
 302:	0b 83       	std	Y+3, r16	; 0x03
 304:	1c 83       	std	Y+4, r17	; 0x04
 306:	2d 83       	std	Y+5, r18	; 0x05
 308:	3e 83       	std	Y+6, r19	; 0x06
 30a:	4f 83       	std	Y+7, r20	; 0x07
 30c:	58 87       	std	Y+8, r21	; 0x08
 30e:	69 87       	std	Y+9, r22	; 0x09
 310:	7a 87       	std	Y+10, r23	; 0x0a
 312:	8b 87       	std	Y+11, r24	; 0x0b
 314:	9c 87       	std	Y+12, r25	; 0x0c
 316:	09 81       	ldd	r16, Y+1	; 0x01
 318:	1a 81       	ldd	r17, Y+2	; 0x02
 31a:	b8 01       	movw	r22, r16
 31c:	76 95       	lsr	r23
 31e:	67 95       	ror	r22
 320:	76 95       	lsr	r23
 322:	67 95       	ror	r22
 324:	76 95       	lsr	r23
 326:	67 95       	ror	r22
 328:	81 e3       	ldi	r24, 0x31	; 49
 32a:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 32e:	60 2f       	mov	r22, r16
 330:	62 95       	swap	r22
 332:	66 0f       	add	r22, r22
 334:	60 7e       	andi	r22, 0xE0	; 224
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	85 e3       	ldi	r24, 0x35	; 53
 340:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 344:	fc 84       	ldd	r15, Y+12	; 0x0c
 346:	4f 2d       	mov	r20, r15
 348:	6f e0       	ldi	r22, 0x0F	; 15
 34a:	85 e3       	ldi	r24, 0x35	; 53
 34c:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
 350:	00 e0       	ldi	r16, 0x00	; 0
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	0d c0       	rjmp	.+26     	; 0x370 <CAN_send+0x8e>
 356:	e3 e0       	ldi	r30, 0x03	; 3
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ec 0f       	add	r30, r28
 35c:	fd 1f       	adc	r31, r29
 35e:	e0 0f       	add	r30, r16
 360:	f1 1f       	adc	r31, r17
 362:	60 81       	ld	r22, Z
 364:	86 e3       	ldi	r24, 0x36	; 54
 366:	80 0f       	add	r24, r16
 368:	0e 94 14 01 	call	0x228	; 0x228 <MCP_write>
 36c:	0f 5f       	subi	r16, 0xFF	; 255
 36e:	1f 4f       	sbci	r17, 0xFF	; 255
 370:	8f 2d       	mov	r24, r15
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 17       	cp	r16, r24
 376:	19 07       	cpc	r17, r25
 378:	74 f3       	brlt	.-36     	; 0x356 <CAN_send+0x74>
 37a:	4f ef       	ldi	r20, 0xFF	; 255
 37c:	68 e0       	ldi	r22, 0x08	; 8
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
 384:	2c 96       	adiw	r28, 0x0c	; 12
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	08 95       	ret

0000039e <CAN_receive>:
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	7c 01       	movw	r14, r24
 3aa:	81 e6       	ldi	r24, 0x61	; 97
 3ac:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 3b0:	c8 2f       	mov	r28, r24
 3b2:	82 e6       	ldi	r24, 0x62	; 98
 3b4:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 3b8:	2c 2f       	mov	r18, r28
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	32 2f       	mov	r19, r18
 3be:	22 27       	eor	r18, r18
 3c0:	28 2b       	or	r18, r24
 3c2:	35 95       	asr	r19
 3c4:	27 95       	ror	r18
 3c6:	35 95       	asr	r19
 3c8:	27 95       	ror	r18
 3ca:	35 95       	asr	r19
 3cc:	27 95       	ror	r18
 3ce:	35 95       	asr	r19
 3d0:	27 95       	ror	r18
 3d2:	35 95       	asr	r19
 3d4:	27 95       	ror	r18
 3d6:	f7 01       	movw	r30, r14
 3d8:	31 83       	std	Z+1, r19	; 0x01
 3da:	20 83       	st	Z, r18
 3dc:	85 e6       	ldi	r24, 0x65	; 101
 3de:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 3e2:	18 2f       	mov	r17, r24
 3e4:	1f 70       	andi	r17, 0x0F	; 15
 3e6:	19 30       	cpi	r17, 0x09	; 9
 3e8:	08 f0       	brcs	.+2      	; 0x3ec <CAN_receive+0x4e>
 3ea:	18 e0       	ldi	r17, 0x08	; 8
 3ec:	f7 01       	movw	r30, r14
 3ee:	13 87       	std	Z+11, r17	; 0x0b
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3f6:	8c 2f       	mov	r24, r28
 3f8:	8a 59       	subi	r24, 0x9A	; 154
 3fa:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 3fe:	f7 01       	movw	r30, r14
 400:	ec 0f       	add	r30, r28
 402:	fd 1f       	adc	r31, r29
 404:	82 83       	std	Z+2, r24	; 0x02
 406:	21 96       	adiw	r28, 0x01	; 1
 408:	81 2f       	mov	r24, r17
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	c8 17       	cp	r28, r24
 40e:	d9 07       	cpc	r29, r25
 410:	94 f3       	brlt	.-28     	; 0x3f6 <CAN_receive+0x58>
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	8c e2       	ldi	r24, 0x2C	; 44
 418:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
 41c:	c7 01       	movw	r24, r14
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	08 95       	ret

0000042a <__vector_3>:
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <interrupt_flag>
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <USART_Init>:
 448:	90 bd       	out	0x20, r25	; 32
 44a:	89 b9       	out	0x09, r24	; 9
 44c:	88 e1       	ldi	r24, 0x18	; 24
 44e:	8a b9       	out	0x0a, r24	; 10
 450:	8e ea       	ldi	r24, 0xAE	; 174
 452:	80 bd       	out	0x20, r24	; 32
 454:	08 95       	ret

00000456 <SRAM_Init>:

void SRAM_Init(void) {
	// Enable external memory interface
	MCUCR |= (1 << SRE);
 456:	85 b7       	in	r24, 0x35	; 53
 458:	80 68       	ori	r24, 0x80	; 128
 45a:	85 bf       	out	0x35, r24	; 53
	// Mask PC7-PC4
	SFIOR |= (1 << XMM2);
 45c:	80 b7       	in	r24, 0x30	; 48
 45e:	80 62       	ori	r24, 0x20	; 32
 460:	80 bf       	out	0x30, r24	; 48
 462:	08 95       	ret

00000464 <CLK_Init>:
}

void CLK_Init(int TOP) {
 464:	9c 01       	movw	r18, r24
	// Set PD4 as output
	DDRD |= (1 << DDD4);
 466:	91 b3       	in	r25, 0x11	; 17
 468:	90 61       	ori	r25, 0x10	; 16
 46a:	91 bb       	out	0x11, r25	; 17
	
	// Compare output mode: Toggle compare match
	TCCR3A |= (1 << COM3A0); 
 46c:	eb e8       	ldi	r30, 0x8B	; 139
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	90 81       	ld	r25, Z
 472:	90 64       	ori	r25, 0x40	; 64
 474:	90 83       	st	Z, r25
	
	// Mode 4, CTC
	TCCR3B |= (1 << WGM32);
 476:	ea e8       	ldi	r30, 0x8A	; 138
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	90 81       	ld	r25, Z
 47c:	98 60       	ori	r25, 0x08	; 8
 47e:	90 83       	st	Z, r25
	
	// Set counter TOP value
	OCR3A = TOP;
 480:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 484:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	
	// Prescaler 1
	TCCR3B |= (1 << CS30);
 488:	80 81       	ld	r24, Z
 48a:	81 60       	ori	r24, 0x01	; 1
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <main>:
	interrupt_flag = 1;
}


int main(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	a4 97       	sbiw	r28, 0x24	; 36
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	8a bb       	out	0x1a, r24	; 26
	DDRE |= (0x02);
 4a8:	86 b1       	in	r24, 0x06	; 6
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	86 b9       	out	0x06, r24	; 6
	
	// Right and left button inputs
	DDRD &= !( (1 << PD2) | (1 << PD3) );
 4ae:	81 b3       	in	r24, 0x11	; 17
 4b0:	11 ba       	out	0x11, r1	; 17
	// Joystick button
	DDRE &= !(1 << PE2);
 4b2:	86 b1       	in	r24, 0x06	; 6
 4b4:	16 b8       	out	0x06, r1	; 6
	
	// Set interrupt pin as input
	DDRE &= ~(1 << PE0);
 4b6:	86 b1       	in	r24, 0x06	; 6
 4b8:	8e 7f       	andi	r24, 0xFE	; 254
 4ba:	86 b9       	out	0x06, r24	; 6
	// Disable interrupt, clear Interrupt Enable in GICR
	GICR &= 0b00000111;
 4bc:	8b b7       	in	r24, 0x3b	; 59
 4be:	87 70       	andi	r24, 0x07	; 7
 4c0:	8b bf       	out	0x3b, r24	; 59
	// Set ISC2 bit in EMCUCR
	EMCUCR &= ~(1 << ISC2); // 1 for rising edge, 0 for falling edge
 4c2:	86 b7       	in	r24, 0x36	; 54
 4c4:	8e 7f       	andi	r24, 0xFE	; 254
 4c6:	86 bf       	out	0x36, r24	; 54
	// Clear INT2 flag, write 1 to INTF2 in GIFR
	GIFR |= (1 << INTF2);
 4c8:	8a b7       	in	r24, 0x3a	; 58
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	8a bf       	out	0x3a, r24	; 58
	// Enable interrupt, set Interrupt Enable in GICR
	GICR |= (1 << INT2);
 4ce:	8b b7       	in	r24, 0x3b	; 59
 4d0:	80 62       	ori	r24, 0x20	; 32
 4d2:	8b bf       	out	0x3b, r24	; 59
	// Enable I-bit in SREG to enable interrupts
	sei();
 4d4:	78 94       	sei
	
	USART_Init(MYUBRR);
 4d6:	8f e1       	ldi	r24, 0x1F	; 31
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 24 02 	call	0x448	; 0x448 <USART_Init>
	CLK_Init(0);
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 32 02 	call	0x464	; 0x464 <CLK_Init>
	SRAM_Init();
 4e6:	0e 94 2b 02 	call	0x456	; 0x456 <SRAM_Init>
	OLED_Init();
 4ea:	0e 94 a3 00 	call	0x146	; 0x146 <OLED_Init>
	SPI_Init();
 4ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SPI_Init>
	CAN_Init();
 4f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <CAN_Init>
	
	// Setup for printf
	stdout = &uart_stdio;
 4f6:	e6 e8       	ldi	r30, 0x86	; 134
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	93 83       	std	Z+3, r25	; 0x03
 500:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_stdio;
 502:	91 83       	std	Z+1, r25	; 0x01
 504:	80 83       	st	Z, r24
	char min_pos = 0;
	char max_pos = 0;
	char screen = 0;
	char prev_screen = 1;
	
	OLED_reset();	
 506:	0e 94 92 00 	call	0x124	; 0x124 <OLED_reset>
	
	message msg, msg_received;
	msg.ID = 42;
 50a:	8a e2       	ldi	r24, 0x2A	; 42
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9a 83       	std	Y+2, r25	; 0x02
 510:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 7;
 512:	87 e0       	ldi	r24, 0x07	; 7
 514:	8c 87       	std	Y+12, r24	; 0x0c
	strcpy(msg.data, "TEST123");
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	e6 e3       	ldi	r30, 0x36	; 54
 51a:	f2 e0       	ldi	r31, 0x02	; 2
 51c:	de 01       	movw	r26, r28
 51e:	13 96       	adiw	r26, 0x03	; 3
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	8a 95       	dec	r24
 526:	e1 f7       	brne	.-8      	; 0x520 <__stack+0x21>
	
	
	while (1) {
		
		
		if (interrupt_flag) {
 528:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <interrupt_flag>
 52c:	88 23       	and	r24, r24
 52e:	79 f0       	breq	.+30     	; 0x54e <__stack+0x4f>
			char status = MCP_status();
 530:	0e 94 28 01 	call	0x250	; 0x250 <MCP_status>
			
			if (status & 0x03) {
 534:	98 2f       	mov	r25, r24
 536:	93 70       	andi	r25, 0x03	; 3
 538:	19 f0       	breq	.+6      	; 0x540 <__stack+0x41>
				// RX0IF and RX1IF
				new_message = 1;
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <__data_end>
			}
			if (status & 0xA8) {
 540:	88 7a       	andi	r24, 0xA8	; 168
 542:	29 f0       	breq	.+10     	; 0x54e <__stack+0x4f>
				// TX0IF
				MCP_bitmod(MCP_CANINTF, 0xA8, 0x00);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	68 ea       	ldi	r22, 0xA8	; 168
 548:	8c e2       	ldi	r24, 0x2C	; 44
 54a:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bitmod>
		
		// received_char = USART_Receive();
		
		
		
		CAN_send(msg);
 54e:	e9 80       	ldd	r14, Y+1	; 0x01
 550:	fa 80       	ldd	r15, Y+2	; 0x02
 552:	0b 81       	ldd	r16, Y+3	; 0x03
 554:	1c 81       	ldd	r17, Y+4	; 0x04
 556:	2d 81       	ldd	r18, Y+5	; 0x05
 558:	3e 81       	ldd	r19, Y+6	; 0x06
 55a:	4f 81       	ldd	r20, Y+7	; 0x07
 55c:	58 85       	ldd	r21, Y+8	; 0x08
 55e:	69 85       	ldd	r22, Y+9	; 0x09
 560:	7a 85       	ldd	r23, Y+10	; 0x0a
 562:	8b 85       	ldd	r24, Y+11	; 0x0b
 564:	9c 85       	ldd	r25, Y+12	; 0x0c
 566:	0e 94 71 01 	call	0x2e2	; 0x2e2 <CAN_send>
		printf("ID: %d, length: %d, message: %s\n", msg.ID, msg.length, msg.data);
 56a:	2c 85       	ldd	r18, Y+12	; 0x0c
 56c:	ce 01       	movw	r24, r28
 56e:	03 96       	adiw	r24, 0x03	; 3
 570:	9f 93       	push	r25
 572:	8f 93       	push	r24
 574:	1f 92       	push	r1
 576:	2f 93       	push	r18
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	8f 93       	push	r24
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	8f 93       	push	r24
 580:	8e e3       	ldi	r24, 0x3E	; 62
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	9f 93       	push	r25
 586:	8f 93       	push	r24
 588:	0e 94 39 03 	call	0x672	; 0x672 <printf>
		
		
		char EFLG = MCP_read(MCP_EFLG);
 58c:	8d e2       	ldi	r24, 0x2D	; 45
 58e:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 592:	f8 2e       	mov	r15, r24
		char status = MCP_status();
 594:	0e 94 28 01 	call	0x250	; 0x250 <MCP_status>
 598:	18 2f       	mov	r17, r24
		char rx_status = MCP_read(MCP_RX_STATUS);
 59a:	80 eb       	ldi	r24, 0xB0	; 176
 59c:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 5a0:	08 2f       	mov	r16, r24
		printf("EFLG: %X\n", EFLG);
 5a2:	1f 92       	push	r1
 5a4:	ff 92       	push	r15
 5a6:	8f e5       	ldi	r24, 0x5F	; 95
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	9f 93       	push	r25
 5ac:	8f 93       	push	r24
 5ae:	0e 94 39 03 	call	0x672	; 0x672 <printf>
		printf("Status: %X, RX_status: %X\n", status, rx_status);
 5b2:	1f 92       	push	r1
 5b4:	0f 93       	push	r16
 5b6:	1f 92       	push	r1
 5b8:	1f 93       	push	r17
 5ba:	89 e6       	ldi	r24, 0x69	; 105
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	9f 93       	push	r25
 5c0:	8f 93       	push	r24
 5c2:	0e 94 39 03 	call	0x672	; 0x672 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	9c e2       	ldi	r25, 0x2C	; 44
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <__stack+0xcd>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__stack+0xd7>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <__stack+0xd9>
		if (received_char == 's') {
			CAN_send(msg);
			printf("Message sent\n");
		}
		
		if (received_char == 'r' || new_message) {
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
 5e6:	88 23       	and	r24, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <__stack+0xed>
 5ea:	9e cf       	rjmp	.-196    	; 0x528 <__stack+0x29>
			
			
			msg_received = CAN_receive();
 5ec:	ce 01       	movw	r24, r28
 5ee:	49 96       	adiw	r24, 0x19	; 25
 5f0:	0e 94 cf 01 	call	0x39e	; 0x39e <CAN_receive>
 5f4:	8c e0       	ldi	r24, 0x0C	; 12
 5f6:	fe 01       	movw	r30, r28
 5f8:	79 96       	adiw	r30, 0x19	; 25
 5fa:	de 01       	movw	r26, r28
 5fc:	1d 96       	adiw	r26, 0x0d	; 13
 5fe:	01 90       	ld	r0, Z+
 600:	0d 92       	st	X+, r0
 602:	8a 95       	dec	r24
 604:	e1 f7       	brne	.-8      	; 0x5fe <__stack+0xff>
			printf("ID: %d, length: %d, message: %s\n", msg_received.ID, msg_received.length, msg_received.data);
 606:	28 8d       	ldd	r18, Y+24	; 0x18
 608:	ce 01       	movw	r24, r28
 60a:	0f 96       	adiw	r24, 0x0f	; 15
 60c:	9f 93       	push	r25
 60e:	8f 93       	push	r24
 610:	1f 92       	push	r1
 612:	2f 93       	push	r18
 614:	8e 85       	ldd	r24, Y+14	; 0x0e
 616:	8f 93       	push	r24
 618:	8d 85       	ldd	r24, Y+13	; 0x0d
 61a:	8f 93       	push	r24
 61c:	8e e3       	ldi	r24, 0x3E	; 62
 61e:	92 e0       	ldi	r25, 0x02	; 2
 620:	9f 93       	push	r25
 622:	8f 93       	push	r24
 624:	0e 94 39 03 	call	0x672	; 0x672 <printf>
			new_message = 0;
 628:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
			
			
			char EFLG = MCP_read(MCP_EFLG);
 62c:	8d e2       	ldi	r24, 0x2D	; 45
 62e:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 632:	f8 2e       	mov	r15, r24
			char status = MCP_status();
 634:	0e 94 28 01 	call	0x250	; 0x250 <MCP_status>
 638:	18 2f       	mov	r17, r24
			char rx_status = MCP_read(MCP_RX_STATUS);
 63a:	80 eb       	ldi	r24, 0xB0	; 176
 63c:	0e 94 02 01 	call	0x204	; 0x204 <MCP_read>
 640:	08 2f       	mov	r16, r24
			printf("EFLG: %X\n", EFLG);
 642:	1f 92       	push	r1
 644:	ff 92       	push	r15
 646:	8f e5       	ldi	r24, 0x5F	; 95
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	9f 93       	push	r25
 64c:	8f 93       	push	r24
 64e:	0e 94 39 03 	call	0x672	; 0x672 <printf>
			printf("Status: %X, RX_status: %X\n", status, rx_status);
 652:	1f 92       	push	r1
 654:	0f 93       	push	r16
 656:	1f 92       	push	r1
 658:	1f 93       	push	r17
 65a:	89 e6       	ldi	r24, 0x69	; 105
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	9f 93       	push	r25
 660:	8f 93       	push	r24
 662:	0e 94 39 03 	call	0x672	; 0x672 <printf>
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	de bf       	out	0x3e, r29	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	cd bf       	out	0x3d, r28	; 61
 670:	5b cf       	rjmp	.-330    	; 0x528 <__stack+0x29>

00000672 <printf>:
 672:	a0 e0       	ldi	r26, 0x00	; 0
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__prologue_saves__+0x20>
 67e:	ae 01       	movw	r20, r28
 680:	4b 5f       	subi	r20, 0xFB	; 251
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	fa 01       	movw	r30, r20
 686:	61 91       	ld	r22, Z+
 688:	71 91       	ld	r23, Z+
 68a:	af 01       	movw	r20, r30
 68c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__iob+0x2>
 690:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <__iob+0x3>
 694:	0e 94 4f 03 	call	0x69e	; 0x69e <vfprintf>
 698:	e2 e0       	ldi	r30, 0x02	; 2
 69a:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__epilogue_restores__+0x20>

0000069e <vfprintf>:
 69e:	ab e0       	ldi	r26, 0x0B	; 11
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e5       	ldi	r30, 0x55	; 85
 6a4:	f3 e0       	ldi	r31, 0x03	; 3
 6a6:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__prologue_saves__>
 6aa:	6c 01       	movw	r12, r24
 6ac:	7b 01       	movw	r14, r22
 6ae:	8a 01       	movw	r16, r20
 6b0:	fc 01       	movw	r30, r24
 6b2:	17 82       	std	Z+7, r1	; 0x07
 6b4:	16 82       	std	Z+6, r1	; 0x06
 6b6:	83 81       	ldd	r24, Z+3	; 0x03
 6b8:	81 ff       	sbrs	r24, 1
 6ba:	cc c1       	rjmp	.+920    	; 0xa54 <vfprintf+0x3b6>
 6bc:	ce 01       	movw	r24, r28
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	3c 01       	movw	r6, r24
 6c2:	f6 01       	movw	r30, r12
 6c4:	93 81       	ldd	r25, Z+3	; 0x03
 6c6:	f7 01       	movw	r30, r14
 6c8:	93 fd       	sbrc	r25, 3
 6ca:	85 91       	lpm	r24, Z+
 6cc:	93 ff       	sbrs	r25, 3
 6ce:	81 91       	ld	r24, Z+
 6d0:	7f 01       	movw	r14, r30
 6d2:	88 23       	and	r24, r24
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <vfprintf+0x3a>
 6d6:	ba c1       	rjmp	.+884    	; 0xa4c <vfprintf+0x3ae>
 6d8:	85 32       	cpi	r24, 0x25	; 37
 6da:	39 f4       	brne	.+14     	; 0x6ea <vfprintf+0x4c>
 6dc:	93 fd       	sbrc	r25, 3
 6de:	85 91       	lpm	r24, Z+
 6e0:	93 ff       	sbrs	r25, 3
 6e2:	81 91       	ld	r24, Z+
 6e4:	7f 01       	movw	r14, r30
 6e6:	85 32       	cpi	r24, 0x25	; 37
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <vfprintf+0x56>
 6ea:	b6 01       	movw	r22, r12
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 6f2:	e7 cf       	rjmp	.-50     	; 0x6c2 <vfprintf+0x24>
 6f4:	91 2c       	mov	r9, r1
 6f6:	21 2c       	mov	r2, r1
 6f8:	31 2c       	mov	r3, r1
 6fa:	ff e1       	ldi	r31, 0x1F	; 31
 6fc:	f3 15       	cp	r31, r3
 6fe:	d8 f0       	brcs	.+54     	; 0x736 <vfprintf+0x98>
 700:	8b 32       	cpi	r24, 0x2B	; 43
 702:	79 f0       	breq	.+30     	; 0x722 <vfprintf+0x84>
 704:	38 f4       	brcc	.+14     	; 0x714 <vfprintf+0x76>
 706:	80 32       	cpi	r24, 0x20	; 32
 708:	79 f0       	breq	.+30     	; 0x728 <vfprintf+0x8a>
 70a:	83 32       	cpi	r24, 0x23	; 35
 70c:	a1 f4       	brne	.+40     	; 0x736 <vfprintf+0x98>
 70e:	23 2d       	mov	r18, r3
 710:	20 61       	ori	r18, 0x10	; 16
 712:	1d c0       	rjmp	.+58     	; 0x74e <vfprintf+0xb0>
 714:	8d 32       	cpi	r24, 0x2D	; 45
 716:	61 f0       	breq	.+24     	; 0x730 <vfprintf+0x92>
 718:	80 33       	cpi	r24, 0x30	; 48
 71a:	69 f4       	brne	.+26     	; 0x736 <vfprintf+0x98>
 71c:	23 2d       	mov	r18, r3
 71e:	21 60       	ori	r18, 0x01	; 1
 720:	16 c0       	rjmp	.+44     	; 0x74e <vfprintf+0xb0>
 722:	83 2d       	mov	r24, r3
 724:	82 60       	ori	r24, 0x02	; 2
 726:	38 2e       	mov	r3, r24
 728:	e3 2d       	mov	r30, r3
 72a:	e4 60       	ori	r30, 0x04	; 4
 72c:	3e 2e       	mov	r3, r30
 72e:	2a c0       	rjmp	.+84     	; 0x784 <vfprintf+0xe6>
 730:	f3 2d       	mov	r31, r3
 732:	f8 60       	ori	r31, 0x08	; 8
 734:	1d c0       	rjmp	.+58     	; 0x770 <vfprintf+0xd2>
 736:	37 fc       	sbrc	r3, 7
 738:	2d c0       	rjmp	.+90     	; 0x794 <vfprintf+0xf6>
 73a:	20 ed       	ldi	r18, 0xD0	; 208
 73c:	28 0f       	add	r18, r24
 73e:	2a 30       	cpi	r18, 0x0A	; 10
 740:	40 f0       	brcs	.+16     	; 0x752 <vfprintf+0xb4>
 742:	8e 32       	cpi	r24, 0x2E	; 46
 744:	b9 f4       	brne	.+46     	; 0x774 <vfprintf+0xd6>
 746:	36 fc       	sbrc	r3, 6
 748:	81 c1       	rjmp	.+770    	; 0xa4c <vfprintf+0x3ae>
 74a:	23 2d       	mov	r18, r3
 74c:	20 64       	ori	r18, 0x40	; 64
 74e:	32 2e       	mov	r3, r18
 750:	19 c0       	rjmp	.+50     	; 0x784 <vfprintf+0xe6>
 752:	36 fe       	sbrs	r3, 6
 754:	06 c0       	rjmp	.+12     	; 0x762 <vfprintf+0xc4>
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	98 9e       	mul	r9, r24
 75a:	20 0d       	add	r18, r0
 75c:	11 24       	eor	r1, r1
 75e:	92 2e       	mov	r9, r18
 760:	11 c0       	rjmp	.+34     	; 0x784 <vfprintf+0xe6>
 762:	ea e0       	ldi	r30, 0x0A	; 10
 764:	2e 9e       	mul	r2, r30
 766:	20 0d       	add	r18, r0
 768:	11 24       	eor	r1, r1
 76a:	22 2e       	mov	r2, r18
 76c:	f3 2d       	mov	r31, r3
 76e:	f0 62       	ori	r31, 0x20	; 32
 770:	3f 2e       	mov	r3, r31
 772:	08 c0       	rjmp	.+16     	; 0x784 <vfprintf+0xe6>
 774:	8c 36       	cpi	r24, 0x6C	; 108
 776:	21 f4       	brne	.+8      	; 0x780 <vfprintf+0xe2>
 778:	83 2d       	mov	r24, r3
 77a:	80 68       	ori	r24, 0x80	; 128
 77c:	38 2e       	mov	r3, r24
 77e:	02 c0       	rjmp	.+4      	; 0x784 <vfprintf+0xe6>
 780:	88 36       	cpi	r24, 0x68	; 104
 782:	41 f4       	brne	.+16     	; 0x794 <vfprintf+0xf6>
 784:	f7 01       	movw	r30, r14
 786:	93 fd       	sbrc	r25, 3
 788:	85 91       	lpm	r24, Z+
 78a:	93 ff       	sbrs	r25, 3
 78c:	81 91       	ld	r24, Z+
 78e:	7f 01       	movw	r14, r30
 790:	81 11       	cpse	r24, r1
 792:	b3 cf       	rjmp	.-154    	; 0x6fa <vfprintf+0x5c>
 794:	98 2f       	mov	r25, r24
 796:	9f 7d       	andi	r25, 0xDF	; 223
 798:	95 54       	subi	r25, 0x45	; 69
 79a:	93 30       	cpi	r25, 0x03	; 3
 79c:	28 f4       	brcc	.+10     	; 0x7a8 <vfprintf+0x10a>
 79e:	0c 5f       	subi	r16, 0xFC	; 252
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	9f e3       	ldi	r25, 0x3F	; 63
 7a4:	99 83       	std	Y+1, r25	; 0x01
 7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <vfprintf+0x124>
 7a8:	83 36       	cpi	r24, 0x63	; 99
 7aa:	31 f0       	breq	.+12     	; 0x7b8 <vfprintf+0x11a>
 7ac:	83 37       	cpi	r24, 0x73	; 115
 7ae:	71 f0       	breq	.+28     	; 0x7cc <vfprintf+0x12e>
 7b0:	83 35       	cpi	r24, 0x53	; 83
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <vfprintf+0x118>
 7b4:	59 c0       	rjmp	.+178    	; 0x868 <vfprintf+0x1ca>
 7b6:	21 c0       	rjmp	.+66     	; 0x7fa <vfprintf+0x15c>
 7b8:	f8 01       	movw	r30, r16
 7ba:	80 81       	ld	r24, Z
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	0e 5f       	subi	r16, 0xFE	; 254
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	88 24       	eor	r8, r8
 7c4:	83 94       	inc	r8
 7c6:	91 2c       	mov	r9, r1
 7c8:	53 01       	movw	r10, r6
 7ca:	13 c0       	rjmp	.+38     	; 0x7f2 <vfprintf+0x154>
 7cc:	28 01       	movw	r4, r16
 7ce:	f2 e0       	ldi	r31, 0x02	; 2
 7d0:	4f 0e       	add	r4, r31
 7d2:	51 1c       	adc	r5, r1
 7d4:	f8 01       	movw	r30, r16
 7d6:	a0 80       	ld	r10, Z
 7d8:	b1 80       	ldd	r11, Z+1	; 0x01
 7da:	36 fe       	sbrs	r3, 6
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <vfprintf+0x146>
 7de:	69 2d       	mov	r22, r9
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x14a>
 7e4:	6f ef       	ldi	r22, 0xFF	; 255
 7e6:	7f ef       	ldi	r23, 0xFF	; 255
 7e8:	c5 01       	movw	r24, r10
 7ea:	0e 94 3b 05 	call	0xa76	; 0xa76 <strnlen>
 7ee:	4c 01       	movw	r8, r24
 7f0:	82 01       	movw	r16, r4
 7f2:	f3 2d       	mov	r31, r3
 7f4:	ff 77       	andi	r31, 0x7F	; 127
 7f6:	3f 2e       	mov	r3, r31
 7f8:	16 c0       	rjmp	.+44     	; 0x826 <vfprintf+0x188>
 7fa:	28 01       	movw	r4, r16
 7fc:	22 e0       	ldi	r18, 0x02	; 2
 7fe:	42 0e       	add	r4, r18
 800:	51 1c       	adc	r5, r1
 802:	f8 01       	movw	r30, r16
 804:	a0 80       	ld	r10, Z
 806:	b1 80       	ldd	r11, Z+1	; 0x01
 808:	36 fe       	sbrs	r3, 6
 80a:	03 c0       	rjmp	.+6      	; 0x812 <vfprintf+0x174>
 80c:	69 2d       	mov	r22, r9
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <vfprintf+0x178>
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	7f ef       	ldi	r23, 0xFF	; 255
 816:	c5 01       	movw	r24, r10
 818:	0e 94 30 05 	call	0xa60	; 0xa60 <strnlen_P>
 81c:	4c 01       	movw	r8, r24
 81e:	f3 2d       	mov	r31, r3
 820:	f0 68       	ori	r31, 0x80	; 128
 822:	3f 2e       	mov	r3, r31
 824:	82 01       	movw	r16, r4
 826:	33 fc       	sbrc	r3, 3
 828:	1b c0       	rjmp	.+54     	; 0x860 <vfprintf+0x1c2>
 82a:	82 2d       	mov	r24, r2
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	88 16       	cp	r8, r24
 830:	99 06       	cpc	r9, r25
 832:	b0 f4       	brcc	.+44     	; 0x860 <vfprintf+0x1c2>
 834:	b6 01       	movw	r22, r12
 836:	80 e2       	ldi	r24, 0x20	; 32
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 83e:	2a 94       	dec	r2
 840:	f4 cf       	rjmp	.-24     	; 0x82a <vfprintf+0x18c>
 842:	f5 01       	movw	r30, r10
 844:	37 fc       	sbrc	r3, 7
 846:	85 91       	lpm	r24, Z+
 848:	37 fe       	sbrs	r3, 7
 84a:	81 91       	ld	r24, Z+
 84c:	5f 01       	movw	r10, r30
 84e:	b6 01       	movw	r22, r12
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 856:	21 10       	cpse	r2, r1
 858:	2a 94       	dec	r2
 85a:	21 e0       	ldi	r18, 0x01	; 1
 85c:	82 1a       	sub	r8, r18
 85e:	91 08       	sbc	r9, r1
 860:	81 14       	cp	r8, r1
 862:	91 04       	cpc	r9, r1
 864:	71 f7       	brne	.-36     	; 0x842 <vfprintf+0x1a4>
 866:	e8 c0       	rjmp	.+464    	; 0xa38 <vfprintf+0x39a>
 868:	84 36       	cpi	r24, 0x64	; 100
 86a:	11 f0       	breq	.+4      	; 0x870 <vfprintf+0x1d2>
 86c:	89 36       	cpi	r24, 0x69	; 105
 86e:	41 f5       	brne	.+80     	; 0x8c0 <vfprintf+0x222>
 870:	f8 01       	movw	r30, r16
 872:	37 fe       	sbrs	r3, 7
 874:	07 c0       	rjmp	.+14     	; 0x884 <vfprintf+0x1e6>
 876:	60 81       	ld	r22, Z
 878:	71 81       	ldd	r23, Z+1	; 0x01
 87a:	82 81       	ldd	r24, Z+2	; 0x02
 87c:	93 81       	ldd	r25, Z+3	; 0x03
 87e:	0c 5f       	subi	r16, 0xFC	; 252
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	08 c0       	rjmp	.+16     	; 0x894 <vfprintf+0x1f6>
 884:	60 81       	ld	r22, Z
 886:	71 81       	ldd	r23, Z+1	; 0x01
 888:	07 2e       	mov	r0, r23
 88a:	00 0c       	add	r0, r0
 88c:	88 0b       	sbc	r24, r24
 88e:	99 0b       	sbc	r25, r25
 890:	0e 5f       	subi	r16, 0xFE	; 254
 892:	1f 4f       	sbci	r17, 0xFF	; 255
 894:	f3 2d       	mov	r31, r3
 896:	ff 76       	andi	r31, 0x6F	; 111
 898:	3f 2e       	mov	r3, r31
 89a:	97 ff       	sbrs	r25, 7
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <vfprintf+0x212>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	f0 68       	ori	r31, 0x80	; 128
 8ae:	3f 2e       	mov	r3, r31
 8b0:	2a e0       	ldi	r18, 0x0A	; 10
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	a3 01       	movw	r20, r6
 8b6:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 8ba:	88 2e       	mov	r8, r24
 8bc:	86 18       	sub	r8, r6
 8be:	45 c0       	rjmp	.+138    	; 0x94a <vfprintf+0x2ac>
 8c0:	85 37       	cpi	r24, 0x75	; 117
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <vfprintf+0x232>
 8c4:	23 2d       	mov	r18, r3
 8c6:	2f 7e       	andi	r18, 0xEF	; 239
 8c8:	b2 2e       	mov	r11, r18
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	25 c0       	rjmp	.+74     	; 0x91a <vfprintf+0x27c>
 8d0:	93 2d       	mov	r25, r3
 8d2:	99 7f       	andi	r25, 0xF9	; 249
 8d4:	b9 2e       	mov	r11, r25
 8d6:	8f 36       	cpi	r24, 0x6F	; 111
 8d8:	c1 f0       	breq	.+48     	; 0x90a <vfprintf+0x26c>
 8da:	18 f4       	brcc	.+6      	; 0x8e2 <vfprintf+0x244>
 8dc:	88 35       	cpi	r24, 0x58	; 88
 8de:	79 f0       	breq	.+30     	; 0x8fe <vfprintf+0x260>
 8e0:	b5 c0       	rjmp	.+362    	; 0xa4c <vfprintf+0x3ae>
 8e2:	80 37       	cpi	r24, 0x70	; 112
 8e4:	19 f0       	breq	.+6      	; 0x8ec <vfprintf+0x24e>
 8e6:	88 37       	cpi	r24, 0x78	; 120
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <vfprintf+0x254>
 8ea:	b0 c0       	rjmp	.+352    	; 0xa4c <vfprintf+0x3ae>
 8ec:	e9 2f       	mov	r30, r25
 8ee:	e0 61       	ori	r30, 0x10	; 16
 8f0:	be 2e       	mov	r11, r30
 8f2:	b4 fe       	sbrs	r11, 4
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <vfprintf+0x272>
 8f6:	fb 2d       	mov	r31, r11
 8f8:	f4 60       	ori	r31, 0x04	; 4
 8fa:	bf 2e       	mov	r11, r31
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <vfprintf+0x272>
 8fe:	34 fe       	sbrs	r3, 4
 900:	0a c0       	rjmp	.+20     	; 0x916 <vfprintf+0x278>
 902:	29 2f       	mov	r18, r25
 904:	26 60       	ori	r18, 0x06	; 6
 906:	b2 2e       	mov	r11, r18
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x278>
 90a:	28 e0       	ldi	r18, 0x08	; 8
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	05 c0       	rjmp	.+10     	; 0x91a <vfprintf+0x27c>
 910:	20 e1       	ldi	r18, 0x10	; 16
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x27c>
 916:	20 e1       	ldi	r18, 0x10	; 16
 918:	32 e0       	ldi	r19, 0x02	; 2
 91a:	f8 01       	movw	r30, r16
 91c:	b7 fe       	sbrs	r11, 7
 91e:	07 c0       	rjmp	.+14     	; 0x92e <vfprintf+0x290>
 920:	60 81       	ld	r22, Z
 922:	71 81       	ldd	r23, Z+1	; 0x01
 924:	82 81       	ldd	r24, Z+2	; 0x02
 926:	93 81       	ldd	r25, Z+3	; 0x03
 928:	0c 5f       	subi	r16, 0xFC	; 252
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
 92c:	06 c0       	rjmp	.+12     	; 0x93a <vfprintf+0x29c>
 92e:	60 81       	ld	r22, Z
 930:	71 81       	ldd	r23, Z+1	; 0x01
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 5f       	subi	r16, 0xFE	; 254
 938:	1f 4f       	sbci	r17, 0xFF	; 255
 93a:	a3 01       	movw	r20, r6
 93c:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 940:	88 2e       	mov	r8, r24
 942:	86 18       	sub	r8, r6
 944:	fb 2d       	mov	r31, r11
 946:	ff 77       	andi	r31, 0x7F	; 127
 948:	3f 2e       	mov	r3, r31
 94a:	36 fe       	sbrs	r3, 6
 94c:	0d c0       	rjmp	.+26     	; 0x968 <vfprintf+0x2ca>
 94e:	23 2d       	mov	r18, r3
 950:	2e 7f       	andi	r18, 0xFE	; 254
 952:	a2 2e       	mov	r10, r18
 954:	89 14       	cp	r8, r9
 956:	58 f4       	brcc	.+22     	; 0x96e <vfprintf+0x2d0>
 958:	34 fe       	sbrs	r3, 4
 95a:	0b c0       	rjmp	.+22     	; 0x972 <vfprintf+0x2d4>
 95c:	32 fc       	sbrc	r3, 2
 95e:	09 c0       	rjmp	.+18     	; 0x972 <vfprintf+0x2d4>
 960:	83 2d       	mov	r24, r3
 962:	8e 7e       	andi	r24, 0xEE	; 238
 964:	a8 2e       	mov	r10, r24
 966:	05 c0       	rjmp	.+10     	; 0x972 <vfprintf+0x2d4>
 968:	b8 2c       	mov	r11, r8
 96a:	a3 2c       	mov	r10, r3
 96c:	03 c0       	rjmp	.+6      	; 0x974 <vfprintf+0x2d6>
 96e:	b8 2c       	mov	r11, r8
 970:	01 c0       	rjmp	.+2      	; 0x974 <vfprintf+0x2d6>
 972:	b9 2c       	mov	r11, r9
 974:	a4 fe       	sbrs	r10, 4
 976:	0f c0       	rjmp	.+30     	; 0x996 <vfprintf+0x2f8>
 978:	fe 01       	movw	r30, r28
 97a:	e8 0d       	add	r30, r8
 97c:	f1 1d       	adc	r31, r1
 97e:	80 81       	ld	r24, Z
 980:	80 33       	cpi	r24, 0x30	; 48
 982:	21 f4       	brne	.+8      	; 0x98c <vfprintf+0x2ee>
 984:	9a 2d       	mov	r25, r10
 986:	99 7e       	andi	r25, 0xE9	; 233
 988:	a9 2e       	mov	r10, r25
 98a:	09 c0       	rjmp	.+18     	; 0x99e <vfprintf+0x300>
 98c:	a2 fe       	sbrs	r10, 2
 98e:	06 c0       	rjmp	.+12     	; 0x99c <vfprintf+0x2fe>
 990:	b3 94       	inc	r11
 992:	b3 94       	inc	r11
 994:	04 c0       	rjmp	.+8      	; 0x99e <vfprintf+0x300>
 996:	8a 2d       	mov	r24, r10
 998:	86 78       	andi	r24, 0x86	; 134
 99a:	09 f0       	breq	.+2      	; 0x99e <vfprintf+0x300>
 99c:	b3 94       	inc	r11
 99e:	a3 fc       	sbrc	r10, 3
 9a0:	11 c0       	rjmp	.+34     	; 0x9c4 <vfprintf+0x326>
 9a2:	a0 fe       	sbrs	r10, 0
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <vfprintf+0x314>
 9a6:	b2 14       	cp	r11, r2
 9a8:	88 f4       	brcc	.+34     	; 0x9cc <vfprintf+0x32e>
 9aa:	28 0c       	add	r2, r8
 9ac:	92 2c       	mov	r9, r2
 9ae:	9b 18       	sub	r9, r11
 9b0:	0e c0       	rjmp	.+28     	; 0x9ce <vfprintf+0x330>
 9b2:	b2 14       	cp	r11, r2
 9b4:	60 f4       	brcc	.+24     	; 0x9ce <vfprintf+0x330>
 9b6:	b6 01       	movw	r22, r12
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 9c0:	b3 94       	inc	r11
 9c2:	f7 cf       	rjmp	.-18     	; 0x9b2 <vfprintf+0x314>
 9c4:	b2 14       	cp	r11, r2
 9c6:	18 f4       	brcc	.+6      	; 0x9ce <vfprintf+0x330>
 9c8:	2b 18       	sub	r2, r11
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <vfprintf+0x332>
 9cc:	98 2c       	mov	r9, r8
 9ce:	21 2c       	mov	r2, r1
 9d0:	a4 fe       	sbrs	r10, 4
 9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <vfprintf+0x356>
 9d4:	b6 01       	movw	r22, r12
 9d6:	80 e3       	ldi	r24, 0x30	; 48
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 9de:	a2 fe       	sbrs	r10, 2
 9e0:	17 c0       	rjmp	.+46     	; 0xa10 <vfprintf+0x372>
 9e2:	a1 fc       	sbrc	r10, 1
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <vfprintf+0x34e>
 9e6:	88 e7       	ldi	r24, 0x78	; 120
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0x352>
 9ec:	88 e5       	ldi	r24, 0x58	; 88
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	b6 01       	movw	r22, r12
 9f2:	0c c0       	rjmp	.+24     	; 0xa0c <vfprintf+0x36e>
 9f4:	8a 2d       	mov	r24, r10
 9f6:	86 78       	andi	r24, 0x86	; 134
 9f8:	59 f0       	breq	.+22     	; 0xa10 <vfprintf+0x372>
 9fa:	a1 fe       	sbrs	r10, 1
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0x364>
 9fe:	8b e2       	ldi	r24, 0x2B	; 43
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <vfprintf+0x366>
 a02:	80 e2       	ldi	r24, 0x20	; 32
 a04:	a7 fc       	sbrc	r10, 7
 a06:	8d e2       	ldi	r24, 0x2D	; 45
 a08:	b6 01       	movw	r22, r12
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a10:	89 14       	cp	r8, r9
 a12:	38 f4       	brcc	.+14     	; 0xa22 <vfprintf+0x384>
 a14:	b6 01       	movw	r22, r12
 a16:	80 e3       	ldi	r24, 0x30	; 48
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a1e:	9a 94       	dec	r9
 a20:	f7 cf       	rjmp	.-18     	; 0xa10 <vfprintf+0x372>
 a22:	8a 94       	dec	r8
 a24:	f3 01       	movw	r30, r6
 a26:	e8 0d       	add	r30, r8
 a28:	f1 1d       	adc	r31, r1
 a2a:	80 81       	ld	r24, Z
 a2c:	b6 01       	movw	r22, r12
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a34:	81 10       	cpse	r8, r1
 a36:	f5 cf       	rjmp	.-22     	; 0xa22 <vfprintf+0x384>
 a38:	22 20       	and	r2, r2
 a3a:	09 f4       	brne	.+2      	; 0xa3e <vfprintf+0x3a0>
 a3c:	42 ce       	rjmp	.-892    	; 0x6c2 <vfprintf+0x24>
 a3e:	b6 01       	movw	r22, r12
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a48:	2a 94       	dec	r2
 a4a:	f6 cf       	rjmp	.-20     	; 0xa38 <vfprintf+0x39a>
 a4c:	f6 01       	movw	r30, r12
 a4e:	86 81       	ldd	r24, Z+6	; 0x06
 a50:	97 81       	ldd	r25, Z+7	; 0x07
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <vfprintf+0x3ba>
 a54:	8f ef       	ldi	r24, 0xFF	; 255
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	2b 96       	adiw	r28, 0x0b	; 11
 a5a:	e2 e1       	ldi	r30, 0x12	; 18
 a5c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__epilogue_restores__>

00000a60 <strnlen_P>:
 a60:	fc 01       	movw	r30, r24
 a62:	05 90       	lpm	r0, Z+
 a64:	61 50       	subi	r22, 0x01	; 1
 a66:	70 40       	sbci	r23, 0x00	; 0
 a68:	01 10       	cpse	r0, r1
 a6a:	d8 f7       	brcc	.-10     	; 0xa62 <strnlen_P+0x2>
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	8e 0f       	add	r24, r30
 a72:	9f 1f       	adc	r25, r31
 a74:	08 95       	ret

00000a76 <strnlen>:
 a76:	fc 01       	movw	r30, r24
 a78:	61 50       	subi	r22, 0x01	; 1
 a7a:	70 40       	sbci	r23, 0x00	; 0
 a7c:	01 90       	ld	r0, Z+
 a7e:	01 10       	cpse	r0, r1
 a80:	d8 f7       	brcc	.-10     	; 0xa78 <strnlen+0x2>
 a82:	80 95       	com	r24
 a84:	90 95       	com	r25
 a86:	8e 0f       	add	r24, r30
 a88:	9f 1f       	adc	r25, r31
 a8a:	08 95       	ret

00000a8c <fputc>:
 a8c:	0f 93       	push	r16
 a8e:	1f 93       	push	r17
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	fb 01       	movw	r30, r22
 a96:	23 81       	ldd	r18, Z+3	; 0x03
 a98:	21 fd       	sbrc	r18, 1
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <fputc+0x16>
 a9c:	8f ef       	ldi	r24, 0xFF	; 255
 a9e:	9f ef       	ldi	r25, 0xFF	; 255
 aa0:	2c c0       	rjmp	.+88     	; 0xafa <fputc+0x6e>
 aa2:	22 ff       	sbrs	r18, 2
 aa4:	16 c0       	rjmp	.+44     	; 0xad2 <fputc+0x46>
 aa6:	46 81       	ldd	r20, Z+6	; 0x06
 aa8:	57 81       	ldd	r21, Z+7	; 0x07
 aaa:	24 81       	ldd	r18, Z+4	; 0x04
 aac:	35 81       	ldd	r19, Z+5	; 0x05
 aae:	42 17       	cp	r20, r18
 ab0:	53 07       	cpc	r21, r19
 ab2:	44 f4       	brge	.+16     	; 0xac4 <fputc+0x38>
 ab4:	a0 81       	ld	r26, Z
 ab6:	b1 81       	ldd	r27, Z+1	; 0x01
 ab8:	9d 01       	movw	r18, r26
 aba:	2f 5f       	subi	r18, 0xFF	; 255
 abc:	3f 4f       	sbci	r19, 0xFF	; 255
 abe:	31 83       	std	Z+1, r19	; 0x01
 ac0:	20 83       	st	Z, r18
 ac2:	8c 93       	st	X, r24
 ac4:	26 81       	ldd	r18, Z+6	; 0x06
 ac6:	37 81       	ldd	r19, Z+7	; 0x07
 ac8:	2f 5f       	subi	r18, 0xFF	; 255
 aca:	3f 4f       	sbci	r19, 0xFF	; 255
 acc:	37 83       	std	Z+7, r19	; 0x07
 ace:	26 83       	std	Z+6, r18	; 0x06
 ad0:	14 c0       	rjmp	.+40     	; 0xafa <fputc+0x6e>
 ad2:	8b 01       	movw	r16, r22
 ad4:	ec 01       	movw	r28, r24
 ad6:	fb 01       	movw	r30, r22
 ad8:	00 84       	ldd	r0, Z+8	; 0x08
 ada:	f1 85       	ldd	r31, Z+9	; 0x09
 adc:	e0 2d       	mov	r30, r0
 ade:	09 95       	icall
 ae0:	89 2b       	or	r24, r25
 ae2:	e1 f6       	brne	.-72     	; 0xa9c <fputc+0x10>
 ae4:	d8 01       	movw	r26, r16
 ae6:	16 96       	adiw	r26, 0x06	; 6
 ae8:	8d 91       	ld	r24, X+
 aea:	9c 91       	ld	r25, X
 aec:	17 97       	sbiw	r26, 0x07	; 7
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	17 96       	adiw	r26, 0x07	; 7
 af2:	9c 93       	st	X, r25
 af4:	8e 93       	st	-X, r24
 af6:	16 97       	sbiw	r26, 0x06	; 6
 af8:	ce 01       	movw	r24, r28
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	1f 91       	pop	r17
 b00:	0f 91       	pop	r16
 b02:	08 95       	ret

00000b04 <__ultoa_invert>:
 b04:	fa 01       	movw	r30, r20
 b06:	aa 27       	eor	r26, r26
 b08:	28 30       	cpi	r18, 0x08	; 8
 b0a:	51 f1       	breq	.+84     	; 0xb60 <__ultoa_invert+0x5c>
 b0c:	20 31       	cpi	r18, 0x10	; 16
 b0e:	81 f1       	breq	.+96     	; 0xb70 <__ultoa_invert+0x6c>
 b10:	e8 94       	clt
 b12:	6f 93       	push	r22
 b14:	6e 7f       	andi	r22, 0xFE	; 254
 b16:	6e 5f       	subi	r22, 0xFE	; 254
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	af 4f       	sbci	r26, 0xFF	; 255
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	3e d0       	rcall	.+124    	; 0xba0 <__ultoa_invert+0x9c>
 b24:	b4 e0       	ldi	r27, 0x04	; 4
 b26:	3c d0       	rcall	.+120    	; 0xba0 <__ultoa_invert+0x9c>
 b28:	67 0f       	add	r22, r23
 b2a:	78 1f       	adc	r23, r24
 b2c:	89 1f       	adc	r24, r25
 b2e:	9a 1f       	adc	r25, r26
 b30:	a1 1d       	adc	r26, r1
 b32:	68 0f       	add	r22, r24
 b34:	79 1f       	adc	r23, r25
 b36:	8a 1f       	adc	r24, r26
 b38:	91 1d       	adc	r25, r1
 b3a:	a1 1d       	adc	r26, r1
 b3c:	6a 0f       	add	r22, r26
 b3e:	71 1d       	adc	r23, r1
 b40:	81 1d       	adc	r24, r1
 b42:	91 1d       	adc	r25, r1
 b44:	a1 1d       	adc	r26, r1
 b46:	20 d0       	rcall	.+64     	; 0xb88 <__ultoa_invert+0x84>
 b48:	09 f4       	brne	.+2      	; 0xb4c <__ultoa_invert+0x48>
 b4a:	68 94       	set
 b4c:	3f 91       	pop	r19
 b4e:	2a e0       	ldi	r18, 0x0A	; 10
 b50:	26 9f       	mul	r18, r22
 b52:	11 24       	eor	r1, r1
 b54:	30 19       	sub	r19, r0
 b56:	30 5d       	subi	r19, 0xD0	; 208
 b58:	31 93       	st	Z+, r19
 b5a:	de f6       	brtc	.-74     	; 0xb12 <__ultoa_invert+0xe>
 b5c:	cf 01       	movw	r24, r30
 b5e:	08 95       	ret
 b60:	46 2f       	mov	r20, r22
 b62:	47 70       	andi	r20, 0x07	; 7
 b64:	40 5d       	subi	r20, 0xD0	; 208
 b66:	41 93       	st	Z+, r20
 b68:	b3 e0       	ldi	r27, 0x03	; 3
 b6a:	0f d0       	rcall	.+30     	; 0xb8a <__ultoa_invert+0x86>
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__ultoa_invert+0x5c>
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <__ultoa_invert+0x58>
 b70:	46 2f       	mov	r20, r22
 b72:	4f 70       	andi	r20, 0x0F	; 15
 b74:	40 5d       	subi	r20, 0xD0	; 208
 b76:	4a 33       	cpi	r20, 0x3A	; 58
 b78:	18 f0       	brcs	.+6      	; 0xb80 <__ultoa_invert+0x7c>
 b7a:	49 5d       	subi	r20, 0xD9	; 217
 b7c:	31 fd       	sbrc	r19, 1
 b7e:	40 52       	subi	r20, 0x20	; 32
 b80:	41 93       	st	Z+, r20
 b82:	02 d0       	rcall	.+4      	; 0xb88 <__ultoa_invert+0x84>
 b84:	a9 f7       	brne	.-22     	; 0xb70 <__ultoa_invert+0x6c>
 b86:	ea cf       	rjmp	.-44     	; 0xb5c <__ultoa_invert+0x58>
 b88:	b4 e0       	ldi	r27, 0x04	; 4
 b8a:	a6 95       	lsr	r26
 b8c:	97 95       	ror	r25
 b8e:	87 95       	ror	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	ba 95       	dec	r27
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0x86>
 b98:	00 97       	sbiw	r24, 0x00	; 0
 b9a:	61 05       	cpc	r22, r1
 b9c:	71 05       	cpc	r23, r1
 b9e:	08 95       	ret
 ba0:	9b 01       	movw	r18, r22
 ba2:	ac 01       	movw	r20, r24
 ba4:	0a 2e       	mov	r0, r26
 ba6:	06 94       	lsr	r0
 ba8:	57 95       	ror	r21
 baa:	47 95       	ror	r20
 bac:	37 95       	ror	r19
 bae:	27 95       	ror	r18
 bb0:	ba 95       	dec	r27
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__ultoa_invert+0xa2>
 bb4:	62 0f       	add	r22, r18
 bb6:	73 1f       	adc	r23, r19
 bb8:	84 1f       	adc	r24, r20
 bba:	95 1f       	adc	r25, r21
 bbc:	a0 1d       	adc	r26, r0
 bbe:	08 95       	ret

00000bc0 <__prologue_saves__>:
 bc0:	2f 92       	push	r2
 bc2:	3f 92       	push	r3
 bc4:	4f 92       	push	r4
 bc6:	5f 92       	push	r5
 bc8:	6f 92       	push	r6
 bca:	7f 92       	push	r7
 bcc:	8f 92       	push	r8
 bce:	9f 92       	push	r9
 bd0:	af 92       	push	r10
 bd2:	bf 92       	push	r11
 bd4:	cf 92       	push	r12
 bd6:	df 92       	push	r13
 bd8:	ef 92       	push	r14
 bda:	ff 92       	push	r15
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62
 be8:	ca 1b       	sub	r28, r26
 bea:	db 0b       	sbc	r29, r27
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
 bf6:	09 94       	ijmp

00000bf8 <__epilogue_restores__>:
 bf8:	2a 88       	ldd	r2, Y+18	; 0x12
 bfa:	39 88       	ldd	r3, Y+17	; 0x11
 bfc:	48 88       	ldd	r4, Y+16	; 0x10
 bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
 c00:	6e 84       	ldd	r6, Y+14	; 0x0e
 c02:	7d 84       	ldd	r7, Y+13	; 0x0d
 c04:	8c 84       	ldd	r8, Y+12	; 0x0c
 c06:	9b 84       	ldd	r9, Y+11	; 0x0b
 c08:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0a:	b9 84       	ldd	r11, Y+9	; 0x09
 c0c:	c8 84       	ldd	r12, Y+8	; 0x08
 c0e:	df 80       	ldd	r13, Y+7	; 0x07
 c10:	ee 80       	ldd	r14, Y+6	; 0x06
 c12:	fd 80       	ldd	r15, Y+5	; 0x05
 c14:	0c 81       	ldd	r16, Y+4	; 0x04
 c16:	1b 81       	ldd	r17, Y+3	; 0x03
 c18:	aa 81       	ldd	r26, Y+2	; 0x02
 c1a:	b9 81       	ldd	r27, Y+1	; 0x01
 c1c:	ce 0f       	add	r28, r30
 c1e:	d1 1d       	adc	r29, r1
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	ed 01       	movw	r28, r26
 c2c:	08 95       	ret

00000c2e <_exit>:
 c2e:	f8 94       	cli

00000c30 <__stop_program>:
 c30:	ff cf       	rjmp	.-2      	; 0xc30 <__stop_program>

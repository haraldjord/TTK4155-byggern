
PingPongLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800238  00800238  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001537  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000960  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a8  00000000  00000000  0000379a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ef       	ldi	r30, 0xF2	; 242
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 33       	cpi	r26, 0x38	; 56
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e3       	ldi	r26, 0x38	; 56
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 33       	cpi	r26, 0x3E	; 62
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 18 01 	call	0x230	; 0x230 <main>
  a6:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
  ba:	8c b1       	in	r24, 0x0c	; 12
  bc:	08 95       	ret

000000be <OLED_send_command>:
  be:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdc2>
  c2:	08 95       	ret

000000c4 <OLED_goto_line>:
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	18 f4       	brcc	.+6      	; 0xce <OLED_goto_line+0xa>
  c8:	80 55       	subi	r24, 0x50	; 80
  ca:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  ce:	08 95       	ret

000000d0 <OLED_goto_column>:
  d0:	cf 93       	push	r28
  d2:	88 23       	and	r24, r24
  d4:	54 f0       	brlt	.+20     	; 0xea <OLED_goto_column+0x1a>
  d6:	c8 2f       	mov	r28, r24
  d8:	c2 95       	swap	r28
  da:	cf 70       	andi	r28, 0x0F	; 15
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	8c 0f       	add	r24, r28
  e6:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <OLED_home>:
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <OLED_goto_line>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <OLED_goto_column>
  fa:	08 95       	ret

000000fc <OLED_send_data>:
  fc:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xfc2>
 100:	08 95       	ret

00000102 <OLED_clear_line>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <OLED_goto_line>
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	04 c0       	rjmp	.+8      	; 0x118 <OLED_clear_line+0x16>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 7e 00 	call	0xfc	; 0xfc <OLED_send_data>
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c0 38       	cpi	r28, 0x80	; 128
 11a:	d1 05       	cpc	r29, r1
 11c:	cc f3       	brlt	.-14     	; 0x110 <OLED_clear_line+0xe>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <OLED_reset>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <OLED_reset+0x12>
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 81 00 	call	0x102	; 0x102 <OLED_clear_line>
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	c8 30       	cpi	r28, 0x08	; 8
 138:	d1 05       	cpc	r29, r1
 13a:	cc f3       	brlt	.-14     	; 0x12e <OLED_reset+0xa>
 13c:	0e 94 77 00 	call	0xee	; 0xee <OLED_home>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <OLED_Init>:
 146:	8e ea       	ldi	r24, 0xAE	; 174
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 14c:	81 ea       	ldi	r24, 0xA1	; 161
 14e:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 152:	8a ed       	ldi	r24, 0xDA	; 218
 154:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 158:	82 e1       	ldi	r24, 0x12	; 18
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 15e:	88 ec       	ldi	r24, 0xC8	; 200
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 164:	88 ea       	ldi	r24, 0xA8	; 168
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 170:	85 ed       	ldi	r24, 0xD5	; 213
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 17c:	81 e8       	ldi	r24, 0x81	; 129
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 182:	80 e5       	ldi	r24, 0x50	; 80
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 188:	89 ed       	ldi	r24, 0xD9	; 217
 18a:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 18e:	81 e2       	ldi	r24, 0x21	; 33
 190:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1a0:	8b ed       	ldi	r24, 0xDB	; 219
 1a2:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1ac:	8d ea       	ldi	r24, 0xAD	; 173
 1ae:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1b8:	84 ea       	ldi	r24, 0xA4	; 164
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1be:	86 ea       	ldi	r24, 0xA6	; 166
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1c4:	8f ea       	ldi	r24, 0xAF	; 175
 1c6:	0e 94 5f 00 	call	0xbe	; 0xbe <OLED_send_command>
 1ca:	08 95       	ret

000001cc <SPI_Init>:
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	80 6b       	ori	r24, 0xB0	; 176
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	87 b3       	in	r24, 0x17	; 23
 1d4:	8f 7b       	andi	r24, 0xBF	; 191
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	8d b1       	in	r24, 0x0d	; 13
 1da:	81 65       	ori	r24, 0x51	; 81
 1dc:	8d b9       	out	0x0d, r24	; 13
 1de:	08 95       	ret

000001e0 <SPI_write>:
 1e0:	8f b9       	out	0x0f, r24	; 15
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <SPI_write+0x2>
 1e6:	08 95       	ret

000001e8 <USART_Init>:
 1e8:	90 bd       	out	0x20, r25	; 32
 1ea:	89 b9       	out	0x09, r24	; 9
 1ec:	88 e1       	ldi	r24, 0x18	; 24
 1ee:	8a b9       	out	0x0a, r24	; 10
 1f0:	8e ea       	ldi	r24, 0xAE	; 174
 1f2:	80 bd       	out	0x20, r24	; 32
 1f4:	08 95       	ret

000001f6 <SRAM_Init>:

void SRAM_Init(void) {
	// Enable external memory interface
	MCUCR |= (1 << SRE);
 1f6:	85 b7       	in	r24, 0x35	; 53
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	85 bf       	out	0x35, r24	; 53
	// Mask PC7-PC4
	SFIOR |= (1 << XMM2);
 1fc:	80 b7       	in	r24, 0x30	; 48
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	80 bf       	out	0x30, r24	; 48
 202:	08 95       	ret

00000204 <CLK_Init>:
}

void CLK_Init(int TOP) {
 204:	9c 01       	movw	r18, r24
	// Set PD4 as output
	DDRD |= (1 << DDD4);
 206:	91 b3       	in	r25, 0x11	; 17
 208:	90 61       	ori	r25, 0x10	; 16
 20a:	91 bb       	out	0x11, r25	; 17
	
	// Compare output mode: Toggle compare match
	TCCR3A |= (1 << COM3A0); 
 20c:	eb e8       	ldi	r30, 0x8B	; 139
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	90 81       	ld	r25, Z
 212:	90 64       	ori	r25, 0x40	; 64
 214:	90 83       	st	Z, r25
	
	// Mode 4, CTC
	TCCR3B |= (1 << WGM32);
 216:	ea e8       	ldi	r30, 0x8A	; 138
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	98 60       	ori	r25, 0x08	; 8
 21e:	90 83       	st	Z, r25
	
	// Set counter TOP value
	OCR3A = TOP;
 220:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 224:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	
	// Prescaler 1
	TCCR3B |= (1 << CS30);
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <main>:
int offset_x = 0;
int offset_y = 0;

int main(void)
{
	DDRA = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	8a bb       	out	0x1a, r24	; 26
	DDRE |= (0x02);
 234:	86 b1       	in	r24, 0x06	; 6
 236:	82 60       	ori	r24, 0x02	; 2
 238:	86 b9       	out	0x06, r24	; 6
	
	// Right and left button inputs
	DDRD &= !( (1 << PD2) | (1 << PD3) );
 23a:	81 b3       	in	r24, 0x11	; 17
 23c:	11 ba       	out	0x11, r1	; 17
	// Joystick button
	DDRE &= !(1 << PE2);
 23e:	86 b1       	in	r24, 0x06	; 6
 240:	16 b8       	out	0x06, r1	; 6
	
	USART_Init(MYUBRR);
 242:	8f e1       	ldi	r24, 0x1F	; 31
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <USART_Init>
	CLK_Init(0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 02 01 	call	0x204	; 0x204 <CLK_Init>
	SRAM_Init();
 252:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <SRAM_Init>
	OLED_Init();
 256:	0e 94 a3 00 	call	0x146	; 0x146 <OLED_Init>
	SPI_Init();
 25a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SPI_Init>
	
	// Setup for printf
	stdout = &uart_stdio;
 25e:	e8 e3       	ldi	r30, 0x38	; 56
 260:	f2 e0       	ldi	r31, 0x02	; 2
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	93 83       	std	Z+3, r25	; 0x03
 268:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_stdio;
 26a:	91 83       	std	Z+1, r25	; 0x01
 26c:	80 83       	st	Z, r24
	char min_pos = 0;
	char max_pos = 0;
	char screen = 0;
	char prev_screen = 1;
	
	OLED_reset();	
 26e:	0e 94 92 00 	call	0x124	; 0x124 <OLED_reset>
	
	
	while (1) {
		//SPI_tranceive('A');
		
		PORTB &= (~(1 << PB4));
 272:	88 b3       	in	r24, 0x18	; 24
 274:	8f 7e       	andi	r24, 0xEF	; 239
 276:	88 bb       	out	0x18, r24	; 24
		SPI_write('a');
 278:	81 e6       	ldi	r24, 0x61	; 97
 27a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_write>
		PORTB |= (1<<PB4);
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	80 61       	ori	r24, 0x10	; 16
 282:	88 bb       	out	0x18, r24	; 24
		// _delay_ms(10);
		printf("0\n");
 284:	86 e3       	ldi	r24, 0x36	; 54
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	0e 94 47 01 	call	0x28e	; 0x28e <puts>
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <main+0x42>

0000028e <puts>:
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__data_end+0x2>
 29a:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <__data_end+0x3>
 29e:	23 81       	ldd	r18, Z+3	; 0x03
 2a0:	21 ff       	sbrs	r18, 1
 2a2:	1b c0       	rjmp	.+54     	; 0x2da <puts+0x4c>
 2a4:	8c 01       	movw	r16, r24
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	f8 01       	movw	r30, r16
 2ac:	81 91       	ld	r24, Z+
 2ae:	8f 01       	movw	r16, r30
 2b0:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <__data_end+0x2>
 2b4:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <__data_end+0x3>
 2b8:	db 01       	movw	r26, r22
 2ba:	18 96       	adiw	r26, 0x08	; 8
 2bc:	ed 91       	ld	r30, X+
 2be:	fc 91       	ld	r31, X
 2c0:	19 97       	sbiw	r26, 0x09	; 9
 2c2:	88 23       	and	r24, r24
 2c4:	31 f0       	breq	.+12     	; 0x2d2 <puts+0x44>
 2c6:	09 95       	icall
 2c8:	89 2b       	or	r24, r25
 2ca:	79 f3       	breq	.-34     	; 0x2aa <puts+0x1c>
 2cc:	df ef       	ldi	r29, 0xFF	; 255
 2ce:	cf ef       	ldi	r28, 0xFF	; 255
 2d0:	ec cf       	rjmp	.-40     	; 0x2aa <puts+0x1c>
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	09 95       	icall
 2d6:	89 2b       	or	r24, r25
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <puts+0x52>
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <puts+0x56>
 2e0:	8d 2f       	mov	r24, r29
 2e2:	9c 2f       	mov	r25, r28
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
